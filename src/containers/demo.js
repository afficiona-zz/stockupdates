!function(e, t) {
  "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
    if (!e.document)throw new Error("jQuery requires a window with a document");
    return t(e)
  } : t(e)
}("undefined" != typeof window ? window : this, function(e, t) {
  function n(e) {
    var t = e.length, n = Z.type(e);
    return "function" === n || Z.isWindow(e) ? !1 : 1 === e.nodeType && t ? !0 : "array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e
  }

  function r(e, t, n) {
    if (Z.isFunction(t))return Z.grep(e, function(e, r) {
      return !!t.call(e, r, e) !== n
    });
    if (t.nodeType)return Z.grep(e, function(e) {
      return e === t !== n
    });
    if ("string" == typeof t) {
      if (at.test(t))return Z.filter(t, e, n);
      t = Z.filter(t, e)
    }
    return Z.grep(e, function(e) {
      return U.call(t, e) >= 0 !== n
    })
  }

  function i(e, t) {
    for (; (e = e[t]) && 1 !== e.nodeType;);
    return e
  }

  function o(e) {
    var t = ht[e] = {};
    return Z.each(e.match(dt) || [], function(e, n) {
      t[n] = !0
    }), t
  }

  function s() {
    J.removeEventListener("DOMContentLoaded", s, !1), e.removeEventListener("load", s, !1), Z.ready()
  }

  function a() {
    Object.defineProperty(this.cache = {}, 0, {
      get: function() {
        return {}
      }
    }), this.expando = Z.expando + a.uid++
  }

  function u(e, t, n) {
    var r;
    if (void 0 === n && 1 === e.nodeType)if (r = "data-" + t.replace(bt, "-$1").toLowerCase(), n = e.getAttribute(r), "string" == typeof n) {
      try {
        n = "true" === n ? !0 : "false" === n ? !1 : "null" === n ? null : +n + "" === n ? +n : xt.test(n) ? Z.parseJSON(n) : n
      } catch (i) {
      }
      yt.set(e, t, n)
    } else n = void 0;
    return n
  }

  function l() {
    return !0
  }

  function c() {
    return !1
  }

  function f() {
    try {
      return J.activeElement
    } catch (e) {
    }
  }

  function p(e, t) {
    return Z.nodeName(e, "table") && Z.nodeName(11 !== t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e
  }

  function d(e) {
    return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e
  }

  function h(e) {
    var t = Pt.exec(e.type);
    return t ? e.type = t[1] : e.removeAttribute("type"), e
  }

  function g(e, t) {
    for (var n = 0, r = e.length; r > n; n++)vt.set(e[n], "globalEval", !t || vt.get(t[n], "globalEval"))
  }

  function m(e, t) {
    var n, r, i, o, s, a, u, l;
    if (1 === t.nodeType) {
      if (vt.hasData(e) && (o = vt.access(e), s = vt.set(t, o), l = o.events)) {
        delete s.handle, s.events = {};
        for (i in l)for (n = 0, r = l[i].length; r > n; n++)Z.event.add(t, i, l[i][n])
      }
      yt.hasData(e) && (a = yt.access(e), u = Z.extend({}, a), yt.set(t, u))
    }
  }

  function v(e, t) {
    var n = e.getElementsByTagName ? e.getElementsByTagName(t || "*") : e.querySelectorAll ? e.querySelectorAll(t || "*") : [];
    return void 0 === t || t && Z.nodeName(e, t) ? Z.merge([e], n) : n
  }

  function y(e, t) {
    var n = t.nodeName.toLowerCase();
    "input" === n && Nt.test(e.type) ? t.checked = e.checked : ("input" === n || "textarea" === n) && (t.defaultValue = e.defaultValue)
  }

  function x(t, n) {
    var r, i = Z(n.createElement(t)).appendTo(n.body), o = e.getDefaultComputedStyle && (r = e.getDefaultComputedStyle(i[0])) ? r.display : Z.css(i[0], "display");
    return i.detach(), o
  }

  function b(e) {
    var t = J, n = $t[e];
    return n || (n = x(e, t), "none" !== n && n || (Wt = (Wt || Z("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement), t = Wt[0].contentDocument, t.write(), t.close(), n = x(e, t), Wt.detach()), $t[e] = n), n
  }

  function w(e, t, n) {
    var r, i, o, s, a = e.style;
    return n = n || _t(e), n && (s = n.getPropertyValue(t) || n[t]), n && ("" !== s || Z.contains(e.ownerDocument, e) || (s = Z.style(e, t)), Bt.test(s) && It.test(t) && (r = a.width, i = a.minWidth, o = a.maxWidth, a.minWidth = a.maxWidth = a.width = s, s = n.width, a.width = r, a.minWidth = i, a.maxWidth = o)), void 0 !== s ? s + "" : s
  }

  function T(e, t) {
    return {
      get: function() {
        return e() ? void delete this.get : (this.get = t).apply(this, arguments)
      }
    }
  }

  function C(e, t) {
    if (t in e)return t;
    for (var n = t[0].toUpperCase() + t.slice(1), r = t, i = Gt.length; i--;)if (t = Gt[i] + n, t in e)return t;
    return r
  }

  function N(e, t, n) {
    var r = Xt.exec(t);
    return r ? Math.max(0, r[1] - (n || 0)) + (r[2] || "px") : t
  }

  function k(e, t, n, r, i) {
    for (var o = n === (r ? "border" : "content") ? 4 : "width" === t ? 1 : 0, s = 0; 4 > o; o += 2)"margin" === n && (s += Z.css(e, n + Tt[o], !0, i)), r ? ("content" === n && (s -= Z.css(e, "padding" + Tt[o], !0, i)), "margin" !== n && (s -= Z.css(e, "border" + Tt[o] + "Width", !0, i))) : (s += Z.css(e, "padding" + Tt[o], !0, i), "padding" !== n && (s += Z.css(e, "border" + Tt[o] + "Width", !0, i)));
    return s
  }

  function E(e, t, n) {
    var r = !0, i = "width" === t ? e.offsetWidth : e.offsetHeight, o = _t(e), s = "border-box" === Z.css(e, "boxSizing", !1, o);
    if (0 >= i || null == i) {
      if (i = w(e, t, o), (0 > i || null == i) && (i = e.style[t]), Bt.test(i))return i;
      r = s && (Q.boxSizingReliable() || i === e.style[t]), i = parseFloat(i) || 0
    }
    return i + k(e, t, n || (s ? "border" : "content"), r, o) + "px"
  }

  function S(e, t) {
    for (var n, r, i, o = [], s = 0, a = e.length; a > s; s++)r = e[s], r.style && (o[s] = vt.get(r, "olddisplay"), n = r.style.display, t ? (o[s] || "none" !== n || (r.style.display = ""), "" === r.style.display && Ct(r) && (o[s] = vt.access(r, "olddisplay", b(r.nodeName)))) : (i = Ct(r), "none" === n && i || vt.set(r, "olddisplay", i ? n : Z.css(r, "display"))));
    for (s = 0; a > s; s++)r = e[s], r.style && (t && "none" !== r.style.display && "" !== r.style.display || (r.style.display = t ? o[s] || "" : "none"));
    return e
  }

  function D(e, t, n, r, i) {
    return new D.prototype.init(e, t, n, r, i)
  }

  function j() {
    return setTimeout(function() {
      Qt = void 0
    }), Qt = Z.now()
  }

  function A(e, t) {
    var n, r = 0, i = { height: e };
    for (t = t ? 1 : 0; 4 > r; r += 2 - t)n = Tt[r], i["margin" + n] = i["padding" + n] = e;
    return t && (i.opacity = i.width = e), i
  }

  function L(e, t, n) {
    for (var r, i = (nn[t] || []).concat(nn["*"]), o = 0, s = i.length; s > o; o++)if (r = i[o].call(n, t, e))return r
  }

  function q(e, t, n) {
    var r, i, o, s, a, u, l, c, f = this, p = {}, d = e.style, h = e.nodeType && Ct(e), g = vt.get(e, "fxshow");
    n.queue || (a = Z._queueHooks(e, "fx"), null == a.unqueued && (a.unqueued = 0, u = a.empty.fire, a.empty.fire = function() {
      a.unqueued || u()
    }), a.unqueued++, f.always(function() {
      f.always(function() {
        a.unqueued--, Z.queue(e, "fx").length || a.empty.fire()
      })
    })), 1 === e.nodeType && ("height" in t || "width" in t) && (n.overflow = [d.overflow, d.overflowX, d.overflowY], l = Z.css(e, "display"), c = "none" === l ? vt.get(e, "olddisplay") || b(e.nodeName) : l, "inline" === c && "none" === Z.css(e, "float") && (d.display = "inline-block")), n.overflow && (d.overflow = "hidden", f.always(function() {
      d.overflow = n.overflow[0], d.overflowX = n.overflow[1], d.overflowY = n.overflow[2]
    }));
    for (r in t)if (i = t[r], Kt.exec(i)) {
      if (delete t[r], o = o || "toggle" === i, i === (h ? "hide" : "show")) {
        if ("show" !== i || !g || void 0 === g[r])continue;
        h = !0
      }
      p[r] = g && g[r] || Z.style(e, r)
    } else l = void 0;
    if (Z.isEmptyObject(p))"inline" === ("none" === l ? b(e.nodeName) : l) && (d.display = l); else {
      g ? "hidden" in g && (h = g.hidden) : g = vt.access(e, "fxshow", {}), o && (g.hidden = !h), h ? Z(e).show() : f.done(function() {
        Z(e).hide()
      }), f.done(function() {
        var t;
        vt.remove(e, "fxshow");
        for (t in p)Z.style(e, t, p[t])
      });
      for (r in p)s = L(h ? g[r] : 0, r, f), r in g || (g[r] = s.start, h && (s.end = s.start, s.start = "width" === r || "height" === r ? 1 : 0))
    }
  }

  function H(e, t) {
    var n, r, i, o, s;
    for (n in e)if (r = Z.camelCase(n), i = t[r], o = e[n], Z.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), s = Z.cssHooks[r], s && "expand" in s) {
      o = s.expand(o), delete e[r];
      for (n in o)n in e || (e[n] = o[n], t[n] = i)
    } else t[r] = i
  }

  function O(e, t, n) {
    var r, i, o = 0, s = tn.length, a = Z.Deferred().always(function() {
      delete u.elem
    }), u = function() {
      if (i)return !1;
      for (var t = Qt || j(), n = Math.max(0, l.startTime + l.duration - t), r = n / l.duration || 0, o = 1 - r, s = 0, u = l.tweens.length; u > s; s++)l.tweens[s].run(o);
      return a.notifyWith(e, [l, o, n]), 1 > o && u ? n : (a.resolveWith(e, [l]), !1)
    }, l = a.promise({
      elem: e,
      props: Z.extend({}, t),
      opts: Z.extend(!0, { specialEasing: {} }, n),
      originalProperties: t,
      originalOptions: n,
      startTime: Qt || j(),
      duration: n.duration,
      tweens: [],
      createTween: function(t, n) {
        var r = Z.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);
        return l.tweens.push(r), r
      },
      stop: function(t) {
        var n = 0, r = t ? l.tweens.length : 0;
        if (i)return this;
        for (i = !0; r > n; n++)l.tweens[n].run(1);
        return t ? a.resolveWith(e, [l, t]) : a.rejectWith(e, [l, t]), this
      }
    }), c = l.props;
    for (H(c, l.opts.specialEasing); s > o; o++)if (r = tn[o].call(l, e, c, l.opts))return r;
    return Z.map(c, L, l), Z.isFunction(l.opts.start) && l.opts.start.call(e, l), Z.fx.timer(Z.extend(u, {
      elem: e,
      anim: l,
      queue: l.opts.queue
    })), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always)
  }

  function F(e) {
    return function(t, n) {
      "string" != typeof t && (n = t, t = "*");
      var r, i = 0, o = t.toLowerCase().match(dt) || [];
      if (Z.isFunction(n))for (; r = o[i++];)"+" === r[0] ? (r = r.slice(1) || "*", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n)
    }
  }

  function P(e, t, n, r) {
    function i(a) {
      var u;
      return o[a] = !0, Z.each(e[a] || [], function(e, a) {
        var l = a(t, n, r);
        return "string" != typeof l || s || o[l] ? s ? !(u = l) : void 0 : (t.dataTypes.unshift(l), i(l), !1)
      }), u
    }

    var o = {}, s = e === bn;
    return i(t.dataTypes[0]) || !o["*"] && i("*")
  }

  function R(e, t) {
    var n, r, i = Z.ajaxSettings.flatOptions || {};
    for (n in t)void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);
    return r && Z.extend(!0, e, r), e
  }

  function M(e, t, n) {
    for (var r, i, o, s, a = e.contents, u = e.dataTypes; "*" === u[0];)u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
    if (r)for (i in a)if (a[i] && a[i].test(r)) {
      u.unshift(i);
      break
    }
    if (u[0] in n)o = u[0]; else {
      for (i in n) {
        if (!u[0] || e.converters[i + " " + u[0]]) {
          o = i;
          break
        }
        s || (s = i)
      }
      o = o || s
    }
    return o ? (o !== u[0] && u.unshift(o), n[o]) : void 0
  }

  function W(e, t, n, r) {
    var i, o, s, a, u, l = {}, c = e.dataTypes.slice();
    if (c[1])for (s in e.converters)l[s.toLowerCase()] = e.converters[s];
    for (o = c.shift(); o;)if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift())if ("*" === o)o = u; else if ("*" !== u && u !== o) {
      if (s = l[u + " " + o] || l["* " + o], !s)for (i in l)if (a = i.split(" "), a[1] === o && (s = l[u + " " + a[0]] || l["* " + a[0]])) {
        s === !0 ? s = l[i] : l[i] !== !0 && (o = a[0], c.unshift(a[1]));
        break
      }
      if (s !== !0)if (s && e["throws"])t = s(t); else try {
        t = s(t)
      } catch (f) {
        return { state: "parsererror", error: s ? f : "No conversion from " + u + " to " + o }
      }
    }
    return { state: "success", data: t }
  }

  function $(e, t, n, r) {
    var i;
    if (Z.isArray(t))Z.each(t, function(t, i) {
      n || kn.test(e) ? r(e, i) : $(e + "[" + ("object" == typeof i ? t : "") + "]", i, n, r)
    }); else if (n || "object" !== Z.type(t))r(e, t); else for (i in t)$(e + "[" + i + "]", t[i], n, r)
  }

  function I(e) {
    return Z.isWindow(e) ? e : 9 === e.nodeType && e.defaultView
  }

  var B = [], _ = B.slice, z = B.concat, X = B.push, U = B.indexOf, V = {}, Y = V.toString, G = V.hasOwnProperty, Q = {}, J = e.document, K = "2.1.3", Z = function(e, t) {
    return new Z.fn.init(e, t)
  }, et = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, tt = /^-ms-/, nt = /-([\da-z])/gi, rt = function(e, t) {
    return t.toUpperCase()
  };
  Z.fn = Z.prototype = {
    jquery: K, constructor: Z, selector: "", length: 0, toArray: function() {
      return _.call(this)
    }, get: function(e) {
      return null != e ? 0 > e ? this[e + this.length] : this[e] : _.call(this)
    }, pushStack: function(e) {
      var t = Z.merge(this.constructor(), e);
      return t.prevObject = this, t.context = this.context, t
    }, each: function(e, t) {
      return Z.each(this, e, t)
    }, map: function(e) {
      return this.pushStack(Z.map(this, function(t, n) {
        return e.call(t, n, t)
      }))
    }, slice: function() {
      return this.pushStack(_.apply(this, arguments))
    }, first: function() {
      return this.eq(0)
    }, last: function() {
      return this.eq(-1)
    }, eq: function(e) {
      var t = this.length, n = +e + (0 > e ? t : 0);
      return this.pushStack(n >= 0 && t > n ? [this[n]] : [])
    }, end: function() {
      return this.prevObject || this.constructor(null)
    }, push: X, sort: B.sort, splice: B.splice
  }, Z.extend = Z.fn.extend = function() {
    var e, t, n, r, i, o, s = arguments[0] || {}, a = 1, u = arguments.length, l = !1;
    for ("boolean" == typeof s && (l = s, s = arguments[a] || {}, a++), "object" == typeof s || Z.isFunction(s) || (s = {}), a === u && (s = this, a--); u > a; a++)if (null != (e = arguments[a]))for (t in e)n = s[t], r = e[t], s !== r && (l && r && (Z.isPlainObject(r) || (i = Z.isArray(r))) ? (i ? (i = !1, o = n && Z.isArray(n) ? n : []) : o = n && Z.isPlainObject(n) ? n : {}, s[t] = Z.extend(l, o, r)) : void 0 !== r && (s[t] = r));
    return s
  }, Z.extend({
    expando: "jQuery" + (K + Math.random()).replace(/\D/g, ""), isReady: !0, error: function(e) {
      throw new Error(e)
    }, noop: function() {
    }, isFunction: function(e) {
      return "function" === Z.type(e)
    }, isArray: Array.isArray, isWindow: function(e) {
      return null != e && e === e.window
    }, isNumeric: function(e) {
      return !Z.isArray(e) && e - parseFloat(e) + 1 >= 0
    }, isPlainObject: function(e) {
      return "object" !== Z.type(e) || e.nodeType || Z.isWindow(e) ? !1 : e.constructor && !G.call(e.constructor.prototype, "isPrototypeOf") ? !1 : !0
    }, isEmptyObject: function(e) {
      var t;
      for (t in e)return !1;
      return !0
    }, type: function(e) {
      return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? V[Y.call(e)] || "object" : typeof e
    }, globalEval: function(e) {
      var t, n = eval;
      e = Z.trim(e), e && (1 === e.indexOf("use strict") ? (t = J.createElement("script"), t.text = e, J.head.appendChild(t).parentNode.removeChild(t)) : n(e))
    }, camelCase: function(e) {
      return e.replace(tt, "ms-").replace(nt, rt)
    }, nodeName: function(e, t) {
      return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase()
    }, each: function(e, t, r) {
      var i, o = 0, s = e.length, a = n(e);
      if (r) {
        if (a)for (; s > o && (i = t.apply(e[o], r), i !== !1); o++); else for (o in e)if (i = t.apply(e[o], r), i === !1)break
      } else if (a)for (; s > o && (i = t.call(e[o], o, e[o]), i !== !1); o++); else for (o in e)if (i = t.call(e[o], o, e[o]), i === !1)break;
      return e
    }, trim: function(e) {
      return null == e ? "" : (e + "").replace(et, "")
    }, makeArray: function(e, t) {
      var r = t || [];
      return null != e && (n(Object(e)) ? Z.merge(r, "string" == typeof e ? [e] : e) : X.call(r, e)), r
    }, inArray: function(e, t, n) {
      return null == t ? -1 : U.call(t, e, n)
    }, merge: function(e, t) {
      for (var n = +t.length, r = 0, i = e.length; n > r; r++)e[i++] = t[r];
      return e.length = i, e
    }, grep: function(e, t, n) {
      for (var r, i = [], o = 0, s = e.length, a = !n; s > o; o++)r = !t(e[o], o), r !== a && i.push(e[o]);
      return i
    }, map: function(e, t, r) {
      var i, o = 0, s = e.length, a = n(e), u = [];
      if (a)for (; s > o; o++)i = t(e[o], o, r), null != i && u.push(i); else for (o in e)i = t(e[o], o, r), null != i && u.push(i);
      return z.apply([], u)
    }, guid: 1, proxy: function(e, t) {
      var n, r, i;
      return "string" == typeof t && (n = e[t], t = e, e = n), Z.isFunction(e) ? (r = _.call(arguments, 2), i = function() {
        return e.apply(t || this, r.concat(_.call(arguments)))
      }, i.guid = e.guid = e.guid || Z.guid++, i) : void 0
    }, now: Date.now, support: Q
  }), Z.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(e, t) {
    V["[object " + t + "]"] = t.toLowerCase()
  });
  var it = function(e) {
    function t(e, t, n, r) {
      var i, o, s, a, u, l, f, d, h, g;
      if ((t ? t.ownerDocument || t : $) !== q && L(t), t = t || q, n = n || [], a = t.nodeType, "string" != typeof e || !e || 1 !== a && 9 !== a && 11 !== a)return n;
      if (!r && O) {
        if (11 !== a && (i = yt.exec(e)))if (s = i[1]) {
          if (9 === a) {
            if (o = t.getElementById(s), !o || !o.parentNode)return n;
            if (o.id === s)return n.push(o), n
          } else if (t.ownerDocument && (o = t.ownerDocument.getElementById(s)) && M(t, o) && o.id === s)return n.push(o), n
        } else {
          if (i[2])return K.apply(n, t.getElementsByTagName(e)), n;
          if ((s = i[3]) && w.getElementsByClassName)return K.apply(n, t.getElementsByClassName(s)), n
        }
        if (w.qsa && (!F || !F.test(e))) {
          if (d = f = W, h = t, g = 1 !== a && e, 1 === a && "object" !== t.nodeName.toLowerCase()) {
            for (l = k(e), (f = t.getAttribute("id")) ? d = f.replace(bt, "\\$&") : t.setAttribute("id", d), d = "[id='" + d + "'] ", u = l.length; u--;)l[u] = d + p(l[u]);
            h = xt.test(e) && c(t.parentNode) || t, g = l.join(",")
          }
          if (g)try {
            return K.apply(n, h.querySelectorAll(g)), n
          } catch (m) {
          } finally {
            f || t.removeAttribute("id")
          }
        }
      }
      return S(e.replace(ut, "$1"), t, n, r)
    }

    function n() {
      function e(n, r) {
        return t.push(n + " ") > T.cacheLength && delete e[t.shift()], e[n + " "] = r
      }

      var t = [];
      return e
    }

    function r(e) {
      return e[W] = !0, e
    }

    function i(e) {
      var t = q.createElement("div");
      try {
        return !!e(t)
      } catch (n) {
        return !1
      } finally {
        t.parentNode && t.parentNode.removeChild(t), t = null
      }
    }

    function o(e, t) {
      for (var n = e.split("|"), r = e.length; r--;)T.attrHandle[n[r]] = t
    }

    function s(e, t) {
      var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || V) - (~e.sourceIndex || V);
      if (r)return r;
      if (n)for (; n = n.nextSibling;)if (n === t)return -1;
      return e ? 1 : -1
    }

    function a(e) {
      return function(t) {
        var n = t.nodeName.toLowerCase();
        return "input" === n && t.type === e
      }
    }

    function u(e) {
      return function(t) {
        var n = t.nodeName.toLowerCase();
        return ("input" === n || "button" === n) && t.type === e
      }
    }

    function l(e) {
      return r(function(t) {
        return t = +t, r(function(n, r) {
          for (var i, o = e([], n.length, t), s = o.length; s--;)n[i = o[s]] && (n[i] = !(r[i] = n[i]))
        })
      })
    }

    function c(e) {
      return e && "undefined" != typeof e.getElementsByTagName && e
    }

    function f() {
    }

    function p(e) {
      for (var t = 0, n = e.length, r = ""; n > t; t++)r += e[t].value;
      return r
    }

    function d(e, t, n) {
      var r = t.dir, i = n && "parentNode" === r, o = B++;
      return t.first ? function(t, n, o) {
        for (; t = t[r];)if (1 === t.nodeType || i)return e(t, n, o)
      } : function(t, n, s) {
        var a, u, l = [I, o];
        if (s) {
          for (; t = t[r];)if ((1 === t.nodeType || i) && e(t, n, s))return !0
        } else for (; t = t[r];)if (1 === t.nodeType || i) {
          if (u = t[W] || (t[W] = {}), (a = u[r]) && a[0] === I && a[1] === o)return l[2] = a[2];
          if (u[r] = l, l[2] = e(t, n, s))return !0
        }
      }
    }

    function h(e) {
      return e.length > 1 ? function(t, n, r) {
        for (var i = e.length; i--;)if (!e[i](t, n, r))return !1;
        return !0
      } : e[0]
    }

    function g(e, n, r) {
      for (var i = 0, o = n.length; o > i; i++)t(e, n[i], r);
      return r
    }

    function m(e, t, n, r, i) {
      for (var o, s = [], a = 0, u = e.length, l = null != t; u > a; a++)(o = e[a]) && (!n || n(o, r, i)) && (s.push(o), l && t.push(a));
      return s
    }

    function v(e, t, n, i, o, s) {
      return i && !i[W] && (i = v(i)), o && !o[W] && (o = v(o, s)), r(function(r, s, a, u) {
        var l, c, f, p = [], d = [], h = s.length, v = r || g(t || "*", a.nodeType ? [a] : a, []), y = !e || !r && t ? v : m(v, p, e, a, u), x = n ? o || (r ? e : h || i) ? [] : s : y;
        if (n && n(y, x, a, u), i)for (l = m(x, d), i(l, [], a, u), c = l.length; c--;)(f = l[c]) && (x[d[c]] = !(y[d[c]] = f));
        if (r) {
          if (o || e) {
            if (o) {
              for (l = [], c = x.length; c--;)(f = x[c]) && l.push(y[c] = f);
              o(null, x = [], l, u)
            }
            for (c = x.length; c--;)(f = x[c]) && (l = o ? et(r, f) : p[c]) > -1 && (r[l] = !(s[l] = f))
          }
        } else x = m(x === s ? x.splice(h, x.length) : x), o ? o(null, s, x, u) : K.apply(s, x)
      })
    }

    function y(e) {
      for (var t, n, r, i = e.length, o = T.relative[e[0].type], s = o || T.relative[" "], a = o ? 1 : 0, u = d(function(e) {
        return e === t
      }, s, !0), l = d(function(e) {
        return et(t, e) > -1
      }, s, !0), c = [function(e, n, r) {
        var i = !o && (r || n !== D) || ((t = n).nodeType ? u(e, n, r) : l(e, n, r));
        return t = null, i
      }]; i > a; a++)if (n = T.relative[e[a].type])c = [d(h(c), n)]; else {
        if (n = T.filter[e[a].type].apply(null, e[a].matches), n[W]) {
          for (r = ++a; i > r && !T.relative[e[r].type]; r++);
          return v(a > 1 && h(c), a > 1 && p(e.slice(0, a - 1).concat({ value: " " === e[a - 2].type ? "*" : "" })).replace(ut, "$1"), n, r > a && y(e.slice(a, r)), i > r && y(e = e.slice(r)), i > r && p(e))
        }
        c.push(n)
      }
      return h(c)
    }

    function x(e, n) {
      var i = n.length > 0, o = e.length > 0, s = function(r, s, a, u, l) {
        var c, f, p, d = 0, h = "0", g = r && [], v = [], y = D, x = r || o && T.find.TAG("*", l), b = I += null == y ? 1 : Math.random() || .1, w = x.length;
        for (l && (D = s !== q && s); h !== w && null != (c = x[h]); h++) {
          if (o && c) {
            for (f = 0; p = e[f++];)if (p(c, s, a)) {
              u.push(c);
              break
            }
            l && (I = b)
          }
          i && ((c = !p && c) && d--, r && g.push(c))
        }
        if (d += h, i && h !== d) {
          for (f = 0; p = n[f++];)p(g, v, s, a);
          if (r) {
            if (d > 0)for (; h--;)g[h] || v[h] || (v[h] = Q.call(u));
            v = m(v)
          }
          K.apply(u, v), l && !r && v.length > 0 && d + n.length > 1 && t.uniqueSort(u)
        }
        return l && (I = b, D = y), g
      };
      return i ? r(s) : s
    }

    var b, w, T, C, N, k, E, S, D, j, A, L, q, H, O, F, P, R, M, W = "sizzle" + 1 * new Date, $ = e.document, I = 0, B = 0, _ = n(), z = n(), X = n(), U = function(e, t) {
      return e === t && (A = !0), 0
    }, V = 1 << 31, Y = {}.hasOwnProperty, G = [], Q = G.pop, J = G.push, K = G.push, Z = G.slice, et = function(e, t) {
      for (var n = 0, r = e.length; r > n; n++)if (e[n] === t)return n;
      return -1
    }, tt = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", nt = "[\\x20\\t\\r\\n\\f]", rt = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", it = rt.replace("w", "w#"), ot = "\\[" + nt + "*(" + rt + ")(?:" + nt + "*([*^$|!~]?=)" + nt + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + it + "))|)" + nt + "*\\]", st = ":(" + rt + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + ot + ")*)|.*)\\)|)", at = new RegExp(nt + "+", "g"), ut = new RegExp("^" + nt + "+|((?:^|[^\\\\])(?:\\\\.)*)" + nt + "+$", "g"), lt = new RegExp("^" + nt + "*," + nt + "*"), ct = new RegExp("^" + nt + "*([>+~]|" + nt + ")" + nt + "*"), ft = new RegExp("=" + nt + "*([^\\]'\"]*?)" + nt + "*\\]", "g"), pt = new RegExp(st), dt = new RegExp("^" + it + "$"), ht = {
      ID: new RegExp("^#(" + rt + ")"),
      CLASS: new RegExp("^\\.(" + rt + ")"),
      TAG: new RegExp("^(" + rt.replace("w", "w*") + ")"),
      ATTR: new RegExp("^" + ot),
      PSEUDO: new RegExp("^" + st),
      CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + nt + "*(even|odd|(([+-]|)(\\d*)n|)" + nt + "*(?:([+-]|)" + nt + "*(\\d+)|))" + nt + "*\\)|)", "i"),
      bool: new RegExp("^(?:" + tt + ")$", "i"),
      needsContext: new RegExp("^" + nt + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + nt + "*((?:-\\d)?\\d*)" + nt + "*\\)|)(?=[^-]|$)", "i")
    }, gt = /^(?:input|select|textarea|button)$/i, mt = /^h\d$/i, vt = /^[^{]+\{\s*\[native \w/, yt = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, xt = /[+~]/, bt = /'|\\/g, wt = new RegExp("\\\\([\\da-f]{1,6}" + nt + "?|(" + nt + ")|.)", "ig"), Tt = function(e, t, n) {
      var r = "0x" + t - 65536;
      return r !== r || n ? t : 0 > r ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320)
    }, Ct = function() {
      L()
    };
    try {
      K.apply(G = Z.call($.childNodes), $.childNodes), G[$.childNodes.length].nodeType
    } catch (Nt) {
      K = {
        apply: G.length ? function(e, t) {
          J.apply(e, Z.call(t))
        } : function(e, t) {
          for (var n = e.length, r = 0; e[n++] = t[r++];);
          e.length = n - 1
        }
      }
    }
    w = t.support = {}, N = t.isXML = function(e) {
      var t = e && (e.ownerDocument || e).documentElement;
      return t ? "HTML" !== t.nodeName : !1
    }, L = t.setDocument = function(e) {
      var t, n, r = e ? e.ownerDocument || e : $;
      return r !== q && 9 === r.nodeType && r.documentElement ? (q = r, H = r.documentElement, n = r.defaultView, n && n !== n.top && (n.addEventListener ? n.addEventListener("unload", Ct, !1) : n.attachEvent && n.attachEvent("onunload", Ct)), O = !N(r), w.attributes = i(function(e) {
        return e.className = "i", !e.getAttribute("className")
      }), w.getElementsByTagName = i(function(e) {
        return e.appendChild(r.createComment("")), !e.getElementsByTagName("*").length
      }), w.getElementsByClassName = vt.test(r.getElementsByClassName), w.getById = i(function(e) {
        return H.appendChild(e).id = W, !r.getElementsByName || !r.getElementsByName(W).length
      }), w.getById ? (T.find.ID = function(e, t) {
        if ("undefined" != typeof t.getElementById && O) {
          var n = t.getElementById(e);
          return n && n.parentNode ? [n] : []
        }
      }, T.filter.ID = function(e) {
        var t = e.replace(wt, Tt);
        return function(e) {
          return e.getAttribute("id") === t
        }
      }) : (delete T.find.ID, T.filter.ID = function(e) {
        var t = e.replace(wt, Tt);
        return function(e) {
          var n = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");
          return n && n.value === t
        }
      }), T.find.TAG = w.getElementsByTagName ? function(e, t) {
        return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : w.qsa ? t.querySelectorAll(e) : void 0
      } : function(e, t) {
        var n, r = [], i = 0, o = t.getElementsByTagName(e);
        if ("*" === e) {
          for (; n = o[i++];)1 === n.nodeType && r.push(n);
          return r
        }
        return o
      }, T.find.CLASS = w.getElementsByClassName && function(e, t) {
          return O ? t.getElementsByClassName(e) : void 0
        }, P = [], F = [], (w.qsa = vt.test(r.querySelectorAll)) && (i(function(e) {
        H.appendChild(e).innerHTML = "<a id='" + W + "'></a><select id='" + W + "-\f]' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && F.push("[*^$]=" + nt + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || F.push("\\[" + nt + "*(?:value|" + tt + ")"), e.querySelectorAll("[id~=" + W + "-]").length || F.push("~="), e.querySelectorAll(":checked").length || F.push(":checked"), e.querySelectorAll("a#" + W + "+*").length || F.push(".#.+[+~]")
      }), i(function(e) {
        var t = r.createElement("input");
        t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && F.push("name" + nt + "*[*^$|!~]?="), e.querySelectorAll(":enabled").length || F.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), F.push(",.*:")
      })), (w.matchesSelector = vt.test(R = H.matches || H.webkitMatchesSelector || H.mozMatchesSelector || H.oMatchesSelector || H.msMatchesSelector)) && i(function(e) {
        w.disconnectedMatch = R.call(e, "div"), R.call(e, "[s!='']:x"), P.push("!=", st)
      }), F = F.length && new RegExp(F.join("|")), P = P.length && new RegExp(P.join("|")), t = vt.test(H.compareDocumentPosition), M = t || vt.test(H.contains) ? function(e, t) {
        var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode;
        return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)))
      } : function(e, t) {
        if (t)for (; t = t.parentNode;)if (t === e)return !0;
        return !1
      }, U = t ? function(e, t) {
        if (e === t)return A = !0, 0;
        var n = !e.compareDocumentPosition - !t.compareDocumentPosition;
        return n ? n : (n = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1, 1 & n || !w.sortDetached && t.compareDocumentPosition(e) === n ? e === r || e.ownerDocument === $ && M($, e) ? -1 : t === r || t.ownerDocument === $ && M($, t) ? 1 : j ? et(j, e) - et(j, t) : 0 : 4 & n ? -1 : 1)
      } : function(e, t) {
        if (e === t)return A = !0, 0;
        var n, i = 0, o = e.parentNode, a = t.parentNode, u = [e], l = [t];
        if (!o || !a)return e === r ? -1 : t === r ? 1 : o ? -1 : a ? 1 : j ? et(j, e) - et(j, t) : 0;
        if (o === a)return s(e, t);
        for (n = e; n = n.parentNode;)u.unshift(n);
        for (n = t; n = n.parentNode;)l.unshift(n);
        for (; u[i] === l[i];)i++;
        return i ? s(u[i], l[i]) : u[i] === $ ? -1 : l[i] === $ ? 1 : 0
      }, r) : q
    }, t.matches = function(e, n) {
      return t(e, null, null, n)
    }, t.matchesSelector = function(e, n) {
      if ((e.ownerDocument || e) !== q && L(e), n = n.replace(ft, "='$1']"), !(!w.matchesSelector || !O || P && P.test(n) || F && F.test(n)))try {
        var r = R.call(e, n);
        if (r || w.disconnectedMatch || e.document && 11 !== e.document.nodeType)return r
      } catch (i) {
      }
      return t(n, q, null, [e]).length > 0
    }, t.contains = function(e, t) {
      return (e.ownerDocument || e) !== q && L(e), M(e, t)
    }, t.attr = function(e, t) {
      (e.ownerDocument || e) !== q && L(e);
      var n = T.attrHandle[t.toLowerCase()], r = n && Y.call(T.attrHandle, t.toLowerCase()) ? n(e, t, !O) : void 0;
      return void 0 !== r ? r : w.attributes || !O ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null
    }, t.error = function(e) {
      throw new Error("Syntax error, unrecognized expression: " + e)
    }, t.uniqueSort = function(e) {
      var t, n = [], r = 0, i = 0;
      if (A = !w.detectDuplicates, j = !w.sortStable && e.slice(0), e.sort(U), A) {
        for (; t = e[i++];)t === e[i] && (r = n.push(i));
        for (; r--;)e.splice(n[r], 1)
      }
      return j = null, e
    }, C = t.getText = function(e) {
      var t, n = "", r = 0, i = e.nodeType;
      if (i) {
        if (1 === i || 9 === i || 11 === i) {
          if ("string" == typeof e.textContent)return e.textContent;
          for (e = e.firstChild; e; e = e.nextSibling)n += C(e)
        } else if (3 === i || 4 === i)return e.nodeValue
      } else for (; t = e[r++];)n += C(t);
      return n
    }, T = t.selectors = {
      cacheLength: 50,
      createPseudo: r,
      match: ht,
      attrHandle: {},
      find: {},
      relative: {
        ">": { dir: "parentNode", first: !0 },
        " ": { dir: "parentNode" },
        "+": { dir: "previousSibling", first: !0 },
        "~": { dir: "previousSibling" }
      },
      preFilter: {
        ATTR: function(e) {
          return e[1] = e[1].replace(wt, Tt), e[3] = (e[3] || e[4] || e[5] || "").replace(wt, Tt), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4)
        }, CHILD: function(e) {
          return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || t.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && t.error(e[0]), e
        }, PSEUDO: function(e) {
          var t, n = !e[6] && e[2];
          return ht.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && pt.test(n) && (t = k(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3))
        }
      },
      filter: {
        TAG: function(e) {
          var t = e.replace(wt, Tt).toLowerCase();
          return "*" === e ? function() {
            return !0
          } : function(e) {
            return e.nodeName && e.nodeName.toLowerCase() === t
          }
        }, CLASS: function(e) {
          var t = _[e + " "];
          return t || (t = new RegExp("(^|" + nt + ")" + e + "(" + nt + "|$)")) && _(e, function(e) {
              return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "")
            })
        }, ATTR: function(e, n, r) {
          return function(i) {
            var o = t.attr(i, e);
            return null == o ? "!=" === n : n ? (o += "", "=" === n ? o === r : "!=" === n ? o !== r : "^=" === n ? r && 0 === o.indexOf(r) : "*=" === n ? r && o.indexOf(r) > -1 : "$=" === n ? r && o.slice(-r.length) === r : "~=" === n ? (" " + o.replace(at, " ") + " ").indexOf(r) > -1 : "|=" === n ? o === r || o.slice(0, r.length + 1) === r + "-" : !1) : !0
          }
        }, CHILD: function(e, t, n, r, i) {
          var o = "nth" !== e.slice(0, 3), s = "last" !== e.slice(-4), a = "of-type" === t;
          return 1 === r && 0 === i ? function(e) {
            return !!e.parentNode
          } : function(t, n, u) {
            var l, c, f, p, d, h, g = o !== s ? "nextSibling" : "previousSibling", m = t.parentNode, v = a && t.nodeName.toLowerCase(), y = !u && !a;
            if (m) {
              if (o) {
                for (; g;) {
                  for (f = t; f = f[g];)if (a ? f.nodeName.toLowerCase() === v : 1 === f.nodeType)return !1;
                  h = g = "only" === e && !h && "nextSibling"
                }
                return !0
              }
              if (h = [s ? m.firstChild : m.lastChild], s && y) {
                for (c = m[W] || (m[W] = {}), l = c[e] || [], d = l[0] === I && l[1], p = l[0] === I && l[2], f = d && m.childNodes[d]; f = ++d && f && f[g] || (p = d = 0) || h.pop();)if (1 === f.nodeType && ++p && f === t) {
                  c[e] = [I, d, p];
                  break
                }
              } else if (y && (l = (t[W] || (t[W] = {}))[e]) && l[0] === I)p = l[1]; else for (; (f = ++d && f && f[g] || (p = d = 0) || h.pop()) && ((a ? f.nodeName.toLowerCase() !== v : 1 !== f.nodeType) || !++p || (y && ((f[W] || (f[W] = {}))[e] = [I, p]), f !== t)););
              return p -= i, p === r || p % r === 0 && p / r >= 0
            }
          }
        }, PSEUDO: function(e, n) {
          var i, o = T.pseudos[e] || T.setFilters[e.toLowerCase()] || t.error("unsupported pseudo: " + e);
          return o[W] ? o(n) : o.length > 1 ? (i = [e, e, "", n], T.setFilters.hasOwnProperty(e.toLowerCase()) ? r(function(e, t) {
            for (var r, i = o(e, n), s = i.length; s--;)r = et(e, i[s]), e[r] = !(t[r] = i[s])
          }) : function(e) {
            return o(e, 0, i)
          }) : o
        }
      },
      pseudos: {
        not: r(function(e) {
          var t = [], n = [], i = E(e.replace(ut, "$1"));
          return i[W] ? r(function(e, t, n, r) {
            for (var o, s = i(e, null, r, []), a = e.length; a--;)(o = s[a]) && (e[a] = !(t[a] = o))
          }) : function(e, r, o) {
            return t[0] = e, i(t, null, o, n), t[0] = null, !n.pop()
          }
        }), has: r(function(e) {
          return function(n) {
            return t(e, n).length > 0
          }
        }), contains: r(function(e) {
          return e = e.replace(wt, Tt), function(t) {
            return (t.textContent || t.innerText || C(t)).indexOf(e) > -1
          }
        }), lang: r(function(e) {
          return dt.test(e || "") || t.error("unsupported lang: " + e), e = e.replace(wt, Tt).toLowerCase(), function(t) {
            var n;
            do if (n = O ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang"))return n = n.toLowerCase(), n === e || 0 === n.indexOf(e + "-"); while ((t = t.parentNode) && 1 === t.nodeType);
            return !1
          }
        }), target: function(t) {
          var n = e.location && e.location.hash;
          return n && n.slice(1) === t.id
        }, root: function(e) {
          return e === H
        }, focus: function(e) {
          return e === q.activeElement && (!q.hasFocus || q.hasFocus()) && !!(e.type || e.href || ~e.tabIndex)
        }, enabled: function(e) {
          return e.disabled === !1
        }, disabled: function(e) {
          return e.disabled === !0
        }, checked: function(e) {
          var t = e.nodeName.toLowerCase();
          return "input" === t && !!e.checked || "option" === t && !!e.selected
        }, selected: function(e) {
          return e.parentNode && e.parentNode.selectedIndex, e.selected === !0
        }, empty: function(e) {
          for (e = e.firstChild; e; e = e.nextSibling)if (e.nodeType < 6)return !1;
          return !0
        }, parent: function(e) {
          return !T.pseudos.empty(e)
        }, header: function(e) {
          return mt.test(e.nodeName)
        }, input: function(e) {
          return gt.test(e.nodeName)
        }, button: function(e) {
          var t = e.nodeName.toLowerCase();
          return "input" === t && "button" === e.type || "button" === t
        }, text: function(e) {
          var t;
          return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase())
        }, first: l(function() {
          return [0]
        }), last: l(function(e, t) {
          return [t - 1]
        }), eq: l(function(e, t, n) {
          return [0 > n ? n + t : n]
        }), even: l(function(e, t) {
          for (var n = 0; t > n; n += 2)e.push(n);
          return e
        }), odd: l(function(e, t) {
          for (var n = 1; t > n; n += 2)e.push(n);
          return e
        }), lt: l(function(e, t, n) {
          for (var r = 0 > n ? n + t : n; --r >= 0;)e.push(r);
          return e
        }), gt: l(function(e, t, n) {
          for (var r = 0 > n ? n + t : n; ++r < t;)e.push(r);
          return e
        })
      }
    }, T.pseudos.nth = T.pseudos.eq;
    for (b in{ radio: !0, checkbox: !0, file: !0, password: !0, image: !0 })T.pseudos[b] = a(b);
    for (b in{ submit: !0, reset: !0 })T.pseudos[b] = u(b);
    return f.prototype = T.filters = T.pseudos, T.setFilters = new f, k = t.tokenize = function(e, n) {
      var r, i, o, s, a, u, l, c = z[e + " "];
      if (c)return n ? 0 : c.slice(0);
      for (a = e, u = [], l = T.preFilter; a;) {
        (!r || (i = lt.exec(a))) && (i && (a = a.slice(i[0].length) || a), u.push(o = [])), r = !1, (i = ct.exec(a)) && (r = i.shift(), o.push({
          value: r,
          type: i[0].replace(ut, " ")
        }), a = a.slice(r.length));
        for (s in T.filter)!(i = ht[s].exec(a)) || l[s] && !(i = l[s](i)) || (r = i.shift(), o.push({
          value: r,
          type: s,
          matches: i
        }), a = a.slice(r.length));
        if (!r)break
      }
      return n ? a.length : a ? t.error(e) : z(e, u).slice(0)
    }, E = t.compile = function(e, t) {
      var n, r = [], i = [], o = X[e + " "];
      if (!o) {
        for (t || (t = k(e)), n = t.length; n--;)o = y(t[n]), o[W] ? r.push(o) : i.push(o);
        o = X(e, x(i, r)), o.selector = e
      }
      return o
    }, S = t.select = function(e, t, n, r) {
      var i, o, s, a, u, l = "function" == typeof e && e, f = !r && k(e = l.selector || e);
      if (n = n || [], 1 === f.length) {
        if (o = f[0] = f[0].slice(0), o.length > 2 && "ID" === (s = o[0]).type && w.getById && 9 === t.nodeType && O && T.relative[o[1].type]) {
          if (t = (T.find.ID(s.matches[0].replace(wt, Tt), t) || [])[0], !t)return n;
          l && (t = t.parentNode), e = e.slice(o.shift().value.length)
        }
        for (i = ht.needsContext.test(e) ? 0 : o.length; i-- && (s = o[i], !T.relative[a = s.type]);)if ((u = T.find[a]) && (r = u(s.matches[0].replace(wt, Tt), xt.test(o[0].type) && c(t.parentNode) || t))) {
          if (o.splice(i, 1), e = r.length && p(o), !e)return K.apply(n, r), n;
          break
        }
      }
      return (l || E(e, f))(r, t, !O, n, xt.test(e) && c(t.parentNode) || t), n
    }, w.sortStable = W.split("").sort(U).join("") === W, w.detectDuplicates = !!A, L(), w.sortDetached = i(function(e) {
      return 1 & e.compareDocumentPosition(q.createElement("div"))
    }), i(function(e) {
      return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href")
    }) || o("type|href|height|width", function(e, t, n) {
      return n ? void 0 : e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2)
    }), w.attributes && i(function(e) {
      return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value")
    }) || o("value", function(e, t, n) {
      return n || "input" !== e.nodeName.toLowerCase() ? void 0 : e.defaultValue
    }), i(function(e) {
      return null == e.getAttribute("disabled")
    }) || o(tt, function(e, t, n) {
      var r;
      return n ? void 0 : e[t] === !0 ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null
    }), t
  }(e);
  Z.find = it, Z.expr = it.selectors, Z.expr[":"] = Z.expr.pseudos, Z.unique = it.uniqueSort, Z.text = it.getText, Z.isXMLDoc = it.isXML, Z.contains = it.contains;
  var ot = Z.expr.match.needsContext, st = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, at = /^.[^:#\[\.,]*$/;
  Z.filter = function(e, t, n) {
    var r = t[0];
    return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? Z.find.matchesSelector(r, e) ? [r] : [] : Z.find.matches(e, Z.grep(t, function(e) {
      return 1 === e.nodeType
    }))
  }, Z.fn.extend({
    find: function(e) {
      var t, n = this.length, r = [], i = this;
      if ("string" != typeof e)return this.pushStack(Z(e).filter(function() {
        for (t = 0; n > t; t++)if (Z.contains(i[t], this))return !0
      }));
      for (t = 0; n > t; t++)Z.find(e, i[t], r);
      return r = this.pushStack(n > 1 ? Z.unique(r) : r), r.selector = this.selector ? this.selector + " " + e : e, r
    }, filter: function(e) {
      return this.pushStack(r(this, e || [], !1))
    }, not: function(e) {
      return this.pushStack(r(this, e || [], !0))
    }, is: function(e) {
      return !!r(this, "string" == typeof e && ot.test(e) ? Z(e) : e || [], !1).length
    }
  });
  var ut, lt = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, ct = Z.fn.init = function(e, t) {
    var n, r;
    if (!e)return this;
    if ("string" == typeof e) {
      if (n = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : lt.exec(e), !n || !n[1] && t)return !t || t.jquery ? (t || ut).find(e) : this.constructor(t).find(e);
      if (n[1]) {
        if (t = t instanceof Z ? t[0] : t, Z.merge(this, Z.parseHTML(n[1], t && t.nodeType ? t.ownerDocument || t : J, !0)), st.test(n[1]) && Z.isPlainObject(t))for (n in t)Z.isFunction(this[n]) ? this[n](t[n]) : this.attr(n, t[n]);
        return this
      }
      return r = J.getElementById(n[2]), r && r.parentNode && (this.length = 1, this[0] = r), this.context = J, this.selector = e, this
    }
    return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : Z.isFunction(e) ? "undefined" != typeof ut.ready ? ut.ready(e) : e(Z) : (void 0 !== e.selector && (this.selector = e.selector, this.context = e.context), Z.makeArray(e, this))
  };
  ct.prototype = Z.fn, ut = Z(J);
  var ft = /^(?:parents|prev(?:Until|All))/, pt = { children: !0, contents: !0, next: !0, prev: !0 };
  Z.extend({
    dir: function(e, t, n) {
      for (var r = [], i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType;)if (1 === e.nodeType) {
        if (i && Z(e).is(n))break;
        r.push(e)
      }
      return r
    }, sibling: function(e, t) {
      for (var n = []; e; e = e.nextSibling)1 === e.nodeType && e !== t && n.push(e);
      return n
    }
  }), Z.fn.extend({
    has: function(e) {
      var t = Z(e, this), n = t.length;
      return this.filter(function() {
        for (var e = 0; n > e; e++)if (Z.contains(this, t[e]))return !0
      })
    }, closest: function(e, t) {
      for (var n, r = 0, i = this.length, o = [], s = ot.test(e) || "string" != typeof e ? Z(e, t || this.context) : 0; i > r; r++)for (n = this[r]; n && n !== t; n = n.parentNode)if (n.nodeType < 11 && (s ? s.index(n) > -1 : 1 === n.nodeType && Z.find.matchesSelector(n, e))) {
        o.push(n);
        break
      }
      return this.pushStack(o.length > 1 ? Z.unique(o) : o)
    }, index: function(e) {
      return e ? "string" == typeof e ? U.call(Z(e), this[0]) : U.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
    }, add: function(e, t) {
      return this.pushStack(Z.unique(Z.merge(this.get(), Z(e, t))))
    }, addBack: function(e) {
      return this.add(null == e ? this.prevObject : this.prevObject.filter(e))
    }
  }), Z.each({
    parent: function(e) {
      var t = e.parentNode;
      return t && 11 !== t.nodeType ? t : null
    }, parents: function(e) {
      return Z.dir(e, "parentNode")
    }, parentsUntil: function(e, t, n) {
      return Z.dir(e, "parentNode", n)
    }, next: function(e) {
      return i(e, "nextSibling")
    }, prev: function(e) {
      return i(e, "previousSibling")
    }, nextAll: function(e) {
      return Z.dir(e, "nextSibling")
    }, prevAll: function(e) {
      return Z.dir(e, "previousSibling")
    }, nextUntil: function(e, t, n) {
      return Z.dir(e, "nextSibling", n)
    }, prevUntil: function(e, t, n) {
      return Z.dir(e, "previousSibling", n)
    }, siblings: function(e) {
      return Z.sibling((e.parentNode || {}).firstChild, e)
    }, children: function(e) {
      return Z.sibling(e.firstChild)
    }, contents: function(e) {
      return e.contentDocument || Z.merge([], e.childNodes)
    }
  }, function(e, t) {
    Z.fn[e] = function(n, r) {
      var i = Z.map(this, t, n);
      return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = Z.filter(r, i)), this.length > 1 && (pt[e] || Z.unique(i), ft.test(e) && i.reverse()), this.pushStack(i)
    }
  });
  var dt = /\S+/g, ht = {};
  Z.Callbacks = function(e) {
    e = "string" == typeof e ? ht[e] || o(e) : Z.extend({}, e);
    var t, n, r, i, s, a, u = [], l = !e.once && [], c = function(o) {
      for (t = e.memory && o, n = !0, a = i || 0, i = 0, s = u.length, r = !0; u && s > a; a++)if (u[a].apply(o[0], o[1]) === !1 && e.stopOnFalse) {
        t = !1;
        break
      }
      r = !1, u && (l ? l.length && c(l.shift()) : t ? u = [] : f.disable())
    }, f = {
      add: function() {
        if (u) {
          var n = u.length;
          !function o(t) {
            Z.each(t, function(t, n) {
              var r = Z.type(n);
              "function" === r ? e.unique && f.has(n) || u.push(n) : n && n.length && "string" !== r && o(n)
            })
          }(arguments), r ? s = u.length : t && (i = n, c(t))
        }
        return this
      }, remove: function() {
        return u && Z.each(arguments, function(e, t) {
          for (var n; (n = Z.inArray(t, u, n)) > -1;)u.splice(n, 1), r && (s >= n && s--, a >= n && a--)
        }), this
      }, has: function(e) {
        return e ? Z.inArray(e, u) > -1 : !(!u || !u.length)
      }, empty: function() {
        return u = [], s = 0, this
      }, disable: function() {
        return u = l = t = void 0, this
      }, disabled: function() {
        return !u
      }, lock: function() {
        return l = void 0, t || f.disable(), this
      }, locked: function() {
        return !l
      }, fireWith: function(e, t) {
        return !u || n && !l || (t = t || [], t = [e, t.slice ? t.slice() : t], r ? l.push(t) : c(t)), this
      }, fire: function() {
        return f.fireWith(this, arguments), this
      }, fired: function() {
        return !!n
      }
    };
    return f
  }, Z.extend({
    Deferred: function(e) {
      var t = [["resolve", "done", Z.Callbacks("once memory"), "resolved"], ["reject", "fail", Z.Callbacks("once memory"), "rejected"], ["notify", "progress", Z.Callbacks("memory")]], n = "pending", r = {
        state: function() {
          return n
        }, always: function() {
          return i.done(arguments).fail(arguments), this
        }, then: function() {
          var e = arguments;
          return Z.Deferred(function(n) {
            Z.each(t, function(t, o) {
              var s = Z.isFunction(e[t]) && e[t];
              i[o[1]](function() {
                var e = s && s.apply(this, arguments);
                e && Z.isFunction(e.promise) ? e.promise().done(n.resolve).fail(n.reject).progress(n.notify) : n[o[0] + "With"](this === r ? n.promise() : this, s ? [e] : arguments)
              })
            }), e = null
          }).promise()
        }, promise: function(e) {
          return null != e ? Z.extend(e, r) : r
        }
      }, i = {};
      return r.pipe = r.then, Z.each(t, function(e, o) {
        var s = o[2], a = o[3];
        r[o[1]] = s.add, a && s.add(function() {
          n = a
        }, t[1 ^ e][2].disable, t[2][2].lock), i[o[0]] = function() {
          return i[o[0] + "With"](this === i ? r : this, arguments), this
        }, i[o[0] + "With"] = s.fireWith
      }), r.promise(i), e && e.call(i, i), i
    }, when: function(e) {
      var t, n, r, i = 0, o = _.call(arguments), s = o.length, a = 1 !== s || e && Z.isFunction(e.promise) ? s : 0, u = 1 === a ? e : Z.Deferred(), l = function(e, n, r) {
        return function(i) {
          n[e] = this, r[e] = arguments.length > 1 ? _.call(arguments) : i, r === t ? u.notifyWith(n, r) : --a || u.resolveWith(n, r)
        }
      };
      if (s > 1)for (t = new Array(s), n = new Array(s), r = new Array(s); s > i; i++)o[i] && Z.isFunction(o[i].promise) ? o[i].promise().done(l(i, r, o)).fail(u.reject).progress(l(i, n, t)) : --a;
      return a || u.resolveWith(r, o), u.promise()
    }
  });
  var gt;
  Z.fn.ready = function(e) {
    return Z.ready.promise().done(e), this
  }, Z.extend({
    isReady: !1, readyWait: 1, holdReady: function(e) {
      e ? Z.readyWait++ : Z.ready(!0)
    }, ready: function(e) {
      (e === !0 ? --Z.readyWait : Z.isReady) || (Z.isReady = !0, e !== !0 && --Z.readyWait > 0 || (gt.resolveWith(J, [Z]), Z.fn.triggerHandler && (Z(J).triggerHandler("ready"), Z(J).off("ready"))))
    }
  }), Z.ready.promise = function(t) {
    return gt || (gt = Z.Deferred(), "complete" === J.readyState ? setTimeout(Z.ready) : (J.addEventListener("DOMContentLoaded", s, !1), e.addEventListener("load", s, !1))), gt.promise(t)
  }, Z.ready.promise();
  var mt = Z.access = function(e, t, n, r, i, o, s) {
    var a = 0, u = e.length, l = null == n;
    if ("object" === Z.type(n)) {
      i = !0;
      for (a in n)Z.access(e, t, a, n[a], !0, o, s)
    } else if (void 0 !== r && (i = !0, Z.isFunction(r) || (s = !0), l && (s ? (t.call(e, r), t = null) : (l = t, t = function(e, t, n) {
        return l.call(Z(e), n)
      })), t))for (; u > a; a++)t(e[a], n, s ? r : r.call(e[a], a, t(e[a], n)));
    return i ? e : l ? t.call(e) : u ? t(e[0], n) : o
  };
  Z.acceptData = function(e) {
    return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType
  }, a.uid = 1, a.accepts = Z.acceptData, a.prototype = {
    key: function(e) {
      if (!a.accepts(e))return 0;
      var t = {}, n = e[this.expando];
      if (!n) {
        n = a.uid++;
        try {
          t[this.expando] = { value: n }, Object.defineProperties(e, t)
        } catch (r) {
          t[this.expando] = n, Z.extend(e, t)
        }
      }
      return this.cache[n] || (this.cache[n] = {}), n
    }, set: function(e, t, n) {
      var r, i = this.key(e), o = this.cache[i];
      if ("string" == typeof t)o[t] = n; else if (Z.isEmptyObject(o))Z.extend(this.cache[i], t); else for (r in t)o[r] = t[r];
      return o
    }, get: function(e, t) {
      var n = this.cache[this.key(e)];
      return void 0 === t ? n : n[t]
    }, access: function(e, t, n) {
      var r;
      return void 0 === t || t && "string" == typeof t && void 0 === n ? (r = this.get(e, t), void 0 !== r ? r : this.get(e, Z.camelCase(t))) : (this.set(e, t, n), void 0 !== n ? n : t)
    }, remove: function(e, t) {
      var n, r, i, o = this.key(e), s = this.cache[o];
      if (void 0 === t)this.cache[o] = {}; else {
        Z.isArray(t) ? r = t.concat(t.map(Z.camelCase)) : (i = Z.camelCase(t), t in s ? r = [t, i] : (r = i, r = r in s ? [r] : r.match(dt) || [])), n = r.length;
        for (; n--;)delete s[r[n]]
      }
    }, hasData: function(e) {
      return !Z.isEmptyObject(this.cache[e[this.expando]] || {})
    }, discard: function(e) {
      e[this.expando] && delete this.cache[e[this.expando]]
    }
  };
  var vt = new a, yt = new a, xt = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, bt = /([A-Z])/g;
  Z.extend({
    hasData: function(e) {
      return yt.hasData(e) || vt.hasData(e)
    }, data: function(e, t, n) {
      return yt.access(e, t, n)
    }, removeData: function(e, t) {
      yt.remove(e, t)
    }, _data: function(e, t, n) {
      return vt.access(e, t, n)
    }, _removeData: function(e, t) {
      vt.remove(e, t)
    }
  }), Z.fn.extend({
    data: function(e, t) {
      var n, r, i, o = this[0], s = o && o.attributes;
      if (void 0 === e) {
        if (this.length && (i = yt.get(o), 1 === o.nodeType && !vt.get(o, "hasDataAttrs"))) {
          for (n = s.length; n--;)s[n] && (r = s[n].name, 0 === r.indexOf("data-") && (r = Z.camelCase(r.slice(5)), u(o, r, i[r])));
          vt.set(o, "hasDataAttrs", !0)
        }
        return i
      }
      return "object" == typeof e ? this.each(function() {
        yt.set(this, e)
      }) : mt(this, function(t) {
        var n, r = Z.camelCase(e);
        if (o && void 0 === t) {
          if (n = yt.get(o, e), void 0 !== n)return n;
          if (n = yt.get(o, r), void 0 !== n)return n;
          if (n = u(o, r, void 0), void 0 !== n)return n
        } else this.each(function() {
          var n = yt.get(this, r);
          yt.set(this, r, t), -1 !== e.indexOf("-") && void 0 !== n && yt.set(this, e, t)
        })
      }, null, t, arguments.length > 1, null, !0)
    }, removeData: function(e) {
      return this.each(function() {
        yt.remove(this, e)
      })
    }
  }), Z.extend({
    queue: function(e, t, n) {
      var r;
      return e ? (t = (t || "fx") + "queue", r = vt.get(e, t), n && (!r || Z.isArray(n) ? r = vt.access(e, t, Z.makeArray(n)) : r.push(n)), r || []) : void 0
    }, dequeue: function(e, t) {
      t = t || "fx";
      var n = Z.queue(e, t), r = n.length, i = n.shift(), o = Z._queueHooks(e, t), s = function() {
        Z.dequeue(e, t)
      };
      "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, s, o)), !r && o && o.empty.fire()
    }, _queueHooks: function(e, t) {
      var n = t + "queueHooks";
      return vt.get(e, n) || vt.access(e, n, {
          empty: Z.Callbacks("once memory").add(function() {
            vt.remove(e, [t + "queue", n])
          })
        })
    }
  }), Z.fn.extend({
    queue: function(e, t) {
      var n = 2;
      return "string" != typeof e && (t = e, e = "fx", n--), arguments.length < n ? Z.queue(this[0], e) : void 0 === t ? this : this.each(function() {
        var n = Z.queue(this, e, t);
        Z._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && Z.dequeue(this, e)
      })
    }, dequeue: function(e) {
      return this.each(function() {
        Z.dequeue(this, e)
      })
    }, clearQueue: function(e) {
      return this.queue(e || "fx", [])
    }, promise: function(e, t) {
      var n, r = 1, i = Z.Deferred(), o = this, s = this.length, a = function() {
        --r || i.resolveWith(o, [o])
      };
      for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; s--;)n = vt.get(o[s], e + "queueHooks"), n && n.empty && (r++, n.empty.add(a));
      return a(), i.promise(t)
    }
  });
  var wt = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, Tt = ["Top", "Right", "Bottom", "Left"], Ct = function(e, t) {
    return e = t || e, "none" === Z.css(e, "display") || !Z.contains(e.ownerDocument, e)
  }, Nt = /^(?:checkbox|radio)$/i;
  !function() {
    var e = J.createDocumentFragment(), t = e.appendChild(J.createElement("div")), n = J.createElement("input");
    n.setAttribute("type", "radio"), n.setAttribute("checked", "checked"), n.setAttribute("name", "t"), t.appendChild(n), Q.checkClone = t.cloneNode(!0).cloneNode(!0).lastChild.checked, t.innerHTML = "<textarea>x</textarea>", Q.noCloneChecked = !!t.cloneNode(!0).lastChild.defaultValue
  }();
  var kt = "undefined";
  Q.focusinBubbles = "onfocusin" in e;
  var Et = /^key/, St = /^(?:mouse|pointer|contextmenu)|click/, Dt = /^(?:focusinfocus|focusoutblur)$/, jt = /^([^.]*)(?:\.(.+)|)$/;
  Z.event = {
    global: {},
    add: function(e, t, n, r, i) {
      var o, s, a, u, l, c, f, p, d, h, g, m = vt.get(e);
      if (m)for (n.handler && (o = n, n = o.handler, i = o.selector), n.guid || (n.guid = Z.guid++), (u = m.events) || (u = m.events = {}), (s = m.handle) || (s = m.handle = function(t) {
        return typeof Z !== kt && Z.event.triggered !== t.type ? Z.event.dispatch.apply(e, arguments) : void 0
      }), t = (t || "").match(dt) || [""], l = t.length; l--;)a = jt.exec(t[l]) || [], d = g = a[1], h = (a[2] || "").split(".").sort(), d && (f = Z.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = Z.event.special[d] || {}, c = Z.extend({
        type: d,
        origType: g,
        data: r,
        handler: n,
        guid: n.guid,
        selector: i,
        needsContext: i && Z.expr.match.needsContext.test(i),
        namespace: h.join(".")
      }, o), (p = u[d]) || (p = u[d] = [], p.delegateCount = 0, f.setup && f.setup.call(e, r, h, s) !== !1 || e.addEventListener && e.addEventListener(d, s, !1)), f.add && (f.add.call(e, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), Z.event.global[d] = !0)
    },
    remove: function(e, t, n, r, i) {
      var o, s, a, u, l, c, f, p, d, h, g, m = vt.hasData(e) && vt.get(e);
      if (m && (u = m.events)) {
        for (t = (t || "").match(dt) || [""], l = t.length; l--;)if (a = jt.exec(t[l]) || [], d = g = a[1], h = (a[2] || "").split(".").sort(), d) {
          for (f = Z.event.special[d] || {}, d = (r ? f.delegateType : f.bindType) || d, p = u[d] || [], a = a[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), s = o = p.length; o--;)c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || a && !a.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
          s && !p.length && (f.teardown && f.teardown.call(e, h, m.handle) !== !1 || Z.removeEvent(e, d, m.handle), delete u[d])
        } else for (d in u)Z.event.remove(e, d + t[l], n, r, !0);
        Z.isEmptyObject(u) && (delete m.handle, vt.remove(e, "events"))
      }
    },
    trigger: function(t, n, r, i) {
      var o, s, a, u, l, c, f, p = [r || J], d = G.call(t, "type") ? t.type : t, h = G.call(t, "namespace") ? t.namespace.split(".") : [];
      if (s = a = r = r || J, 3 !== r.nodeType && 8 !== r.nodeType && !Dt.test(d + Z.event.triggered) && (d.indexOf(".") >= 0 && (h = d.split("."), d = h.shift(), h.sort()), l = d.indexOf(":") < 0 && "on" + d, t = t[Z.expando] ? t : new Z.Event(d, "object" == typeof t && t), t.isTrigger = i ? 2 : 3, t.namespace = h.join("."), t.namespace_re = t.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = r), n = null == n ? [t] : Z.makeArray(n, [t]), f = Z.event.special[d] || {}, i || !f.trigger || f.trigger.apply(r, n) !== !1)) {
        if (!i && !f.noBubble && !Z.isWindow(r)) {
          for (u = f.delegateType || d, Dt.test(u + d) || (s = s.parentNode); s; s = s.parentNode)p.push(s), a = s;
          a === (r.ownerDocument || J) && p.push(a.defaultView || a.parentWindow || e)
        }
        for (o = 0; (s = p[o++]) && !t.isPropagationStopped();)t.type = o > 1 ? u : f.bindType || d, c = (vt.get(s, "events") || {})[t.type] && vt.get(s, "handle"), c && c.apply(s, n), c = l && s[l], c && c.apply && Z.acceptData(s) && (t.result = c.apply(s, n), t.result === !1 && t.preventDefault());
        return t.type = d, i || t.isDefaultPrevented() || f._default && f._default.apply(p.pop(), n) !== !1 || !Z.acceptData(r) || l && Z.isFunction(r[d]) && !Z.isWindow(r) && (a = r[l], a && (r[l] = null), Z.event.triggered = d, r[d](), Z.event.triggered = void 0, a && (r[l] = a)), t.result
      }
    },
    dispatch: function(e) {
      e = Z.event.fix(e);
      var t, n, r, i, o, s = [], a = _.call(arguments), u = (vt.get(this, "events") || {})[e.type] || [], l = Z.event.special[e.type] || {};
      if (a[0] = e, e.delegateTarget = this, !l.preDispatch || l.preDispatch.call(this, e) !== !1) {
        for (s = Z.event.handlers.call(this, e, u), t = 0; (i = s[t++]) && !e.isPropagationStopped();)for (e.currentTarget = i.elem, n = 0; (o = i.handlers[n++]) && !e.isImmediatePropagationStopped();)(!e.namespace_re || e.namespace_re.test(o.namespace)) && (e.handleObj = o, e.data = o.data, r = ((Z.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, a), void 0 !== r && (e.result = r) === !1 && (e.preventDefault(), e.stopPropagation()));
        return l.postDispatch && l.postDispatch.call(this, e), e.result
      }
    },
    handlers: function(e, t) {
      var n, r, i, o, s = [], a = t.delegateCount, u = e.target;
      if (a && u.nodeType && (!e.button || "click" !== e.type))for (; u !== this; u = u.parentNode || this)if (u.disabled !== !0 || "click" !== e.type) {
        for (r = [], n = 0; a > n; n++)o = t[n], i = o.selector + " ", void 0 === r[i] && (r[i] = o.needsContext ? Z(i, this).index(u) >= 0 : Z.find(i, this, null, [u]).length), r[i] && r.push(o);
        r.length && s.push({ elem: u, handlers: r })
      }
      return a < t.length && s.push({ elem: this, handlers: t.slice(a) }), s
    },
    props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
    fixHooks: {},
    keyHooks: {
      props: "char charCode key keyCode".split(" "), filter: function(e, t) {
        return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), e
      }
    },
    mouseHooks: {
      props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
      filter: function(e, t) {
        var n, r, i, o = t.button;
        return null == e.pageX && null != t.clientX && (n = e.target.ownerDocument || J, r = n.documentElement, i = n.body, e.pageX = t.clientX + (r && r.scrollLeft || i && i.scrollLeft || 0) - (r && r.clientLeft || i && i.clientLeft || 0), e.pageY = t.clientY + (r && r.scrollTop || i && i.scrollTop || 0) - (r && r.clientTop || i && i.clientTop || 0)), e.which || void 0 === o || (e.which = 1 & o ? 1 : 2 & o ? 3 : 4 & o ? 2 : 0), e
      }
    },
    fix: function(e) {
      if (e[Z.expando])return e;
      var t, n, r, i = e.type, o = e, s = this.fixHooks[i];
      for (s || (this.fixHooks[i] = s = St.test(i) ? this.mouseHooks : Et.test(i) ? this.keyHooks : {}), r = s.props ? this.props.concat(s.props) : this.props, e = new Z.Event(o), t = r.length; t--;)n = r[t], e[n] = o[n];
      return e.target || (e.target = J), 3 === e.target.nodeType && (e.target = e.target.parentNode), s.filter ? s.filter(e, o) : e
    },
    special: {
      load: { noBubble: !0 }, focus: {
        trigger: function() {
          return this !== f() && this.focus ? (this.focus(), !1) : void 0
        }, delegateType: "focusin"
      }, blur: {
        trigger: function() {
          return this === f() && this.blur ? (this.blur(), !1) : void 0
        }, delegateType: "focusout"
      }, click: {
        trigger: function() {
          return "checkbox" === this.type && this.click && Z.nodeName(this, "input") ? (this.click(), !1) : void 0
        }, _default: function(e) {
          return Z.nodeName(e.target, "a")
        }
      }, beforeunload: {
        postDispatch: function(e) {
          void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result)
        }
      }
    },
    simulate: function(e, t, n, r) {
      var i = Z.extend(new Z.Event, n, { type: e, isSimulated: !0, originalEvent: {} });
      r ? Z.event.trigger(i, null, t) : Z.event.dispatch.call(t, i), i.isDefaultPrevented() && n.preventDefault()
    }
  }, Z.removeEvent = function(e, t, n) {
    e.removeEventListener && e.removeEventListener(t, n, !1)
  }, Z.Event = function(e, t) {
    return this instanceof Z.Event ? (e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && e.returnValue === !1 ? l : c) : this.type = e, t && Z.extend(this, t), this.timeStamp = e && e.timeStamp || Z.now(), void(this[Z.expando] = !0)) : new Z.Event(e, t)
  }, Z.Event.prototype = {
    isDefaultPrevented: c,
    isPropagationStopped: c,
    isImmediatePropagationStopped: c,
    preventDefault: function() {
      var e = this.originalEvent;
      this.isDefaultPrevented = l, e && e.preventDefault && e.preventDefault()
    },
    stopPropagation: function() {
      var e = this.originalEvent;
      this.isPropagationStopped = l, e && e.stopPropagation && e.stopPropagation()
    },
    stopImmediatePropagation: function() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = l, e && e.stopImmediatePropagation && e.stopImmediatePropagation(), this.stopPropagation()
    }
  }, Z.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function(e, t) {
    Z.event.special[e] = {
      delegateType: t, bindType: t, handle: function(e) {
        var n, r = this, i = e.relatedTarget, o = e.handleObj;
        return (!i || i !== r && !Z.contains(r, i)) && (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n
      }
    }
  }), Q.focusinBubbles || Z.each({ focus: "focusin", blur: "focusout" }, function(e, t) {
    var n = function(e) {
      Z.event.simulate(t, e.target, Z.event.fix(e), !0)
    };
    Z.event.special[t] = {
      setup: function() {
        var r = this.ownerDocument || this, i = vt.access(r, t);
        i || r.addEventListener(e, n, !0), vt.access(r, t, (i || 0) + 1)
      }, teardown: function() {
        var r = this.ownerDocument || this, i = vt.access(r, t) - 1;
        i ? vt.access(r, t, i) : (r.removeEventListener(e, n, !0), vt.remove(r, t))
      }
    }
  }), Z.fn.extend({
    on: function(e, t, n, r, i) {
      var o, s;
      if ("object" == typeof e) {
        "string" != typeof t && (n = n || t, t = void 0);
        for (s in e)this.on(s, t, n, e[s], i);
        return this
      }
      if (null == n && null == r ? (r = t, n = t = void 0) : null == r && ("string" == typeof t ? (r = n, n = void 0) : (r = n, n = t, t = void 0)), r === !1)r = c; else if (!r)return this;
      return 1 === i && (o = r, r = function(e) {
        return Z().off(e), o.apply(this, arguments)
      }, r.guid = o.guid || (o.guid = Z.guid++)), this.each(function() {
        Z.event.add(this, e, r, n, t)
      })
    }, one: function(e, t, n, r) {
      return this.on(e, t, n, r, 1)
    }, off: function(e, t, n) {
      var r, i;
      if (e && e.preventDefault && e.handleObj)return r = e.handleObj, Z(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this;
      if ("object" == typeof e) {
        for (i in e)this.off(i, t, e[i]);
        return this
      }
      return (t === !1 || "function" == typeof t) && (n = t, t = void 0), n === !1 && (n = c), this.each(function() {
        Z.event.remove(this, e, n, t)
      })
    }, trigger: function(e, t) {
      return this.each(function() {
        Z.event.trigger(e, t, this)
      })
    }, triggerHandler: function(e, t) {
      var n = this[0];
      return n ? Z.event.trigger(e, t, n, !0) : void 0
    }
  });
  var At = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, Lt = /<([\w:]+)/, qt = /<|&#?\w+;/, Ht = /<(?:script|style|link)/i, Ot = /checked\s*(?:[^=]|=\s*.checked.)/i, Ft = /^$|\/(?:java|ecma)script/i, Pt = /^true\/(.*)/, Rt = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, Mt = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  Mt.optgroup = Mt.option, Mt.tbody = Mt.tfoot = Mt.colgroup = Mt.caption = Mt.thead, Mt.th = Mt.td, Z.extend({
    clone: function(e, t, n) {
      var r, i, o, s, a = e.cloneNode(!0), u = Z.contains(e.ownerDocument, e);
      if (!(Q.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || Z.isXMLDoc(e)))for (s = v(a), o = v(e), r = 0, i = o.length; i > r; r++)y(o[r], s[r]);
      if (t)if (n)for (o = o || v(e), s = s || v(a), r = 0, i = o.length; i > r; r++)m(o[r], s[r]); else m(e, a);
      return s = v(a, "script"), s.length > 0 && g(s, !u && v(e, "script")), a
    }, buildFragment: function(e, t, n, r) {
      for (var i, o, s, a, u, l, c = t.createDocumentFragment(), f = [], p = 0, d = e.length; d > p; p++)if (i = e[p], i || 0 === i)if ("object" === Z.type(i))Z.merge(f, i.nodeType ? [i] : i); else if (qt.test(i)) {
        for (o = o || c.appendChild(t.createElement("div")), s = (Lt.exec(i) || ["", ""])[1].toLowerCase(), a = Mt[s] || Mt._default, o.innerHTML = a[1] + i.replace(At, "<$1></$2>") + a[2], l = a[0]; l--;)o = o.lastChild;
        Z.merge(f, o.childNodes), o = c.firstChild, o.textContent = ""
      } else f.push(t.createTextNode(i));
      for (c.textContent = "", p = 0; i = f[p++];)if ((!r || -1 === Z.inArray(i, r)) && (u = Z.contains(i.ownerDocument, i), o = v(c.appendChild(i), "script"), u && g(o), n))for (l = 0; i = o[l++];)Ft.test(i.type || "") && n.push(i);
      return c
    }, cleanData: function(e) {
      for (var t, n, r, i, o = Z.event.special, s = 0; void 0 !== (n = e[s]); s++) {
        if (Z.acceptData(n) && (i = n[vt.expando], i && (t = vt.cache[i]))) {
          if (t.events)for (r in t.events)o[r] ? Z.event.remove(n, r) : Z.removeEvent(n, r, t.handle);
          vt.cache[i] && delete vt.cache[i]
        }
        delete yt.cache[n[yt.expando]]
      }
    }
  }), Z.fn.extend({
    text: function(e) {
      return mt(this, function(e) {
        return void 0 === e ? Z.text(this) : this.empty().each(function() {
          (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) && (this.textContent = e)
        })
      }, null, e, arguments.length)
    }, append: function() {
      return this.domManip(arguments, function(e) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var t = p(this, e);
          t.appendChild(e)
        }
      })
    }, prepend: function() {
      return this.domManip(arguments, function(e) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var t = p(this, e);
          t.insertBefore(e, t.firstChild)
        }
      })
    }, before: function() {
      return this.domManip(arguments, function(e) {
        this.parentNode && this.parentNode.insertBefore(e, this)
      })
    }, after: function() {
      return this.domManip(arguments, function(e) {
        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling)
      })
    }, remove: function(e, t) {
      for (var n, r = e ? Z.filter(e, this) : this, i = 0; null != (n = r[i]); i++)t || 1 !== n.nodeType || Z.cleanData(v(n)), n.parentNode && (t && Z.contains(n.ownerDocument, n) && g(v(n, "script")), n.parentNode.removeChild(n));
      return this
    }, empty: function() {
      for (var e, t = 0; null != (e = this[t]); t++)1 === e.nodeType && (Z.cleanData(v(e, !1)), e.textContent = "");
      return this
    }, clone: function(e, t) {
      return e = null == e ? !1 : e, t = null == t ? e : t, this.map(function() {
        return Z.clone(this, e, t)
      })
    }, html: function(e) {
      return mt(this, function(e) {
        var t = this[0] || {}, n = 0, r = this.length;
        if (void 0 === e && 1 === t.nodeType)return t.innerHTML;
        if ("string" == typeof e && !Ht.test(e) && !Mt[(Lt.exec(e) || ["", ""])[1].toLowerCase()]) {
          e = e.replace(At, "<$1></$2>");
          try {
            for (; r > n; n++)t = this[n] || {}, 1 === t.nodeType && (Z.cleanData(v(t, !1)), t.innerHTML = e);
            t = 0
          } catch (i) {
          }
        }
        t && this.empty().append(e)
      }, null, e, arguments.length)
    }, replaceWith: function() {
      var e = arguments[0];
      return this.domManip(arguments, function(t) {
        e = this.parentNode, Z.cleanData(v(this)), e && e.replaceChild(t, this)
      }), e && (e.length || e.nodeType) ? this : this.remove()
    }, detach: function(e) {
      return this.remove(e, !0)
    }, domManip: function(e, t) {
      e = z.apply([], e);
      var n, r, i, o, s, a, u = 0, l = this.length, c = this, f = l - 1, p = e[0], g = Z.isFunction(p);
      if (g || l > 1 && "string" == typeof p && !Q.checkClone && Ot.test(p))return this.each(function(n) {
        var r = c.eq(n);
        g && (e[0] = p.call(this, n, r.html())), r.domManip(e, t)
      });
      if (l && (n = Z.buildFragment(e, this[0].ownerDocument, !1, this), r = n.firstChild, 1 === n.childNodes.length && (n = r), r)) {
        for (i = Z.map(v(n, "script"), d), o = i.length; l > u; u++)s = n, u !== f && (s = Z.clone(s, !0, !0), o && Z.merge(i, v(s, "script"))), t.call(this[u], s, u);
        if (o)for (a = i[i.length - 1].ownerDocument, Z.map(i, h), u = 0; o > u; u++)s = i[u], Ft.test(s.type || "") && !vt.access(s, "globalEval") && Z.contains(a, s) && (s.src ? Z._evalUrl && Z._evalUrl(s.src) : Z.globalEval(s.textContent.replace(Rt, "")))
      }
      return this
    }
  }), Z.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function(e, t) {
    Z.fn[e] = function(e) {
      for (var n, r = [], i = Z(e), o = i.length - 1, s = 0; o >= s; s++)n = s === o ? this : this.clone(!0), Z(i[s])[t](n), X.apply(r, n.get());
      return this.pushStack(r)
    }
  });
  var Wt, $t = {}, It = /^margin/, Bt = new RegExp("^(" + wt + ")(?!px)[a-z%]+$", "i"), _t = function(t) {
    return t.ownerDocument.defaultView.opener ? t.ownerDocument.defaultView.getComputedStyle(t, null) : e.getComputedStyle(t, null)
  };
  !function() {
    function t() {
      s.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", s.innerHTML = "", i.appendChild(o);
      var t = e.getComputedStyle(s, null);
      n = "1%" !== t.top, r = "4px" === t.width, i.removeChild(o)
    }

    var n, r, i = J.documentElement, o = J.createElement("div"), s = J.createElement("div");
    s.style && (s.style.backgroundClip = "content-box", s.cloneNode(!0).style.backgroundClip = "", Q.clearCloneStyle = "content-box" === s.style.backgroundClip, o.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute", o.appendChild(s), e.getComputedStyle && Z.extend(Q, {
      pixelPosition: function() {
        return t(), n
      }, boxSizingReliable: function() {
        return null == r && t(), r
      }, reliableMarginRight: function() {
        var t, n = s.appendChild(J.createElement("div"));
        return n.style.cssText = s.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", n.style.marginRight = n.style.width = "0", s.style.width = "1px", i.appendChild(o), t = !parseFloat(e.getComputedStyle(n, null).marginRight), i.removeChild(o), s.removeChild(n), t
      }
    }))
  }(), Z.swap = function(e, t, n, r) {
    var i, o, s = {};
    for (o in t)s[o] = e.style[o], e.style[o] = t[o];
    i = n.apply(e, r || []);
    for (o in t)e.style[o] = s[o];
    return i
  };
  var zt = /^(none|table(?!-c[ea]).+)/, Xt = new RegExp("^(" + wt + ")(.*)$", "i"), Ut = new RegExp("^([+-])=(" + wt + ")", "i"), Vt = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  }, Yt = { letterSpacing: "0", fontWeight: "400" }, Gt = ["Webkit", "O", "Moz", "ms"];
  Z.extend({
    cssHooks: {
      opacity: {
        get: function(e, t) {
          if (t) {
            var n = w(e, "opacity");
            return "" === n ? "1" : n
          }
        }
      }
    },
    cssNumber: {
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0
    },
    cssProps: { "float": "cssFloat" },
    style: function(e, t, n, r) {
      if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
        var i, o, s, a = Z.camelCase(t), u = e.style;
        return t = Z.cssProps[a] || (Z.cssProps[a] = C(u, a)), s = Z.cssHooks[t] || Z.cssHooks[a], void 0 === n ? s && "get" in s && void 0 !== (i = s.get(e, !1, r)) ? i : u[t] : (o = typeof n, "string" === o && (i = Ut.exec(n)) && (n = (i[1] + 1) * i[2] + parseFloat(Z.css(e, t)), o = "number"), null != n && n === n && ("number" !== o || Z.cssNumber[a] || (n += "px"), Q.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (u[t] = "inherit"), s && "set" in s && void 0 === (n = s.set(e, n, r)) || (u[t] = n)), void 0)
      }
    },
    css: function(e, t, n, r) {
      var i, o, s, a = Z.camelCase(t);
      return t = Z.cssProps[a] || (Z.cssProps[a] = C(e.style, a)), s = Z.cssHooks[t] || Z.cssHooks[a], s && "get" in s && (i = s.get(e, !0, n)), void 0 === i && (i = w(e, t, r)), "normal" === i && t in Yt && (i = Yt[t]), "" === n || n ? (o = parseFloat(i), n === !0 || Z.isNumeric(o) ? o || 0 : i) : i
    }
  }), Z.each(["height", "width"], function(e, t) {
    Z.cssHooks[t] = {
      get: function(e, n, r) {
        return n ? zt.test(Z.css(e, "display")) && 0 === e.offsetWidth ? Z.swap(e, Vt, function() {
          return E(e, t, r)
        }) : E(e, t, r) : void 0
      }, set: function(e, n, r) {
        var i = r && _t(e);
        return N(e, n, r ? k(e, t, r, "border-box" === Z.css(e, "boxSizing", !1, i), i) : 0)
      }
    }
  }), Z.cssHooks.marginRight = T(Q.reliableMarginRight, function(e, t) {
    return t ? Z.swap(e, { display: "inline-block" }, w, [e, "marginRight"]) : void 0
  }), Z.each({ margin: "", padding: "", border: "Width" }, function(e, t) {
    Z.cssHooks[e + t] = {
      expand: function(n) {
        for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n]; 4 > r; r++)i[e + Tt[r] + t] = o[r] || o[r - 2] || o[0];
        return i
      }
    }, It.test(e) || (Z.cssHooks[e + t].set = N)
  }), Z.fn.extend({
    css: function(e, t) {
      return mt(this, function(e, t, n) {
        var r, i, o = {}, s = 0;
        if (Z.isArray(t)) {
          for (r = _t(e), i = t.length; i > s; s++)o[t[s]] = Z.css(e, t[s], !1, r);
          return o
        }
        return void 0 !== n ? Z.style(e, t, n) : Z.css(e, t)
      }, e, t, arguments.length > 1)
    }, show: function() {
      return S(this, !0)
    }, hide: function() {
      return S(this)
    }, toggle: function(e) {
      return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
        Ct(this) ? Z(this).show() : Z(this).hide()
      })
    }
  }), Z.Tween = D, D.prototype = {
    constructor: D, init: function(e, t, n, r, i, o) {
      this.elem = e, this.prop = n, this.easing = i || "swing", this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (Z.cssNumber[n] ? "" : "px")
    }, cur: function() {
      var e = D.propHooks[this.prop];
      return e && e.get ? e.get(this) : D.propHooks._default.get(this)
    }, run: function(e) {
      var t, n = D.propHooks[this.prop];
      return this.pos = t = this.options.duration ? Z.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : D.propHooks._default.set(this), this
    }
  }, D.prototype.init.prototype = D.prototype, D.propHooks = {
    _default: {
      get: function(e) {
        var t;
        return null == e.elem[e.prop] || e.elem.style && null != e.elem.style[e.prop] ? (t = Z.css(e.elem, e.prop, ""), t && "auto" !== t ? t : 0) : e.elem[e.prop]
      }, set: function(e) {
        Z.fx.step[e.prop] ? Z.fx.step[e.prop](e) : e.elem.style && (null != e.elem.style[Z.cssProps[e.prop]] || Z.cssHooks[e.prop]) ? Z.style(e.elem, e.prop, e.now + e.unit) : e.elem[e.prop] = e.now
      }
    }
  }, D.propHooks.scrollTop = D.propHooks.scrollLeft = {
    set: function(e) {
      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now)
    }
  }, Z.easing = {
    linear: function(e) {
      return e
    }, swing: function(e) {
      return .5 - Math.cos(e * Math.PI) / 2
    }
  }, Z.fx = D.prototype.init, Z.fx.step = {};
  var Qt, Jt, Kt = /^(?:toggle|show|hide)$/, Zt = new RegExp("^(?:([+-])=|)(" + wt + ")([a-z%]*)$", "i"), en = /queueHooks$/, tn = [q], nn = {
    "*": [function(e, t) {
      var n = this.createTween(e, t), r = n.cur(), i = Zt.exec(t), o = i && i[3] || (Z.cssNumber[e] ? "" : "px"), s = (Z.cssNumber[e] || "px" !== o && +r) && Zt.exec(Z.css(n.elem, e)), a = 1, u = 20;
      if (s && s[3] !== o) {
        o = o || s[3], i = i || [], s = +r || 1;
        do a = a || ".5", s /= a, Z.style(n.elem, e, s + o); while (a !== (a = n.cur() / r) && 1 !== a && --u)
      }
      return i && (s = n.start = +s || +r || 0, n.unit = o, n.end = i[1] ? s + (i[1] + 1) * i[2] : +i[2]), n
    }]
  };
  Z.Animation = Z.extend(O, {
    tweener: function(e, t) {
      Z.isFunction(e) ? (t = e, e = ["*"]) : e = e.split(" ");
      for (var n, r = 0, i = e.length; i > r; r++)n = e[r], nn[n] = nn[n] || [], nn[n].unshift(t)
    }, prefilter: function(e, t) {
      t ? tn.unshift(e) : tn.push(e)
    }
  }), Z.speed = function(e, t, n) {
    var r = e && "object" == typeof e ? Z.extend({}, e) : {
      complete: n || !n && t || Z.isFunction(e) && e,
      duration: e,
      easing: n && t || t && !Z.isFunction(t) && t
    };
    return r.duration = Z.fx.off ? 0 : "number" == typeof r.duration ? r.duration : r.duration in Z.fx.speeds ? Z.fx.speeds[r.duration] : Z.fx.speeds._default, (null == r.queue || r.queue === !0) && (r.queue = "fx"), r.old = r.complete, r.complete = function() {
      Z.isFunction(r.old) && r.old.call(this), r.queue && Z.dequeue(this, r.queue)
    }, r
  }, Z.fn.extend({
    fadeTo: function(e, t, n, r) {
      return this.filter(Ct).css("opacity", 0).show().end().animate({ opacity: t }, e, n, r)
    }, animate: function(e, t, n, r) {
      var i = Z.isEmptyObject(e), o = Z.speed(t, n, r), s = function() {
        var t = O(this, Z.extend({}, e), o);
        (i || vt.get(this, "finish")) && t.stop(!0)
      };
      return s.finish = s, i || o.queue === !1 ? this.each(s) : this.queue(o.queue, s)
    }, stop: function(e, t, n) {
      var r = function(e) {
        var t = e.stop;
        delete e.stop, t(n)
      };
      return "string" != typeof e && (n = t, t = e, e = void 0), t && e !== !1 && this.queue(e || "fx", []), this.each(function() {
        var t = !0, i = null != e && e + "queueHooks", o = Z.timers, s = vt.get(this);
        if (i)s[i] && s[i].stop && r(s[i]); else for (i in s)s[i] && s[i].stop && en.test(i) && r(s[i]);
        for (i = o.length; i--;)o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), t = !1, o.splice(i, 1));
        (t || !n) && Z.dequeue(this, e)
      })
    }, finish: function(e) {
      return e !== !1 && (e = e || "fx"), this.each(function() {
        var t, n = vt.get(this), r = n[e + "queue"], i = n[e + "queueHooks"], o = Z.timers, s = r ? r.length : 0;
        for (n.finish = !0, Z.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--;)o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));
        for (t = 0; s > t; t++)r[t] && r[t].finish && r[t].finish.call(this);
        delete n.finish
      })
    }
  }), Z.each(["toggle", "show", "hide"], function(e, t) {
    var n = Z.fn[t];
    Z.fn[t] = function(e, r, i) {
      return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(A(t, !0), e, r, i)
    }
  }), Z.each({
    slideDown: A("show"),
    slideUp: A("hide"),
    slideToggle: A("toggle"),
    fadeIn: { opacity: "show" },
    fadeOut: { opacity: "hide" },
    fadeToggle: { opacity: "toggle" }
  }, function(e, t) {
    Z.fn[e] = function(e, n, r) {
      return this.animate(t, e, n, r)
    }
  }), Z.timers = [], Z.fx.tick = function() {
    var e, t = 0, n = Z.timers;
    for (Qt = Z.now(); t < n.length; t++)e = n[t], e() || n[t] !== e || n.splice(t--, 1);
    n.length || Z.fx.stop(), Qt = void 0
  }, Z.fx.timer = function(e) {
    Z.timers.push(e), e() ? Z.fx.start() : Z.timers.pop()
  }, Z.fx.interval = 13, Z.fx.start = function() {
    Jt || (Jt = setInterval(Z.fx.tick, Z.fx.interval))
  }, Z.fx.stop = function() {
    clearInterval(Jt), Jt = null
  }, Z.fx.speeds = { slow: 600, fast: 200, _default: 400 }, Z.fn.delay = function(e, t) {
    return e = Z.fx ? Z.fx.speeds[e] || e : e, t = t || "fx", this.queue(t, function(t, n) {
      var r = setTimeout(t, e);
      n.stop = function() {
        clearTimeout(r)
      }
    })
  }, function() {
    var e = J.createElement("input"), t = J.createElement("select"), n = t.appendChild(J.createElement("option"));
    e.type = "checkbox", Q.checkOn = "" !== e.value, Q.optSelected = n.selected, t.disabled = !0, Q.optDisabled = !n.disabled, e = J.createElement("input"), e.value = "t", e.type = "radio", Q.radioValue = "t" === e.value
  }();
  var rn, on, sn = Z.expr.attrHandle;
  Z.fn.extend({
    attr: function(e, t) {
      return mt(this, Z.attr, e, t, arguments.length > 1)
    }, removeAttr: function(e) {
      return this.each(function() {
        Z.removeAttr(this, e)
      })
    }
  }), Z.extend({
    attr: function(e, t, n) {
      var r, i, o = e.nodeType;
      if (e && 3 !== o && 8 !== o && 2 !== o)return typeof e.getAttribute === kt ? Z.prop(e, t, n) : (1 === o && Z.isXMLDoc(e) || (t = t.toLowerCase(), r = Z.attrHooks[t] || (Z.expr.match.bool.test(t) ? on : rn)), void 0 === n ? r && "get" in r && null !== (i = r.get(e, t)) ? i : (i = Z.find.attr(e, t), null == i ? void 0 : i) : null !== n ? r && "set" in r && void 0 !== (i = r.set(e, n, t)) ? i : (e.setAttribute(t, n + ""), n) : void Z.removeAttr(e, t))
    }, removeAttr: function(e, t) {
      var n, r, i = 0, o = t && t.match(dt);
      if (o && 1 === e.nodeType)for (; n = o[i++];)r = Z.propFix[n] || n, Z.expr.match.bool.test(n) && (e[r] = !1), e.removeAttribute(n)
    }, attrHooks: {
      type: {
        set: function(e, t) {
          if (!Q.radioValue && "radio" === t && Z.nodeName(e, "input")) {
            var n = e.value;
            return e.setAttribute("type", t), n && (e.value = n), t
          }
        }
      }
    }
  }), on = {
    set: function(e, t, n) {
      return t === !1 ? Z.removeAttr(e, n) : e.setAttribute(n, n), n
    }
  }, Z.each(Z.expr.match.bool.source.match(/\w+/g), function(e, t) {
    var n = sn[t] || Z.find.attr;
    sn[t] = function(e, t, r) {
      var i, o;
      return r || (o = sn[t], sn[t] = i, i = null != n(e, t, r) ? t.toLowerCase() : null, sn[t] = o), i
    }
  });
  var an = /^(?:input|select|textarea|button)$/i;
  Z.fn.extend({
    prop: function(e, t) {
      return mt(this, Z.prop, e, t, arguments.length > 1)
    }, removeProp: function(e) {
      return this.each(function() {
        delete this[Z.propFix[e] || e]
      })
    }
  }), Z.extend({
    propFix: { "for": "htmlFor", "class": "className" }, prop: function(e, t, n) {
      var r, i, o, s = e.nodeType;
      if (e && 3 !== s && 8 !== s && 2 !== s)return o = 1 !== s || !Z.isXMLDoc(e), o && (t = Z.propFix[t] || t, i = Z.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t]
    }, propHooks: {
      tabIndex: {
        get: function(e) {
          return e.hasAttribute("tabindex") || an.test(e.nodeName) || e.href ? e.tabIndex : -1
        }
      }
    }
  }), Q.optSelected || (Z.propHooks.selected = {
    get: function(e) {
      var t = e.parentNode;
      return t && t.parentNode && t.parentNode.selectedIndex, null
    }
  }), Z.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
    Z.propFix[this.toLowerCase()] = this
  });
  var un = /[\t\r\n\f]/g;
  Z.fn.extend({
    addClass: function(e) {
      var t, n, r, i, o, s, a = "string" == typeof e && e, u = 0, l = this.length;
      if (Z.isFunction(e))return this.each(function(t) {
        Z(this).addClass(e.call(this, t, this.className))
      });
      if (a)for (t = (e || "").match(dt) || []; l > u; u++)if (n = this[u], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(un, " ") : " ")) {
        for (o = 0; i = t[o++];)r.indexOf(" " + i + " ") < 0 && (r += i + " ");
        s = Z.trim(r), n.className !== s && (n.className = s)
      }
      return this
    }, removeClass: function(e) {
      var t, n, r, i, o, s, a = 0 === arguments.length || "string" == typeof e && e, u = 0, l = this.length;
      if (Z.isFunction(e))return this.each(function(t) {
        Z(this).removeClass(e.call(this, t, this.className))
      });
      if (a)for (t = (e || "").match(dt) || []; l > u; u++)if (n = this[u], r = 1 === n.nodeType && (n.className ? (" " + n.className + " ").replace(un, " ") : "")) {
        for (o = 0; i = t[o++];)for (; r.indexOf(" " + i + " ") >= 0;)r = r.replace(" " + i + " ", " ");
        s = e ? Z.trim(r) : "", n.className !== s && (n.className = s)
      }
      return this
    }, toggleClass: function(e, t) {
      var n = typeof e;
      return "boolean" == typeof t && "string" === n ? t ? this.addClass(e) : this.removeClass(e) : this.each(Z.isFunction(e) ? function(n) {
        Z(this).toggleClass(e.call(this, n, this.className, t), t)
      } : function() {
        if ("string" === n)for (var t, r = 0, i = Z(this), o = e.match(dt) || []; t = o[r++];)i.hasClass(t) ? i.removeClass(t) : i.addClass(t); else(n === kt || "boolean" === n) && (this.className && vt.set(this, "__className__", this.className), this.className = this.className || e === !1 ? "" : vt.get(this, "__className__") || "")
      })
    }, hasClass: function(e) {
      for (var t = " " + e + " ", n = 0, r = this.length; r > n; n++)if (1 === this[n].nodeType && (" " + this[n].className + " ").replace(un, " ").indexOf(t) >= 0)return !0;
      return !1
    }
  });
  var ln = /\r/g;
  Z.fn.extend({
    val: function(e) {
      var t, n, r, i = this[0];
      {
        if (arguments.length)return r = Z.isFunction(e), this.each(function(n) {
          var i;
          1 === this.nodeType && (i = r ? e.call(this, n, Z(this).val()) : e, null == i ? i = "" : "number" == typeof i ? i += "" : Z.isArray(i) && (i = Z.map(i, function(e) {
            return null == e ? "" : e + ""
          })), t = Z.valHooks[this.type] || Z.valHooks[this.nodeName.toLowerCase()], t && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i))
        });
        if (i)return t = Z.valHooks[i.type] || Z.valHooks[i.nodeName.toLowerCase()], t && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : (n = i.value, "string" == typeof n ? n.replace(ln, "") : null == n ? "" : n)
      }
    }
  }), Z.extend({
    valHooks: {
      option: {
        get: function(e) {
          var t = Z.find.attr(e, "value");
          return null != t ? t : Z.trim(Z.text(e))
        }
      }, select: {
        get: function(e) {
          for (var t, n, r = e.options, i = e.selectedIndex, o = "select-one" === e.type || 0 > i, s = o ? null : [], a = o ? i + 1 : r.length, u = 0 > i ? a : o ? i : 0; a > u; u++)if (n = r[u], !(!n.selected && u !== i || (Q.optDisabled ? n.disabled : null !== n.getAttribute("disabled")) || n.parentNode.disabled && Z.nodeName(n.parentNode, "optgroup"))) {
            if (t = Z(n).val(), o)return t;
            s.push(t)
          }
          return s
        }, set: function(e, t) {
          for (var n, r, i = e.options, o = Z.makeArray(t), s = i.length; s--;)r = i[s], (r.selected = Z.inArray(r.value, o) >= 0) && (n = !0);
          return n || (e.selectedIndex = -1), o
        }
      }
    }
  }), Z.each(["radio", "checkbox"], function() {
    Z.valHooks[this] = {
      set: function(e, t) {
        return Z.isArray(t) ? e.checked = Z.inArray(Z(e).val(), t) >= 0 : void 0
      }
    }, Q.checkOn || (Z.valHooks[this].get = function(e) {
      return null === e.getAttribute("value") ? "on" : e.value
    })
  }), Z.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(e, t) {
    Z.fn[t] = function(e, n) {
      return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t)
    }
  }), Z.fn.extend({
    hover: function(e, t) {
      return this.mouseenter(e).mouseleave(t || e)
    }, bind: function(e, t, n) {
      return this.on(e, null, t, n)
    }, unbind: function(e, t) {
      return this.off(e, null, t)
    }, delegate: function(e, t, n, r) {
      return this.on(t, e, n, r)
    }, undelegate: function(e, t, n) {
      return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n)
    }
  });
  var cn = Z.now(), fn = /\?/;
  Z.parseJSON = function(e) {
    return JSON.parse(e + "")
  }, Z.parseXML = function(e) {
    var t, n;
    if (!e || "string" != typeof e)return null;
    try {
      n = new DOMParser, t = n.parseFromString(e, "text/xml")
    } catch (r) {
      t = void 0
    }
    return (!t || t.getElementsByTagName("parsererror").length) && Z.error("Invalid XML: " + e), t
  };
  var pn = /#.*$/, dn = /([?&])_=[^&]*/, hn = /^(.*?):[ \t]*([^\r\n]*)$/gm, gn = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, mn = /^(?:GET|HEAD)$/, vn = /^\/\//, yn = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, xn = {}, bn = {}, wn = "*/".concat("*"), Tn = e.location.href, Cn = yn.exec(Tn.toLowerCase()) || [];
  Z.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: Tn,
      type: "GET",
      isLocal: gn.test(Cn[1]),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": wn,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: { xml: /xml/, html: /html/, json: /json/ },
      responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" },
      converters: { "* text": String, "text html": !0, "text json": Z.parseJSON, "text xml": Z.parseXML },
      flatOptions: { url: !0, context: !0 }
    },
    ajaxSetup: function(e, t) {
      return t ? R(R(e, Z.ajaxSettings), t) : R(Z.ajaxSettings, e)
    },
    ajaxPrefilter: F(xn),
    ajaxTransport: F(bn),
    ajax: function(e, t) {
      function n(e, t, n, s) {
        var u, c, v, y, b, T = t;
        2 !== x && (x = 2, a && clearTimeout(a), r = void 0, o = s || "", w.readyState = e > 0 ? 4 : 0, u = e >= 200 && 300 > e || 304 === e, n && (y = M(f, w, n)), y = W(f, y, w, u), u ? (f.ifModified && (b = w.getResponseHeader("Last-Modified"), b && (Z.lastModified[i] = b), b = w.getResponseHeader("etag"), b && (Z.etag[i] = b)), 204 === e || "HEAD" === f.type ? T = "nocontent" : 304 === e ? T = "notmodified" : (T = y.state, c = y.data, v = y.error, u = !v)) : (v = T, (e || !T) && (T = "error", 0 > e && (e = 0))), w.status = e, w.statusText = (t || T) + "", u ? h.resolveWith(p, [c, T, w]) : h.rejectWith(p, [w, T, v]), w.statusCode(m), m = void 0, l && d.trigger(u ? "ajaxSuccess" : "ajaxError", [w, f, u ? c : v]), g.fireWith(p, [w, T]), l && (d.trigger("ajaxComplete", [w, f]), --Z.active || Z.event.trigger("ajaxStop")))
      }

      "object" == typeof e && (t = e, e = void 0), t = t || {};
      var r, i, o, s, a, u, l, c, f = Z.ajaxSetup({}, t), p = f.context || f, d = f.context && (p.nodeType || p.jquery) ? Z(p) : Z.event, h = Z.Deferred(), g = Z.Callbacks("once memory"), m = f.statusCode || {}, v = {}, y = {}, x = 0, b = "canceled", w = {
        readyState: 0,
        getResponseHeader: function(e) {
          var t;
          if (2 === x) {
            if (!s)for (s = {}; t = hn.exec(o);)s[t[1].toLowerCase()] = t[2];
            t = s[e.toLowerCase()]
          }
          return null == t ? null : t
        },
        getAllResponseHeaders: function() {
          return 2 === x ? o : null
        },
        setRequestHeader: function(e, t) {
          var n = e.toLowerCase();
          return x || (e = y[n] = y[n] || e, v[e] = t), this
        },
        overrideMimeType: function(e) {
          return x || (f.mimeType = e), this
        },
        statusCode: function(e) {
          var t;
          if (e)if (2 > x)for (t in e)m[t] = [m[t], e[t]]; else w.always(e[w.status]);
          return this
        },
        abort: function(e) {
          var t = e || b;
          return r && r.abort(t), n(0, t), this
        }
      };
      if (h.promise(w).complete = g.add, w.success = w.done, w.error = w.fail, f.url = ((e || f.url || Tn) + "").replace(pn, "").replace(vn, Cn[1] + "//"), f.type = t.method || t.type || f.method || f.type, f.dataTypes = Z.trim(f.dataType || "*").toLowerCase().match(dt) || [""], null == f.crossDomain && (u = yn.exec(f.url.toLowerCase()), f.crossDomain = !(!u || u[1] === Cn[1] && u[2] === Cn[2] && (u[3] || ("http:" === u[1] ? "80" : "443")) === (Cn[3] || ("http:" === Cn[1] ? "80" : "443")))), f.data && f.processData && "string" != typeof f.data && (f.data = Z.param(f.data, f.traditional)), P(xn, f, t, w), 2 === x)return w;
      l = Z.event && f.global, l && 0 === Z.active++ && Z.event.trigger("ajaxStart"), f.type = f.type.toUpperCase(), f.hasContent = !mn.test(f.type), i = f.url, f.hasContent || (f.data && (i = f.url += (fn.test(i) ? "&" : "?") + f.data, delete f.data), f.cache === !1 && (f.url = dn.test(i) ? i.replace(dn, "$1_=" + cn++) : i + (fn.test(i) ? "&" : "?") + "_=" + cn++)), f.ifModified && (Z.lastModified[i] && w.setRequestHeader("If-Modified-Since", Z.lastModified[i]), Z.etag[i] && w.setRequestHeader("If-None-Match", Z.etag[i])), (f.data && f.hasContent && f.contentType !== !1 || t.contentType) && w.setRequestHeader("Content-Type", f.contentType), w.setRequestHeader("Accept", f.dataTypes[0] && f.accepts[f.dataTypes[0]] ? f.accepts[f.dataTypes[0]] + ("*" !== f.dataTypes[0] ? ", " + wn + "; q=0.01" : "") : f.accepts["*"]);
      for (c in f.headers)w.setRequestHeader(c, f.headers[c]);
      if (f.beforeSend && (f.beforeSend.call(p, w, f) === !1 || 2 === x))return w.abort();
      b = "abort";
      for (c in{ success: 1, error: 1, complete: 1 })w[c](f[c]);
      if (r = P(bn, f, t, w)) {
        w.readyState = 1, l && d.trigger("ajaxSend", [w, f]), f.async && f.timeout > 0 && (a = setTimeout(function() {
          w.abort("timeout")
        }, f.timeout));
        try {
          x = 1, r.send(v, n)
        } catch (T) {
          if (!(2 > x))throw T;
          n(-1, T)
        }
      } else n(-1, "No Transport");
      return w
    },
    getJSON: function(e, t, n) {
      return Z.get(e, t, n, "json")
    },
    getScript: function(e, t) {
      return Z.get(e, void 0, t, "script")
    }
  }), Z.each(["get", "post"], function(e, t) {
    Z[t] = function(e, n, r, i) {
      return Z.isFunction(n) && (i = i || r, r = n, n = void 0), Z.ajax({
        url: e,
        type: t,
        dataType: i,
        data: n,
        success: r
      })
    }
  }), Z._evalUrl = function(e) {
    return Z.ajax({ url: e, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 })
  }, Z.fn.extend({
    wrapAll: function(e) {
      var t;
      return Z.isFunction(e) ? this.each(function(t) {
        Z(this).wrapAll(e.call(this, t))
      }) : (this[0] && (t = Z(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function() {
        for (var e = this; e.firstElementChild;)e = e.firstElementChild;
        return e
      }).append(this)), this)
    }, wrapInner: function(e) {
      return this.each(Z.isFunction(e) ? function(t) {
        Z(this).wrapInner(e.call(this, t))
      } : function() {
        var t = Z(this), n = t.contents();
        n.length ? n.wrapAll(e) : t.append(e)
      })
    }, wrap: function(e) {
      var t = Z.isFunction(e);
      return this.each(function(n) {
        Z(this).wrapAll(t ? e.call(this, n) : e)
      })
    }, unwrap: function() {
      return this.parent().each(function() {
        Z.nodeName(this, "body") || Z(this).replaceWith(this.childNodes)
      }).end()
    }
  }), Z.expr.filters.hidden = function(e) {
    return e.offsetWidth <= 0 && e.offsetHeight <= 0
  }, Z.expr.filters.visible = function(e) {
    return !Z.expr.filters.hidden(e)
  };
  var Nn = /%20/g, kn = /\[\]$/, En = /\r?\n/g, Sn = /^(?:submit|button|image|reset|file)$/i, Dn = /^(?:input|select|textarea|keygen)/i;
  Z.param = function(e, t) {
    var n, r = [], i = function(e, t) {
      t = Z.isFunction(t) ? t() : null == t ? "" : t, r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t)
    };
    if (void 0 === t && (t = Z.ajaxSettings && Z.ajaxSettings.traditional), Z.isArray(e) || e.jquery && !Z.isPlainObject(e))Z.each(e, function() {
      i(this.name, this.value)
    }); else for (n in e)$(n, e[n], t, i);
    return r.join("&").replace(Nn, "+")
  }, Z.fn.extend({
    serialize: function() {
      return Z.param(this.serializeArray())
    }, serializeArray: function() {
      return this.map(function() {
        var e = Z.prop(this, "elements");
        return e ? Z.makeArray(e) : this
      }).filter(function() {
        var e = this.type;
        return this.name && !Z(this).is(":disabled") && Dn.test(this.nodeName) && !Sn.test(e) && (this.checked || !Nt.test(e))
      }).map(function(e, t) {
        var n = Z(this).val();
        return null == n ? null : Z.isArray(n) ? Z.map(n, function(e) {
          return { name: t.name, value: e.replace(En, "\r\n") }
        }) : { name: t.name, value: n.replace(En, "\r\n") }
      }).get()
    }
  }), Z.ajaxSettings.xhr = function() {
    try {
      return new XMLHttpRequest
    } catch (e) {
    }
  };
  var jn = 0, An = {}, Ln = { 0: 200, 1223: 204 }, qn = Z.ajaxSettings.xhr();
  e.attachEvent && e.attachEvent("onunload", function() {
    for (var e in An)An[e]()
  }), Q.cors = !!qn && "withCredentials" in qn, Q.ajax = qn = !!qn, Z.ajaxTransport(function(e) {
    var t;
    return Q.cors || qn && !e.crossDomain ? {
      send: function(n, r) {
        var i, o = e.xhr(), s = ++jn;
        if (o.open(e.type, e.url, e.async, e.username, e.password), e.xhrFields)for (i in e.xhrFields)o[i] = e.xhrFields[i];
        e.mimeType && o.overrideMimeType && o.overrideMimeType(e.mimeType), e.crossDomain || n["X-Requested-With"] || (n["X-Requested-With"] = "XMLHttpRequest");
        for (i in n)o.setRequestHeader(i, n[i]);
        t = function(e) {
          return function() {
            t && (delete An[s], t = o.onload = o.onerror = null, "abort" === e ? o.abort() : "error" === e ? r(o.status, o.statusText) : r(Ln[o.status] || o.status, o.statusText, "string" == typeof o.responseText ? { text: o.responseText } : void 0, o.getAllResponseHeaders()))
          }
        }, o.onload = t(), o.onerror = t("error"), t = An[s] = t("abort");
        try {
          o.send(e.hasContent && e.data || null)
        } catch (a) {
          if (t)throw a
        }
      }, abort: function() {
        t && t()
      }
    } : void 0
  }), Z.ajaxSetup({
    accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" },
    contents: { script: /(?:java|ecma)script/ },
    converters: {
      "text script": function(e) {
        return Z.globalEval(e), e
      }
    }
  }), Z.ajaxPrefilter("script", function(e) {
    void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET")
  }), Z.ajaxTransport("script", function(e) {
    if (e.crossDomain) {
      var t, n;
      return {
        send: function(r, i) {
          t = Z("<script>").prop({ async: !0, charset: e.scriptCharset, src: e.url }).on("load error", n = function(e) {
            t.remove(), n = null, e && i("error" === e.type ? 404 : 200, e.type)
          }), J.head.appendChild(t[0])
        }, abort: function() {
          n && n()
        }
      }
    }
  });
  var Hn = [], On = /(=)\?(?=&|$)|\?\?/;
  Z.ajaxSetup({
    jsonp: "callback", jsonpCallback: function() {
      var e = Hn.pop() || Z.expando + "_" + cn++;
      return this[e] = !0, e
    }
  }), Z.ajaxPrefilter("json jsonp", function(t, n, r) {
    var i, o, s, a = t.jsonp !== !1 && (On.test(t.url) ? "url" : "string" == typeof t.data && !(t.contentType || "").indexOf("application/x-www-form-urlencoded") && On.test(t.data) && "data");
    return a || "jsonp" === t.dataTypes[0] ? (i = t.jsonpCallback = Z.isFunction(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, a ? t[a] = t[a].replace(On, "$1" + i) : t.jsonp !== !1 && (t.url += (fn.test(t.url) ? "&" : "?") + t.jsonp + "=" + i), t.converters["script json"] = function() {
      return s || Z.error(i + " was not called"), s[0]
    }, t.dataTypes[0] = "json", o = e[i], e[i] = function() {
      s = arguments
    }, r.always(function() {
      e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, Hn.push(i)), s && Z.isFunction(o) && o(s[0]), s = o = void 0
    }), "script") : void 0
  }), Z.parseHTML = function(e, t, n) {
    if (!e || "string" != typeof e)return null;
    "boolean" == typeof t && (n = t, t = !1), t = t || J;
    var r = st.exec(e), i = !n && [];
    return r ? [t.createElement(r[1])] : (r = Z.buildFragment([e], t, i), i && i.length && Z(i).remove(), Z.merge([], r.childNodes))
  };
  var Fn = Z.fn.load;
  Z.fn.load = function(e, t, n) {
    if ("string" != typeof e && Fn)return Fn.apply(this, arguments);
    var r, i, o, s = this, a = e.indexOf(" ");
    return a >= 0 && (r = Z.trim(e.slice(a)), e = e.slice(0, a)), Z.isFunction(t) ? (n = t, t = void 0) : t && "object" == typeof t && (i = "POST"), s.length > 0 && Z.ajax({
      url: e,
      type: i,
      dataType: "html",
      data: t
    }).done(function(e) {
      o = arguments, s.html(r ? Z("<div>").append(Z.parseHTML(e)).find(r) : e)
    }).complete(n && function(e, t) {
        s.each(n, o || [e.responseText, t, e])
      }), this
  }, Z.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(e, t) {
    Z.fn[t] = function(e) {
      return this.on(t, e)
    }
  }), Z.expr.filters.animated = function(e) {
    return Z.grep(Z.timers, function(t) {
      return e === t.elem
    }).length
  };
  var Pn = e.document.documentElement;
  Z.offset = {
    setOffset: function(e, t, n) {
      var r, i, o, s, a, u, l, c = Z.css(e, "position"), f = Z(e), p = {};
      "static" === c && (e.style.position = "relative"), a = f.offset(), o = Z.css(e, "top"), u = Z.css(e, "left"), l = ("absolute" === c || "fixed" === c) && (o + u).indexOf("auto") > -1, l ? (r = f.position(), s = r.top, i = r.left) : (s = parseFloat(o) || 0, i = parseFloat(u) || 0), Z.isFunction(t) && (t = t.call(e, n, a)), null != t.top && (p.top = t.top - a.top + s), null != t.left && (p.left = t.left - a.left + i), "using" in t ? t.using.call(e, p) : f.css(p)
    }
  }, Z.fn.extend({
    offset: function(e) {
      if (arguments.length)return void 0 === e ? this : this.each(function(t) {
        Z.offset.setOffset(this, e, t)
      });
      var t, n, r = this[0], i = { top: 0, left: 0 }, o = r && r.ownerDocument;
      if (o)return t = o.documentElement, Z.contains(t, r) ? (typeof r.getBoundingClientRect !== kt && (i = r.getBoundingClientRect()), n = I(o), {
        top: i.top + n.pageYOffset - t.clientTop,
        left: i.left + n.pageXOffset - t.clientLeft
      }) : i
    }, position: function() {
      if (this[0]) {
        var e, t, n = this[0], r = { top: 0, left: 0 };
        return "fixed" === Z.css(n, "position") ? t = n.getBoundingClientRect() : (e = this.offsetParent(), t = this.offset(), Z.nodeName(e[0], "html") || (r = e.offset()), r.top += Z.css(e[0], "borderTopWidth", !0), r.left += Z.css(e[0], "borderLeftWidth", !0)), {
          top: t.top - r.top - Z.css(n, "marginTop", !0),
          left: t.left - r.left - Z.css(n, "marginLeft", !0)
        }
      }
    }, offsetParent: function() {
      return this.map(function() {
        for (var e = this.offsetParent || Pn; e && !Z.nodeName(e, "html") && "static" === Z.css(e, "position");)e = e.offsetParent;
        return e || Pn
      })
    }
  }), Z.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(t, n) {
    var r = "pageYOffset" === n;
    Z.fn[t] = function(i) {
      return mt(this, function(t, i, o) {
        var s = I(t);
        return void 0 === o ? s ? s[n] : t[i] : void(s ? s.scrollTo(r ? e.pageXOffset : o, r ? o : e.pageYOffset) : t[i] = o)
      }, t, i, arguments.length, null)
    }
  }), Z.each(["top", "left"], function(e, t) {
    Z.cssHooks[t] = T(Q.pixelPosition, function(e, n) {
      return n ? (n = w(e, t), Bt.test(n) ? Z(e).position()[t] + "px" : n) : void 0
    })
  }), Z.each({ Height: "height", Width: "width" }, function(e, t) {
    Z.each({ padding: "inner" + e, content: t, "": "outer" + e }, function(n, r) {
      Z.fn[r] = function(r, i) {
        var o = arguments.length && (n || "boolean" != typeof r), s = n || (r === !0 || i === !0 ? "margin" : "border");
        return mt(this, function(t, n, r) {
          var i;
          return Z.isWindow(t) ? t.document.documentElement["client" + e] : 9 === t.nodeType ? (i = t.documentElement, Math.max(t.body["scroll" + e], i["scroll" + e], t.body["offset" + e], i["offset" + e], i["client" + e])) : void 0 === r ? Z.css(t, n, s) : Z.style(t, n, r, s)
        }, t, o ? r : void 0, o, null)
      }
    })
  }), Z.fn.size = function() {
    return this.length
  }, Z.fn.andSelf = Z.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function() {
    return Z
  });
  var Rn = e.jQuery, Mn = e.$;
  return Z.noConflict = function(t) {
    return e.$ === Z && (e.$ = Mn), t && e.jQuery === Z && (e.jQuery = Rn), Z
  }, typeof t === kt && (e.jQuery = e.$ = Z), Z
});
!function(t, e, n) {
  "use strict";
  function r(t, e) {
    return e = e || Error, function() {
      var n, r, i = arguments[0], o = "[" + (t ? t + ":" : "") + i + "] ", a = arguments[1], s = arguments;
      for (n = o + a.replace(/\{\d+\}/g, function(t) {
          var e = +t.slice(1, -1);
          return e + 2 < s.length ? he(s[e + 2]) : t
        }), n = n + "\nhttp://errors.angularjs.org/1.3.8/" + (t ? t + "/" : "") + i, r = 2; r < arguments.length; r++)n = n + (2 == r ? "?" : "&") + "p" + (r - 2) + "=" + encodeURIComponent(he(arguments[r]));
      return new e(n)
    }
  }

  function i(t) {
    if (null == t || A(t))return !1;
    var e = t.length;
    return t.nodeType === mi && e ? !0 : w(t) || li(t) || 0 === e || "number" == typeof e && e > 0 && e - 1 in t
  }

  function o(t, e, n) {
    var r, a;
    if (t)if (S(t))for (r in t)"prototype" == r || "length" == r || "name" == r || t.hasOwnProperty && !t.hasOwnProperty(r) || e.call(n, t[r], r, t); else if (li(t) || i(t)) {
      var s = "object" != typeof t;
      for (r = 0, a = t.length; a > r; r++)(s || r in t) && e.call(n, t[r], r, t)
    } else if (t.forEach && t.forEach !== o)t.forEach(e, n, t); else for (r in t)t.hasOwnProperty(r) && e.call(n, t[r], r, t);
    return t
  }

  function a(t) {
    return Object.keys(t).sort()
  }

  function s(t, e, n) {
    for (var r = a(t), i = 0; i < r.length; i++)e.call(n, t[r[i]], r[i]);
    return r
  }

  function u(t) {
    return function(e, n) {
      t(n, e)
    }
  }

  function c() {
    return ++ui
  }

  function l(t, e) {
    e ? t.$$hashKey = e : delete t.$$hashKey
  }

  function f(t) {
    for (var e = t.$$hashKey, n = 1, r = arguments.length; r > n; n++) {
      var i = arguments[n];
      if (i)for (var o = Object.keys(i), a = 0, s = o.length; s > a; a++) {
        var u = o[a];
        t[u] = i[u]
      }
    }
    return l(t, e), t
  }

  function h(t) {
    return parseInt(t, 10)
  }

  function p(t, e) {
    return f(Object.create(t), e)
  }

  function $() {
  }

  function d(t) {
    return t
  }

  function v(t) {
    return function() {
      return t
    }
  }

  function m(t) {
    return "undefined" == typeof t
  }

  function g(t) {
    return "undefined" != typeof t
  }

  function y(t) {
    return null !== t && "object" == typeof t
  }

  function w(t) {
    return "string" == typeof t
  }

  function b(t) {
    return "number" == typeof t
  }

  function x(t) {
    return "[object Date]" === oi.call(t)
  }

  function S(t) {
    return "function" == typeof t
  }

  function C(t) {
    return "[object RegExp]" === oi.call(t)
  }

  function A(t) {
    return t && t.window === t
  }

  function k(t) {
    return t && t.$evalAsync && t.$watch
  }

  function E(t) {
    return "[object File]" === oi.call(t)
  }

  function O(t) {
    return "[object FormData]" === oi.call(t)
  }

  function T(t) {
    return "[object Blob]" === oi.call(t)
  }

  function M(t) {
    return "boolean" == typeof t
  }

  function V(t) {
    return t && S(t.then)
  }

  function N(t) {
    return !(!t || !(t.nodeName || t.prop && t.attr && t.find))
  }

  function j(t) {
    var e, n = {}, r = t.split(",");
    for (e = 0; e < r.length; e++)n[r[e]] = !0;
    return n
  }

  function D(t) {
    return Gr(t.nodeName || t[0] && t[0].nodeName)
  }

  function P(t, e) {
    var n = t.indexOf(e);
    return n >= 0 && t.splice(n, 1), e
  }

  function R(t, e, n, r) {
    if (A(t) || k(t))throw ai("cpws", "Can't copy! Making copies of Window or Scope instances is not supported.");
    if (e) {
      if (t === e)throw ai("cpi", "Can't copy! Source and destination are identical.");
      if (n = n || [], r = r || [], y(t)) {
        var i = n.indexOf(t);
        if (-1 !== i)return r[i];
        n.push(t), r.push(e)
      }
      var a;
      if (li(t)) {
        e.length = 0;
        for (var s = 0; s < t.length; s++)a = R(t[s], null, n, r), y(t[s]) && (n.push(t[s]), r.push(a)), e.push(a)
      } else {
        var u = e.$$hashKey;
        li(e) ? e.length = 0 : o(e, function(t, n) {
          delete e[n]
        });
        for (var c in t)t.hasOwnProperty(c) && (a = R(t[c], null, n, r), y(t[c]) && (n.push(t[c]), r.push(a)), e[c] = a);
        l(e, u)
      }
    } else if (e = t, t)if (li(t))e = R(t, [], n, r); else if (x(t))e = new Date(t.getTime()); else if (C(t))e = new RegExp(t.source, t.toString().match(/[^\/]*$/)[0]), e.lastIndex = t.lastIndex; else if (y(t)) {
      var f = Object.create(Object.getPrototypeOf(t));
      e = R(t, f, n, r)
    }
    return e
  }

  function q(t, e) {
    if (li(t)) {
      e = e || [];
      for (var n = 0, r = t.length; r > n; n++)e[n] = t[n]
    } else if (y(t)) {
      e = e || {};
      for (var i in t)("$" !== i.charAt(0) || "$" !== i.charAt(1)) && (e[i] = t[i])
    }
    return e || t
  }

  function I(t, e) {
    if (t === e)return !0;
    if (null === t || null === e)return !1;
    if (t !== t && e !== e)return !0;
    var r, i, o, a = typeof t, s = typeof e;
    if (a == s && "object" == a) {
      if (!li(t)) {
        if (x(t))return x(e) ? I(t.getTime(), e.getTime()) : !1;
        if (C(t) && C(e))return t.toString() == e.toString();
        if (k(t) || k(e) || A(t) || A(e) || li(e))return !1;
        o = {};
        for (i in t)if ("$" !== i.charAt(0) && !S(t[i])) {
          if (!I(t[i], e[i]))return !1;
          o[i] = !0
        }
        for (i in e)if (!o.hasOwnProperty(i) && "$" !== i.charAt(0) && e[i] !== n && !S(e[i]))return !1;
        return !0
      }
      if (!li(e))return !1;
      if ((r = t.length) == e.length) {
        for (i = 0; r > i; i++)if (!I(t[i], e[i]))return !1;
        return !0
      }
    }
    return !1
  }

  function U(t, e, n) {
    return t.concat(ni.call(e, n))
  }

  function _(t, e) {
    return ni.call(t, e || 0)
  }

  function F(t, e) {
    var n = arguments.length > 2 ? _(arguments, 2) : [];
    return !S(e) || e instanceof RegExp ? e : n.length ? function() {
      return arguments.length ? e.apply(t, U(n, arguments, 0)) : e.apply(t, n)
    } : function() {
      return arguments.length ? e.apply(t, arguments) : e.call(t)
    }
  }

  function H(t, r) {
    var i = r;
    return "string" == typeof t && "$" === t.charAt(0) && "$" === t.charAt(1) ? i = n : A(r) ? i = "$WINDOW" : r && e === r ? i = "$DOCUMENT" : k(r) && (i = "$SCOPE"), i
  }

  function L(t, e) {
    return "undefined" == typeof t ? n : (b(e) || (e = e ? 2 : null), JSON.stringify(t, H, e))
  }

  function B(t) {
    return w(t) ? JSON.parse(t) : t
  }

  function z(t) {
    t = Qr(t).clone();
    try {
      t.empty()
    } catch (e) {
    }
    var n = Qr("<div>").append(t).html();
    try {
      return t[0].nodeType === gi ? Gr(n) : n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function(t, e) {
        return "<" + Gr(e)
      })
    } catch (e) {
      return Gr(n)
    }
  }

  function W(t) {
    try {
      return decodeURIComponent(t)
    } catch (e) {
    }
  }

  function G(t) {
    var e, n, r = {};
    return o((t || "").split("&"), function(t) {
      if (t && (e = t.replace(/\+/g, "%20").split("="), n = W(e[0]), g(n))) {
        var i = g(e[1]) ? W(e[1]) : !0;
        Jr.call(r, n) ? li(r[n]) ? r[n].push(i) : r[n] = [r[n], i] : r[n] = i
      }
    }), r
  }

  function J(t) {
    var e = [];
    return o(t, function(t, n) {
      li(t) ? o(t, function(t) {
        e.push(Z(n, !0) + (t === !0 ? "" : "=" + Z(t, !0)))
      }) : e.push(Z(n, !0) + (t === !0 ? "" : "=" + Z(t, !0)))
    }), e.length ? e.join("&") : ""
  }

  function Y(t) {
    return Z(t, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+")
  }

  function Z(t, e) {
    return encodeURIComponent(t).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, e ? "%20" : "+")
  }

  function K(t, e) {
    var n, r, i = $i.length;
    for (t = Qr(t), r = 0; i > r; ++r)if (n = $i[r] + e, w(n = t.attr(n)))return n;
    return null
  }

  function X(t, e) {
    var n, r, i = {};
    o($i, function(e) {
      var i = e + "app";
      !n && t.hasAttribute && t.hasAttribute(i) && (n = t, r = t.getAttribute(i))
    }), o($i, function(e) {
      var i, o = e + "app";
      !n && (i = t.querySelector("[" + o.replace(":", "\\:") + "]")) && (n = i, r = i.getAttribute(o))
    }), n && (i.strictDi = null !== K(n, "strict-di"), e(n, r ? [r] : [], i))
  }

  function Q(n, r, i) {
    y(i) || (i = {});
    var a = { strictDi: !1 };
    i = f(a, i);
    var s = function() {
      if (n = Qr(n), n.injector()) {
        var t = n[0] === e ? "document" : z(n);
        throw ai("btstrpd", "App Already Bootstrapped with this Element '{0}'", t.replace(/</, "&lt;").replace(/>/, "&gt;"))
      }
      r = r || [], r.unshift(["$provide", function(t) {
        t.value("$rootElement", n)
      }]), i.debugInfoEnabled && r.push(["$compileProvider", function(t) {
        t.debugInfoEnabled(!0)
      }]), r.unshift("ng");
      var o = Be(r, i.strictDi);
      return o.invoke(["$rootScope", "$rootElement", "$compile", "$injector", function(t, e, n, r) {
        t.$apply(function() {
          e.data("$injector", r), n(e)(t)
        })
      }]), o
    }, u = /^NG_ENABLE_DEBUG_INFO!/, c = /^NG_DEFER_BOOTSTRAP!/;
    return t && u.test(t.name) && (i.debugInfoEnabled = !0, t.name = t.name.replace(u, "")), t && !c.test(t.name) ? s() : (t.name = t.name.replace(c, ""), void(si.resumeBootstrap = function(t) {
      o(t, function(t) {
        r.push(t)
      }), s()
    }))
  }

  function te() {
    t.name = "NG_ENABLE_DEBUG_INFO!" + t.name, t.location.reload()
  }

  function ee(t) {
    var e = si.element(t).injector();
    if (!e)throw ai("test", "no injector found for element argument to getTestability");
    return e.get("$$testability")
  }

  function ne(t, e) {
    return e = e || "_", t.replace(di, function(t, n) {
      return (n ? e : "") + t.toLowerCase()
    })
  }

  function re() {
    var e;
    vi || (ti = t.jQuery, ti && ti.fn.on ? (Qr = ti, f(ti.fn, {
      scope: Ri.scope,
      isolateScope: Ri.isolateScope,
      controller: Ri.controller,
      injector: Ri.injector,
      inheritedData: Ri.inheritedData
    }), e = ti.cleanData, ti.cleanData = function(t) {
      var n;
      if (ci)ci = !1; else for (var r, i = 0; null != (r = t[i]); i++)n = ti._data(r, "events"), n && n.$destroy && ti(r).triggerHandler("$destroy");
      e(t)
    }) : Qr = we, si.element = Qr, vi = !0)
  }

  function ie(t, e, n) {
    if (!t)throw ai("areq", "Argument '{0}' is {1}", e || "?", n || "required");
    return t
  }

  function oe(t, e, n) {
    return n && li(t) && (t = t[t.length - 1]), ie(S(t), e, "not a function, got " + (t && "object" == typeof t ? t.constructor.name || "Object" : typeof t)), t
  }

  function ae(t, e) {
    if ("hasOwnProperty" === t)throw ai("badname", "hasOwnProperty is not a valid {0} name", e)
  }

  function se(t, e, n) {
    if (!e)return t;
    for (var r, i = e.split("."), o = t, a = i.length, s = 0; a > s; s++)r = i[s], t && (t = (o = t)[r]);
    return !n && S(t) ? F(o, t) : t
  }

  function ue(t) {
    var e = t[0], n = t[t.length - 1], r = [e];
    do {
      if (e = e.nextSibling, !e)break;
      r.push(e)
    } while (e !== n);
    return Qr(r)
  }

  function ce() {
    return Object.create(null)
  }

  function le(t) {
    function e(t, e, n) {
      return t[e] || (t[e] = n())
    }

    var n = r("$injector"), i = r("ng"), o = e(t, "angular", Object);
    return o.$$minErr = o.$$minErr || r, e(o, "module", function() {
      var t = {};
      return function(r, o, a) {
        var s = function(t, e) {
          if ("hasOwnProperty" === t)throw i("badname", "hasOwnProperty is not a valid {0} name", e)
        };
        return s(r, "module"), o && t.hasOwnProperty(r) && (t[r] = null), e(t, r, function() {
          function t(t, n, r, i) {
            return i || (i = e), function() {
              return i[r || "push"]([t, n, arguments]), c
            }
          }

          if (!o)throw n("nomod", "Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.", r);
          var e = [], i = [], s = [], u = t("$injector", "invoke", "push", i), c = {
            _invokeQueue: e,
            _configBlocks: i,
            _runBlocks: s,
            requires: o,
            name: r,
            provider: t("$provide", "provider"),
            factory: t("$provide", "factory"),
            service: t("$provide", "service"),
            value: t("$provide", "value"),
            constant: t("$provide", "constant", "unshift"),
            animation: t("$animateProvider", "register"),
            filter: t("$filterProvider", "register"),
            controller: t("$controllerProvider", "register"),
            directive: t("$compileProvider", "directive"),
            config: u,
            run: function(t) {
              return s.push(t), this
            }
          };
          return a && u(a), c
        })
      }
    })
  }

  function fe(t) {
    var e = [];
    return JSON.stringify(t, function(t, n) {
      if (n = H(t, n), y(n)) {
        if (e.indexOf(n) >= 0)return "<<already seen>>";
        e.push(n)
      }
      return n
    })
  }

  function he(t) {
    return "function" == typeof t ? t.toString().replace(/ \{[\s\S]*$/, "") : "undefined" == typeof t ? "undefined" : "string" != typeof t ? fe(t) : t
  }

  function pe(e) {
    f(e, {
      bootstrap: Q,
      copy: R,
      extend: f,
      equals: I,
      element: Qr,
      forEach: o,
      injector: Be,
      noop: $,
      bind: F,
      toJson: L,
      fromJson: B,
      identity: d,
      isUndefined: m,
      isDefined: g,
      isString: w,
      isFunction: S,
      isObject: y,
      isNumber: b,
      isElement: N,
      isArray: li,
      version: xi,
      isDate: x,
      lowercase: Gr,
      uppercase: Yr,
      callbacks: { counter: 0 },
      getTestability: ee,
      $$minErr: r,
      $$csp: pi,
      reloadWithDebugInfo: te
    }), ei = le(t);
    try {
      ei("ngLocale")
    } catch (n) {
      ei("ngLocale", []).provider("$locale", mn)
    }
    ei("ng", ["ngLocale"], ["$provide", function(t) {
      t.provider({ $$sanitizeUri: Yn }), t.provider("$compile", Ke).directive({
        a: Oo,
        input: Go,
        textarea: Go,
        form: jo,
        script: Ia,
        select: Fa,
        style: La,
        option: Ha,
        ngBind: ha,
        ngBindHtml: $a,
        ngBindTemplate: pa,
        ngClass: da,
        ngClassEven: ma,
        ngClassOdd: va,
        ngCloak: ga,
        ngController: ya,
        ngForm: Do,
        ngHide: Na,
        ngIf: xa,
        ngInclude: Sa,
        ngInit: Aa,
        ngNonBindable: ka,
        ngPluralize: Ea,
        ngRepeat: Oa,
        ngShow: Va,
        ngStyle: ja,
        ngSwitch: Da,
        ngSwitchWhen: Pa,
        ngSwitchDefault: Ra,
        ngOptions: _a,
        ngTransclude: qa,
        ngModel: na,
        ngList: ua,
        ngChange: ra,
        pattern: oa,
        ngPattern: oa,
        required: ia,
        ngRequired: ia,
        minlength: sa,
        ngMinlength: sa,
        maxlength: aa,
        ngMaxlength: aa,
        ngValue: la,
        ngModelOptions: fa
      }).directive({ ngInclude: Ca }).directive(To).directive(wa), t.provider({
        $anchorScroll: ze,
        $animate: Wi,
        $browser: Je,
        $cacheFactory: Ye,
        $controller: en,
        $document: nn,
        $exceptionHandler: rn,
        $filter: sr,
        $interpolate: dn,
        $interval: vn,
        $http: fn,
        $httpBackend: pn,
        $location: Vn,
        $log: Nn,
        $parse: Ln,
        $rootScope: Jn,
        $q: Bn,
        $$q: zn,
        $sce: Qn,
        $sceDelegate: Xn,
        $sniffer: tr,
        $templateCache: Ze,
        $templateRequest: er,
        $$testability: nr,
        $timeout: rr,
        $window: ar,
        $$rAF: Gn,
        $$asyncCallback: We,
        $$jqLite: Ue
      })
    }])
  }

  function $e() {
    return ++Ci
  }

  function de(t) {
    return t.replace(Ei, function(t, e, n, r) {
      return r ? n.toUpperCase() : n
    }).replace(Oi, "Moz$1")
  }

  function ve(t) {
    return !Ni.test(t)
  }

  function me(t) {
    var e = t.nodeType;
    return e === mi || !e || e === wi
  }

  function ge(t, e) {
    var n, r, i, a, s = e.createDocumentFragment(), u = [];
    if (ve(t))u.push(e.createTextNode(t)); else {
      for (n = n || s.appendChild(e.createElement("div")), r = (ji.exec(t) || ["", ""])[1].toLowerCase(), i = Pi[r] || Pi._default, n.innerHTML = i[1] + t.replace(Di, "<$1></$2>") + i[2], a = i[0]; a--;)n = n.lastChild;
      u = U(u, n.childNodes), n = s.firstChild, n.textContent = ""
    }
    return s.textContent = "", s.innerHTML = "", o(u, function(t) {
      s.appendChild(t)
    }), s
  }

  function ye(t, n) {
    n = n || e;
    var r;
    return (r = Vi.exec(t)) ? [n.createElement(r[1])] : (r = ge(t, n)) ? r.childNodes : []
  }

  function we(t) {
    if (t instanceof we)return t;
    var e;
    if (w(t) && (t = fi(t), e = !0), !(this instanceof we)) {
      if (e && "<" != t.charAt(0))throw Mi("nosel", "Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");
      return new we(t)
    }
    e ? Me(this, ye(t)) : Me(this, t)
  }

  function be(t) {
    return t.cloneNode(!0)
  }

  function xe(t, e) {
    if (e || Ce(t), t.querySelectorAll)for (var n = t.querySelectorAll("*"), r = 0, i = n.length; i > r; r++)Ce(n[r])
  }

  function Se(t, e, n, r) {
    if (g(r))throw Mi("offargs", "jqLite#off() does not support the `selector` argument");
    var i = Ae(t), a = i && i.events, s = i && i.handle;
    if (s)if (e)o(e.split(" "), function(e) {
      if (g(n)) {
        var r = a[e];
        if (P(r || [], n), r && r.length > 0)return
      }
      ki(t, e, s), delete a[e]
    }); else for (e in a)"$destroy" !== e && ki(t, e, s), delete a[e]
  }

  function Ce(t, e) {
    var r = t.ng339, i = r && Si[r];
    if (i) {
      if (e)return void delete i.data[e];
      i.handle && (i.events.$destroy && i.handle({}, "$destroy"), Se(t)), delete Si[r], t.ng339 = n
    }
  }

  function Ae(t, e) {
    var r = t.ng339, i = r && Si[r];
    return e && !i && (t.ng339 = r = $e(), i = Si[r] = { events: {}, data: {}, handle: n }), i
  }

  function ke(t, e, n) {
    if (me(t)) {
      var r = g(n), i = !r && e && !y(e), o = !e, a = Ae(t, !i), s = a && a.data;
      if (r)s[e] = n; else {
        if (o)return s;
        if (i)return s && s[e];
        f(s, e)
      }
    }
  }

  function Ee(t, e) {
    return t.getAttribute ? (" " + (t.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + e + " ") > -1 : !1
  }

  function Oe(t, e) {
    e && t.setAttribute && o(e.split(" "), function(e) {
      t.setAttribute("class", fi((" " + (t.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + fi(e) + " ", " ")))
    })
  }

  function Te(t, e) {
    if (e && t.setAttribute) {
      var n = (" " + (t.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
      o(e.split(" "), function(t) {
        t = fi(t), -1 === n.indexOf(" " + t + " ") && (n += t + " ")
      }), t.setAttribute("class", fi(n))
    }
  }

  function Me(t, e) {
    if (e)if (e.nodeType)t[t.length++] = e; else {
      var n = e.length;
      if ("number" == typeof n && e.window !== e) {
        if (n)for (var r = 0; n > r; r++)t[t.length++] = e[r]
      } else t[t.length++] = e
    }
  }

  function Ve(t, e) {
    return Ne(t, "$" + (e || "ngController") + "Controller")
  }

  function Ne(t, e, r) {
    t.nodeType == wi && (t = t.documentElement);
    for (var i = li(e) ? e : [e]; t;) {
      for (var o = 0, a = i.length; a > o; o++)if ((r = Qr.data(t, i[o])) !== n)return r;
      t = t.parentNode || t.nodeType === bi && t.host
    }
  }

  function je(t) {
    for (xe(t, !0); t.firstChild;)t.removeChild(t.firstChild)
  }

  function De(t, e) {
    e || xe(t);
    var n = t.parentNode;
    n && n.removeChild(t)
  }

  function Pe(e, n) {
    n = n || t, "complete" === n.document.readyState ? n.setTimeout(e) : Qr(n).on("load", e)
  }

  function Re(t, e) {
    var n = qi[e.toLowerCase()];
    return n && Ii[D(t)] && n
  }

  function qe(t, e) {
    var n = t.nodeName;
    return ("INPUT" === n || "TEXTAREA" === n) && Ui[e]
  }

  function Ie(t, e) {
    var n = function(n, r) {
      n.isDefaultPrevented = function() {
        return n.defaultPrevented
      };
      var i = e[r || n.type], o = i ? i.length : 0;
      if (o) {
        if (m(n.immediatePropagationStopped)) {
          var a = n.stopImmediatePropagation;
          n.stopImmediatePropagation = function() {
            n.immediatePropagationStopped = !0, n.stopPropagation && n.stopPropagation(), a && a.call(n)
          }
        }
        n.isImmediatePropagationStopped = function() {
          return n.immediatePropagationStopped === !0
        }, o > 1 && (i = q(i));
        for (var s = 0; o > s; s++)n.isImmediatePropagationStopped() || i[s].call(t, n)
      }
    };
    return n.elem = t, n
  }

  function Ue() {
    this.$get = function() {
      return f(we, {
        hasClass: function(t, e) {
          return t.attr && (t = t[0]), Ee(t, e)
        }, addClass: function(t, e) {
          return t.attr && (t = t[0]), Te(t, e)
        }, removeClass: function(t, e) {
          return t.attr && (t = t[0]), Oe(t, e)
        }
      })
    }
  }

  function _e(t, e) {
    var n = t && t.$$hashKey;
    if (n)return "function" == typeof n && (n = t.$$hashKey()), n;
    var r = typeof t;
    return n = "function" == r || "object" == r && null !== t ? t.$$hashKey = r + ":" + (e || c)() : r + ":" + t
  }

  function Fe(t, e) {
    if (e) {
      var n = 0;
      this.nextUid = function() {
        return ++n
      }
    }
    o(t, this.put, this)
  }

  function He(t) {
    var e = t.toString().replace(Li, ""), n = e.match(_i);
    return n ? "function(" + (n[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn"
  }

  function Le(t, e, n) {
    var r, i, a, s;
    if ("function" == typeof t) {
      if (!(r = t.$inject)) {
        if (r = [], t.length) {
          if (e)throw w(n) && n || (n = t.name || He(t)), Bi("strictdi", "{0} is not using explicit annotation and cannot be invoked in strict mode", n);
          i = t.toString().replace(Li, ""), a = i.match(_i), o(a[1].split(Fi), function(t) {
            t.replace(Hi, function(t, e, n) {
              r.push(n)
            })
          })
        }
        t.$inject = r
      }
    } else li(t) ? (s = t.length - 1, oe(t[s], "fn"), r = t.slice(0, s)) : oe(t, "fn", !0);
    return r
  }

  function Be(t, e) {
    function r(t) {
      return function(e, n) {
        return y(e) ? void o(e, u(t)) : t(e, n)
      }
    }

    function i(t, e) {
      if (ae(t, "service"), (S(e) || li(e)) && (e = k.instantiate(e)), !e.$get)throw Bi("pget", "Provider '{0}' must define $get factory method.", t);
      return A[t + b] = e
    }

    function a(t, e) {
      return function() {
        var n = O.invoke(e, this);
        if (m(n))throw Bi("undef", "Provider '{0}' must return a value from $get factory method.", t);
        return n
      }
    }

    function s(t, e, n) {
      return i(t, { $get: n !== !1 ? a(t, e) : e })
    }

    function c(t, e) {
      return s(t, ["$injector", function(t) {
        return t.instantiate(e)
      }])
    }

    function l(t, e) {
      return s(t, v(e), !1)
    }

    function f(t, e) {
      ae(t, "constant"), A[t] = e, E[t] = e
    }

    function h(t, e) {
      var n = k.get(t + b), r = n.$get;
      n.$get = function() {
        var t = O.invoke(r, n);
        return O.invoke(e, null, { $delegate: t })
      }
    }

    function p(t) {
      var e, n = [];
      return o(t, function(t) {
        function r(t) {
          var e, n;
          for (e = 0, n = t.length; n > e; e++) {
            var r = t[e], i = k.get(r[0]);
            i[r[1]].apply(i, r[2])
          }
        }

        if (!C.get(t)) {
          C.put(t, !0);
          try {
            w(t) ? (e = ei(t), n = n.concat(p(e.requires)).concat(e._runBlocks), r(e._invokeQueue), r(e._configBlocks)) : S(t) ? n.push(k.invoke(t)) : li(t) ? n.push(k.invoke(t)) : oe(t, "module")
          } catch (i) {
            throw li(t) && (t = t[t.length - 1]), i.message && i.stack && -1 == i.stack.indexOf(i.message) && (i = i.message + "\n" + i.stack), Bi("modulerr", "Failed to instantiate module {0} due to:\n{1}", t, i.stack || i.message || i)
          }
        }
      }), n
    }

    function d(t, n) {
      function r(e, r) {
        if (t.hasOwnProperty(e)) {
          if (t[e] === g)throw Bi("cdep", "Circular dependency found: {0}", e + " <- " + x.join(" <- "));
          return t[e]
        }
        try {
          return x.unshift(e), t[e] = g, t[e] = n(e, r)
        } catch (i) {
          throw t[e] === g && delete t[e], i
        } finally {
          x.shift()
        }
      }

      function i(t, n, i, o) {
        "string" == typeof i && (o = i, i = null);
        var a, s, u, c = [], l = Le(t, e, o);
        for (s = 0, a = l.length; a > s; s++) {
          if (u = l[s], "string" != typeof u)throw Bi("itkn", "Incorrect injection token! Expected service name as string, got {0}", u);
          c.push(i && i.hasOwnProperty(u) ? i[u] : r(u, o))
        }
        return li(t) && (t = t[a]), t.apply(n, c)
      }

      function o(t, e, n) {
        var r = Object.create((li(t) ? t[t.length - 1] : t).prototype), o = i(t, r, e, n);
        return y(o) || S(o) ? o : r
      }

      return {
        invoke: i, instantiate: o, get: r, annotate: Le, has: function(e) {
          return A.hasOwnProperty(e + b) || t.hasOwnProperty(e)
        }
      }
    }

    e = e === !0;
    var g = {}, b = "Provider", x = [], C = new Fe([], !0), A = {
      $provide: {
        provider: r(i),
        factory: r(s),
        service: r(c),
        value: r(l),
        constant: r(f),
        decorator: h
      }
    }, k = A.$injector = d(A, function(t, e) {
      throw si.isString(e) && x.push(e), Bi("unpr", "Unknown provider: {0}", x.join(" <- "))
    }), E = {}, O = E.$injector = d(E, function(t, e) {
      var r = k.get(t + b, e);
      return O.invoke(r.$get, r, n, t)
    });
    return o(p(t), function(t) {
      O.invoke(t || $)
    }), O
  }

  function ze() {
    var t = !0;
    this.disableAutoScrolling = function() {
      t = !1
    }, this.$get = ["$window", "$location", "$rootScope", function(e, n, r) {
      function i(t) {
        var e = null;
        return Array.prototype.some.call(t, function(t) {
          return "a" === D(t) ? (e = t, !0) : void 0
        }), e
      }

      function o() {
        var t = s.yOffset;
        if (S(t))t = t(); else if (N(t)) {
          var n = t[0], r = e.getComputedStyle(n);
          t = "fixed" !== r.position ? 0 : n.getBoundingClientRect().bottom
        } else b(t) || (t = 0);
        return t
      }

      function a(t) {
        if (t) {
          t.scrollIntoView();
          var n = o();
          if (n) {
            var r = t.getBoundingClientRect().top;
            e.scrollBy(0, r - n)
          }
        } else e.scrollTo(0, 0)
      }

      function s() {
        var t, e = n.hash();
        e ? (t = u.getElementById(e)) ? a(t) : (t = i(u.getElementsByName(e))) ? a(t) : "top" === e && a(null) : a(null)
      }

      var u = e.document;
      return t && r.$watch(function() {
        return n.hash()
      }, function(t, e) {
        (t !== e || "" !== t) && Pe(function() {
          r.$evalAsync(s)
        })
      }), s
    }]
  }

  function We() {
    this.$get = ["$$rAF", "$timeout", function(t, e) {
      return t.supported ? function(e) {
        return t(e)
      } : function(t) {
        return e(t, 0, !1)
      }
    }]
  }

  function Ge(t, e, r, i) {
    function a(t) {
      try {
        t.apply(null, _(arguments, 1))
      } finally {
        if (S--, 0 === S)for (; C.length;)try {
          C.pop()()
        } catch (e) {
          r.error(e)
        }
      }
    }

    function s(t) {
      var e = t.indexOf("#");
      return -1 === e ? "" : t.substr(e + 1)
    }

    function u(t, e) {
      !function n() {
        o(k, function(t) {
          t()
        }), A = e(n, t)
      }()
    }

    function c() {
      l(), f()
    }

    function l() {
      E = t.history.state, E = m(E) ? null : E, I(E, D) && (E = D), D = E
    }

    function f() {
      (T !== p.url() || O !== E) && (T = p.url(), O = E, o(N, function(t) {
        t(p.url(), E)
      }))
    }

    function h(t) {
      try {
        return decodeURIComponent(t)
      } catch (e) {
        return t
      }
    }

    var p = this, d = e[0], v = t.location, g = t.history, y = t.setTimeout, b = t.clearTimeout, x = {};
    p.isMock = !1;
    var S = 0, C = [];
    p.$$completeOutstandingRequest = a, p.$$incOutstandingRequestCount = function() {
      S++
    }, p.notifyWhenNoOutstandingRequests = function(t) {
      o(k, function(t) {
        t()
      }), 0 === S ? t() : C.push(t)
    };
    var A, k = [];
    p.addPollFn = function(t) {
      return m(A) && u(100, y), k.push(t), t
    };
    var E, O, T = v.href, M = e.find("base"), V = null;
    l(), O = E, p.url = function(e, n, r) {
      if (m(r) && (r = null), v !== t.location && (v = t.location), g !== t.history && (g = t.history), e) {
        var o = O === r;
        if (T === e && (!i.history || o))return p;
        var a = T && xn(T) === xn(e);
        return T = e, O = r, !i.history || a && o ? (a || (V = e), n ? v.replace(e) : a ? v.hash = s(e) : v.href = e) : (g[n ? "replaceState" : "pushState"](r, "", e), l(), O = E), p
      }
      return V || v.href.replace(/%27/g, "'")
    }, p.state = function() {
      return E
    };
    var N = [], j = !1, D = null;
    p.onUrlChange = function(e) {
      return j || (i.history && Qr(t).on("popstate", c), Qr(t).on("hashchange", c), j = !0), N.push(e), e
    }, p.$$checkUrlChange = f, p.baseHref = function() {
      var t = M.attr("href");
      return t ? t.replace(/^(https?\:)?\/\/[^\/]*/, "") : ""
    };
    var P = {}, R = "", q = p.baseHref();
    p.cookies = function(t, e) {
      var i, o, a, s, u;
      if (!t) {
        if (d.cookie !== R)for (R = d.cookie, o = R.split("; "), P = {}, s = 0; s < o.length; s++)a = o[s], u = a.indexOf("="), u > 0 && (t = h(a.substring(0, u)), P[t] === n && (P[t] = h(a.substring(u + 1))));
        return P
      }
      e === n ? d.cookie = encodeURIComponent(t) + "=;path=" + q + ";expires=Thu, 01 Jan 1970 00:00:00 GMT" : w(e) && (i = (d.cookie = encodeURIComponent(t) + "=" + encodeURIComponent(e) + ";path=" + q).length + 1, i > 4096 && r.warn("Cookie '" + t + "' possibly not set or overflowed because it was too large (" + i + " > 4096 bytes)!"))
    }, p.defer = function(t, e) {
      var n;
      return S++, n = y(function() {
        delete x[n], a(t)
      }, e || 0), x[n] = !0, n
    }, p.defer.cancel = function(t) {
      return x[t] ? (delete x[t], b(t), a($), !0) : !1
    }
  }

  function Je() {
    this.$get = ["$window", "$log", "$sniffer", "$document", function(t, e, n, r) {
      return new Ge(t, r, e, n)
    }]
  }

  function Ye() {
    this.$get = function() {
      function t(t, n) {
        function i(t) {
          t != h && (p ? p == t && (p = t.n) : p = t, o(t.n, t.p), o(t, h), h = t, h.n = null)
        }

        function o(t, e) {
          t != e && (t && (t.p = e), e && (e.n = t))
        }

        if (t in e)throw r("$cacheFactory")("iid", "CacheId '{0}' is already taken!", t);
        var a = 0, s = f({}, n, { id: t }), u = {}, c = n && n.capacity || Number.MAX_VALUE, l = {}, h = null, p = null;
        return e[t] = {
          put: function(t, e) {
            if (c < Number.MAX_VALUE) {
              var n = l[t] || (l[t] = { key: t });
              i(n)
            }
            if (!m(e))return t in u || a++, u[t] = e, a > c && this.remove(p.key), e
          }, get: function(t) {
            if (c < Number.MAX_VALUE) {
              var e = l[t];
              if (!e)return;
              i(e)
            }
            return u[t]
          }, remove: function(t) {
            if (c < Number.MAX_VALUE) {
              var e = l[t];
              if (!e)return;
              e == h && (h = e.p), e == p && (p = e.n), o(e.n, e.p), delete l[t]
            }
            delete u[t], a--
          }, removeAll: function() {
            u = {}, a = 0, l = {}, h = p = null
          }, destroy: function() {
            u = null, s = null, l = null, delete e[t]
          }, info: function() {
            return f({}, s, { size: a })
          }
        }
      }

      var e = {};
      return t.info = function() {
        var t = {};
        return o(e, function(e, n) {
          t[n] = e.info()
        }), t
      }, t.get = function(t) {
        return e[t]
      }, t
    }
  }

  function Ze() {
    this.$get = ["$cacheFactory", function(t) {
      return t("templates")
    }]
  }

  function Ke(t, r) {
    function i(t, e) {
      var n = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/, r = {};
      return o(t, function(t, i) {
        var o = t.match(n);
        if (!o)throw Gi("iscp", "Invalid isolate scope definition for directive '{0}'. Definition: {... {1}: '{2}' ...}", e, i, t);
        r[i] = { mode: o[1][0], collection: "*" === o[2], optional: "?" === o[3], attrName: o[4] || i }
      }), r
    }

    var a = {}, s = "Directive", c = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/, l = /(([\w\-]+)(?:\:([^;]+))?;?)/, h = j("ngSrc,ngSrcset,src,srcset"), m = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/, b = /^(on[a-z]+|formaction)$/;
    this.directive = function C(e, n) {
      return ae(e, "directive"), w(e) ? (ie(n, "directiveFactory"), a.hasOwnProperty(e) || (a[e] = [], t.factory(e + s, ["$injector", "$exceptionHandler", function(t, n) {
        var r = [];
        return o(a[e], function(o, a) {
          try {
            var s = t.invoke(o);
            S(s) ? s = { compile: v(s) } : !s.compile && s.link && (s.compile = v(s.link)), s.priority = s.priority || 0, s.index = a, s.name = s.name || e, s.require = s.require || s.controller && s.name, s.restrict = s.restrict || "EA", y(s.scope) && (s.$$isolateBindings = i(s.scope, s.name)), r.push(s)
          } catch (u) {
            n(u)
          }
        }), r
      }])), a[e].push(n)) : o(e, u(C)), this
    }, this.aHrefSanitizationWhitelist = function(t) {
      return g(t) ? (r.aHrefSanitizationWhitelist(t), this) : r.aHrefSanitizationWhitelist()
    }, this.imgSrcSanitizationWhitelist = function(t) {
      return g(t) ? (r.imgSrcSanitizationWhitelist(t), this) : r.imgSrcSanitizationWhitelist()
    };
    var x = !0;
    this.debugInfoEnabled = function(t) {
      return g(t) ? (x = t, this) : x
    }, this.$get = ["$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$document", "$sce", "$animate", "$$sanitizeUri", function(t, r, i, u, v, g, C, A, E, O, T) {
      function M(t, e) {
        try {
          t.addClass(e)
        } catch (n) {
        }
      }

      function V(t, e, n, r, i) {
        t instanceof Qr || (t = Qr(t)), o(t, function(e, n) {
          e.nodeType == gi && e.nodeValue.match(/\S+/) && (t[n] = Qr(e).wrap("<span></span>").parent()[0])
        });
        var a = j(t, e, t, n, r, i);
        V.$$addScopeClass(t);
        var s = null;
        return function(e, n, r) {
          ie(e, "scope"), r = r || {};
          var i = r.parentBoundTranscludeFn, o = r.transcludeControllers, u = r.futureParentElement;
          i && i.$$boundTransclude && (i = i.$$boundTransclude), s || (s = N(u));
          var c;
          if (c = "html" !== s ? Qr(X(s, Qr("<div>").append(t).html())) : n ? Ri.clone.call(t) : t, o)for (var l in o)c.data("$" + l + "Controller", o[l].instance);
          return V.$$addScopeInfo(c, e), n && n(c, e), a && a(e, c, c, i), c
        }
      }

      function N(t) {
        var e = t && t[0];
        return e && "foreignobject" !== D(e) && e.toString().match(/SVG/) ? "svg" : "html"
      }

      function j(t, e, r, i, o, a) {
        function s(t, r, i, o) {
          var a, s, u, c, l, f, h, p, v;
          if ($) {
            var m = r.length;
            for (v = new Array(m), l = 0; l < d.length; l += 3)h = d[l], v[h] = r[h]
          } else v = r;
          for (l = 0, f = d.length; f > l;)u = v[d[l++]], a = d[l++], s = d[l++], a ? (a.scope ? (c = t.$new(), V.$$addScopeInfo(Qr(u), c)) : c = t, p = a.transcludeOnThisElement ? R(t, a.transclude, o, a.elementTranscludeOnThisElement) : !a.templateOnThisElement && o ? o : !o && e ? R(t, e) : null, a(s, c, u, i, p)) : s && s(t, u.childNodes, n, o)
        }

        for (var u, c, l, f, h, p, $, d = [], v = 0; v < t.length; v++)u = new ae, c = q(t[v], [], u, 0 === v ? i : n, o), l = c.length ? H(c, t[v], u, e, r, null, [], [], a) : null, l && l.scope && V.$$addScopeClass(u.$$element), h = l && l.terminal || !(f = t[v].childNodes) || !f.length ? null : j(f, l ? (l.transcludeOnThisElement || !l.templateOnThisElement) && l.transclude : e), (l || h) && (d.push(v, l, h), p = !0, $ = $ || l), a = null;
        return p ? s : null
      }

      function R(t, e, n) {
        var r = function(r, i, o, a, s) {
          return r || (r = t.$new(!1, s), r.$$transcluded = !0), e(r, i, {
            parentBoundTranscludeFn: n,
            transcludeControllers: o,
            futureParentElement: a
          })
        };
        return r
      }

      function q(t, e, n, r, i) {
        var o, a, s = t.nodeType, u = n.$attr;
        switch (s) {
          case mi:
            B(e, Xe(D(t)), "E", r, i);
            for (var f, h, p, $, d, v, m = t.attributes, g = 0, y = m && m.length; y > g; g++) {
              var b = !1, x = !1;
              f = m[g], h = f.name, d = fi(f.value), $ = Xe(h), (v = fe.test($)) && (h = h.replace(Ji, "").substr(8).replace(/_(.)/g, function(t, e) {
                return e.toUpperCase()
              }));
              var S = $.replace(/(Start|End)$/, "");
              W(S) && $ === S + "Start" && (b = h, x = h.substr(0, h.length - 5) + "end", h = h.substr(0, h.length - 6)), p = Xe(h.toLowerCase()), u[p] = h, (v || !n.hasOwnProperty(p)) && (n[p] = d, Re(t, p) && (n[p] = !0)), te(t, e, d, p, v), B(e, p, "A", r, i, b, x)
            }
            if (a = t.className, w(a) && "" !== a)for (; o = l.exec(a);)p = Xe(o[2]), B(e, p, "C", r, i) && (n[p] = fi(o[3])), a = a.substr(o.index + o[0].length);
            break;
          case gi:
            K(e, t.nodeValue);
            break;
          case yi:
            try {
              o = c.exec(t.nodeValue), o && (p = Xe(o[1]), B(e, p, "M", r, i) && (n[p] = fi(o[2])))
            } catch (C) {
            }
        }
        return e.sort(Y), e
      }

      function U(t, e, n) {
        var r = [], i = 0;
        if (e && t.hasAttribute && t.hasAttribute(e)) {
          do {
            if (!t)throw Gi("uterdir", "Unterminated attribute, found '{0}' but no matching '{1}' found.", e, n);
            t.nodeType == mi && (t.hasAttribute(e) && i++, t.hasAttribute(n) && i--), r.push(t), t = t.nextSibling
          } while (i > 0)
        } else r.push(t);
        return Qr(r)
      }

      function F(t, e, n) {
        return function(r, i, o, a, s) {
          return i = U(i[0], e, n), t(r, i, o, a, s)
        }
      }

      function H(t, a, s, u, c, l, f, h, p) {
        function $(t, e, n, r) {
          t && (n && (t = F(t, n, r)), t.require = A.require, t.directiveName = E, (D === A || A.$$isolateScope) && (t = re(t, { isolateScope: !0 })), f.push(t)), e && (n && (e = F(e, n, r)), e.require = A.require, e.directiveName = E, (D === A || A.$$isolateScope) && (e = re(e, { isolateScope: !0 })), h.push(e))
        }

        function d(t, e, n, r) {
          var i, a, s = "data", u = !1, c = n;
          if (w(e)) {
            if (a = e.match(m), e = e.substring(a[0].length), a[3] && (a[1] ? a[3] = null : a[1] = a[3]), "^" === a[1] ? s = "inheritedData" : "^^" === a[1] && (s = "inheritedData", c = n.parent()), "?" === a[2] && (u = !0), i = null, r && "data" === s && (i = r[e]) && (i = i.instance), i = i || c[s]("$" + e + "Controller"), !i && !u)throw Gi("ctreq", "Controller '{0}', required by directive '{1}', can't be found!", e, t);
            return i || null
          }
          return li(e) && (i = [], o(e, function(e) {
            i.push(d(t, e, n, r))
          })), i
        }

        function b(t, e, i, u, c) {
          function l(t, e, r) {
            var i;
            return k(t) || (r = e, e = t, t = n), W && (i = b), r || (r = W ? S.parent() : S), c(t, e, i, r, T)
          }

          var p, $, m, y, w, b, x, S, A;
          if (a === i ? (A = s, S = s.$$element) : (S = Qr(i), A = new ae(S, s)), D && (w = e.$new(!0)), c && (x = l, x.$$boundTransclude = c), j && (C = {}, b = {}, o(j, function(t) {
              var n, r = { $scope: t === D || t.$$isolateScope ? w : e, $element: S, $attrs: A, $transclude: x };
              y = t.controller, "@" == y && (y = A[t.name]), n = g(y, r, !0, t.controllerAs), b[t.name] = n, W || S.data("$" + t.name + "Controller", n.instance), C[t.name] = n
            })), D) {
            V.$$addScopeInfo(S, w, !0, !(P && (P === D || P === D.$$originalDirective))), V.$$addScopeClass(S, !0);
            var E = C && C[D.name], O = w;
            E && E.identifier && D.bindToController === !0 && (O = E.instance), o(w.$$isolateBindings = D.$$isolateBindings, function(t, n) {
              var i, o, a, s, u = t.attrName, c = t.optional, l = t.mode;
              switch (l) {
                case"@":
                  A.$observe(u, function(t) {
                    O[n] = t
                  }), A.$$observers[u].$$scope = e, A[u] && (O[n] = r(A[u])(e));
                  break;
                case"=":
                  if (c && !A[u])return;
                  o = v(A[u]), s = o.literal ? I : function(t, e) {
                    return t === e || t !== t && e !== e
                  }, a = o.assign || function() {
                      throw i = O[n] = o(e), Gi("nonassign", "Expression '{0}' used with directive '{1}' is non-assignable!", A[u], D.name)
                    }, i = O[n] = o(e);
                  var f = function(t) {
                    return s(t, O[n]) || (s(t, i) ? a(e, t = O[n]) : O[n] = t), i = t
                  };
                  f.$stateful = !0;
                  var h;
                  h = t.collection ? e.$watchCollection(A[u], f) : e.$watch(v(A[u], f), null, o.literal), w.$on("$destroy", h);
                  break;
                case"&":
                  o = v(A[u]), O[n] = function(t) {
                    return o(e, t)
                  }
              }
            })
          }
          for (C && (o(C, function(t) {
            t()
          }), C = null), p = 0, $ = f.length; $ > p; p++)m = f[p], oe(m, m.isolateScope ? w : e, S, A, m.require && d(m.directiveName, m.require, S, b), x);
          var T = e;
          for (D && (D.template || null === D.templateUrl) && (T = w), t && t(T, i.childNodes, n, c), p = h.length - 1; p >= 0; p--)m = h[p], oe(m, m.isolateScope ? w : e, S, A, m.require && d(m.directiveName, m.require, S, b), x)
        }

        p = p || {};
        for (var x, C, A, E, O, T, M, N = -Number.MAX_VALUE, j = p.controllerDirectives, D = p.newIsolateScopeDirective, P = p.templateDirective, R = p.nonTlbTranscludeDirective, H = !1, B = !1, W = p.hasElementTranscludeDirective, Y = s.$$element = Qr(a), K = l, Q = u, te = 0, ne = t.length; ne > te; te++) {
          A = t[te];
          var ie = A.$$start, se = A.$$end;
          if (ie && (Y = U(a, ie, se)), O = n, N > A.priority)break;
          if ((M = A.scope) && (A.templateUrl || (y(M) ? (Z("new/isolated scope", D || x, A, Y), D = A) : Z("new/isolated scope", D, A, Y)), x = x || A), E = A.name, !A.templateUrl && A.controller && (M = A.controller, j = j || {}, Z("'" + E + "' controller", j[E], A, Y), j[E] = A), (M = A.transclude) && (H = !0, A.$$tlb || (Z("transclusion", R, A, Y), R = A), "element" == M ? (W = !0, N = A.priority, O = Y, Y = s.$$element = Qr(e.createComment(" " + E + ": " + s[E] + " ")), a = Y[0], ee(c, _(O), a), Q = V(O, u, N, K && K.name, { nonTlbTranscludeDirective: R })) : (O = Qr(be(a)).contents(), Y.empty(), Q = V(O, u))), A.template)if (B = !0, Z("template", P, A, Y), P = A, M = S(A.template) ? A.template(Y, s) : A.template, M = le(M), A.replace) {
            if (K = A, O = ve(M) ? [] : tn(X(A.templateNamespace, fi(M))), a = O[0], 1 != O.length || a.nodeType !== mi)throw Gi("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", E, "");
            ee(c, Y, a);
            var ue = { $attr: {} }, ce = q(a, [], ue), fe = t.splice(te + 1, t.length - (te + 1));
            D && L(ce), t = t.concat(ce).concat(fe), G(s, ue), ne = t.length
          } else Y.html(M);
          if (A.templateUrl)B = !0, Z("template", P, A, Y), P = A, A.replace && (K = A), b = J(t.splice(te, t.length - te), Y, s, c, H && Q, f, h, {
            controllerDirectives: j,
            newIsolateScopeDirective: D,
            templateDirective: P,
            nonTlbTranscludeDirective: R
          }), ne = t.length; else if (A.compile)try {
            T = A.compile(Y, s, Q), S(T) ? $(null, T, ie, se) : T && $(T.pre, T.post, ie, se)
          } catch (he) {
            i(he, z(Y))
          }
          A.terminal && (b.terminal = !0, N = Math.max(N, A.priority))
        }
        return b.scope = x && x.scope === !0, b.transcludeOnThisElement = H, b.elementTranscludeOnThisElement = W, b.templateOnThisElement = B, b.transclude = Q, p.hasElementTranscludeDirective = W, b
      }

      function L(t) {
        for (var e = 0, n = t.length; n > e; e++)t[e] = p(t[e], { $$isolateScope: !0 })
      }

      function B(e, r, o, u, c, l, f) {
        if (r === c)return null;
        var h = null;
        if (a.hasOwnProperty(r))for (var $, d = t.get(r + s), v = 0, m = d.length; m > v; v++)try {
          $ = d[v], (u === n || u > $.priority) && -1 != $.restrict.indexOf(o) && (l && ($ = p($, {
            $$start: l,
            $$end: f
          })), e.push($), h = $)
        } catch (g) {
          i(g)
        }
        return h
      }

      function W(e) {
        if (a.hasOwnProperty(e))for (var n, r = t.get(e + s), i = 0, o = r.length; o > i; i++)if (n = r[i], n.multiElement)return !0;
        return !1
      }

      function G(t, e) {
        var n = e.$attr, r = t.$attr, i = t.$$element;
        o(t, function(r, i) {
          "$" != i.charAt(0) && (e[i] && e[i] !== r && (r += ("style" === i ? ";" : " ") + e[i]), t.$set(i, r, !0, n[i]))
        }), o(e, function(e, o) {
          "class" == o ? (M(i, e), t["class"] = (t["class"] ? t["class"] + " " : "") + e) : "style" == o ? (i.attr("style", i.attr("style") + ";" + e), t.style = (t.style ? t.style + ";" : "") + e) : "$" == o.charAt(0) || t.hasOwnProperty(o) || (t[o] = e, r[o] = n[o])
        })
      }

      function J(t, e, n, r, i, a, s, c) {
        var l, h, p = [], $ = e[0], d = t.shift(), v = f({}, d, {
          templateUrl: null,
          transclude: null,
          replace: null,
          $$originalDirective: d
        }), m = S(d.templateUrl) ? d.templateUrl(e, n) : d.templateUrl, g = d.templateNamespace;
        return e.empty(), u(E.getTrustedResourceUrl(m)).then(function(u) {
          var f, w, b, x;
          if (u = le(u), d.replace) {
            if (b = ve(u) ? [] : tn(X(g, fi(u))), f = b[0], 1 != b.length || f.nodeType !== mi)throw Gi("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", d.name, m);
            w = { $attr: {} }, ee(r, e, f);
            var S = q(f, [], w);
            y(d.scope) && L(S), t = S.concat(t), G(n, w)
          } else f = $, e.html(u);
          for (t.unshift(v), l = H(t, f, n, i, e, d, a, s, c), o(r, function(t, n) {
            t == f && (r[n] = e[0])
          }), h = j(e[0].childNodes, i); p.length;) {
            var C = p.shift(), A = p.shift(), k = p.shift(), E = p.shift(), O = e[0];
            if (!C.$$destroyed) {
              if (A !== $) {
                var T = A.className;
                c.hasElementTranscludeDirective && d.replace || (O = be(f)), ee(k, Qr(A), O), M(Qr(O), T)
              }
              x = l.transcludeOnThisElement ? R(C, l.transclude, E) : E, l(h, C, O, r, x)
            }
          }
          p = null
        }), function(t, e, n, r, i) {
          var o = i;
          e.$$destroyed || (p ? p.push(e, n, r, o) : (l.transcludeOnThisElement && (o = R(e, l.transclude, i)), l(h, e, n, r, o)))
        }
      }

      function Y(t, e) {
        var n = e.priority - t.priority;
        return 0 !== n ? n : t.name !== e.name ? t.name < e.name ? -1 : 1 : t.index - e.index
      }

      function Z(t, e, n, r) {
        if (e)throw Gi("multidir", "Multiple directives [{0}, {1}] asking for {2} on: {3}", e.name, n.name, t, z(r))
      }

      function K(t, e) {
        var n = r(e, !0);
        n && t.push({
          priority: 0, compile: function(t) {
            var e = t.parent(), r = !!e.length;
            return r && V.$$addBindingClass(e), function(t, e) {
              var i = e.parent();
              r || V.$$addBindingClass(i), V.$$addBindingInfo(i, n.expressions), t.$watch(n, function(t) {
                e[0].nodeValue = t
              })
            }
          }
        })
      }

      function X(t, n) {
        switch (t = Gr(t || "html")) {
          case"svg":
          case"math":
            var r = e.createElement("div");
            return r.innerHTML = "<" + t + ">" + n + "</" + t + ">", r.childNodes[0].childNodes;
          default:
            return n
        }
      }

      function Q(t, e) {
        if ("srcdoc" == e)return E.HTML;
        var n = D(t);
        return "xlinkHref" == e || "form" == n && "action" == e || "img" != n && ("src" == e || "ngSrc" == e) ? E.RESOURCE_URL : void 0
      }

      function te(t, e, n, i, o) {
        var a = Q(t, i);
        o = h[i] || o;
        var s = r(n, !0, a, o);
        if (s) {
          if ("multiple" === i && "select" === D(t))throw Gi("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", z(t));
          e.push({
            priority: 100, compile: function() {
              return {
                pre: function(t, e, u) {
                  var c = u.$$observers || (u.$$observers = {});
                  if (b.test(i))throw Gi("nodomevents", "Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");
                  var l = u[i];
                  l !== n && (s = l && r(l, !0, a, o), n = l), s && (u[i] = s(t), (c[i] || (c[i] = [])).$$inter = !0, (u.$$observers && u.$$observers[i].$$scope || t).$watch(s, function(t, e) {
                    "class" === i && t != e ? u.$updateClass(t, e) : u.$set(i, t)
                  }))
                }
              }
            }
          })
        }
      }

      function ee(t, n, r) {
        var i, o, a = n[0], s = n.length, u = a.parentNode;
        if (t)for (i = 0, o = t.length; o > i; i++)if (t[i] == a) {
          t[i++] = r;
          for (var c = i, l = c + s - 1, f = t.length; f > c; c++, l++)f > l ? t[c] = t[l] : delete t[c];
          t.length -= s - 1, t.context === a && (t.context = r);
          break
        }
        u && u.replaceChild(r, a);
        var h = e.createDocumentFragment();
        h.appendChild(a), Qr(r).data(Qr(a).data()), ti ? (ci = !0, ti.cleanData([a])) : delete Qr.cache[a[Qr.expando]];
        for (var p = 1, $ = n.length; $ > p; p++) {
          var d = n[p];
          Qr(d).remove(), h.appendChild(d), delete n[p]
        }
        n[0] = r, n.length = 1
      }

      function re(t, e) {
        return f(function() {
          return t.apply(null, arguments)
        }, t, e)
      }

      function oe(t, e, n, r, o, a) {
        try {
          t(e, n, r, o, a)
        } catch (s) {
          i(s, z(n))
        }
      }

      var ae = function(t, e) {
        if (e) {
          var n, r, i, o = Object.keys(e);
          for (n = 0, r = o.length; r > n; n++)i = o[n], this[i] = e[i]
        } else this.$attr = {};
        this.$$element = t
      };
      ae.prototype = {
        $normalize: Xe, $addClass: function(t) {
          t && t.length > 0 && O.addClass(this.$$element, t)
        }, $removeClass: function(t) {
          t && t.length > 0 && O.removeClass(this.$$element, t)
        }, $updateClass: function(t, e) {
          var n = Qe(t, e);
          n && n.length && O.addClass(this.$$element, n);
          var r = Qe(e, t);
          r && r.length && O.removeClass(this.$$element, r)
        }, $set: function(t, e, r, a) {
          var s, u = this.$$element[0], c = Re(u, t), l = qe(u, t), f = t;
          if (c ? (this.$$element.prop(t, e), a = c) : l && (this[l] = e, f = l), this[t] = e, a ? this.$attr[t] = a : (a = this.$attr[t], a || (this.$attr[t] = a = ne(t, "-"))), s = D(this.$$element), "a" === s && "href" === t || "img" === s && "src" === t)this[t] = e = T(e, "src" === t); else if ("img" === s && "srcset" === t) {
            for (var h = "", p = fi(e), $ = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, d = /\s/.test(p) ? $ : /(,)/, v = p.split(d), m = Math.floor(v.length / 2), g = 0; m > g; g++) {
              var y = 2 * g;
              h += T(fi(v[y]), !0), h += " " + fi(v[y + 1])
            }
            var w = fi(v[2 * g]).split(/\s/);
            h += T(fi(w[0]), !0), 2 === w.length && (h += " " + fi(w[1])), this[t] = e = h
          }
          r !== !1 && (null === e || e === n ? this.$$element.removeAttr(a) : this.$$element.attr(a, e));
          var b = this.$$observers;
          b && o(b[f], function(t) {
            try {
              t(e)
            } catch (n) {
              i(n)
            }
          })
        }, $observe: function(t, e) {
          var n = this, r = n.$$observers || (n.$$observers = ce()), i = r[t] || (r[t] = []);
          return i.push(e), C.$evalAsync(function() {
            !i.$$inter && n.hasOwnProperty(t) && e(n[t])
          }), function() {
            P(i, e)
          }
        }
      };
      var se = r.startSymbol(), ue = r.endSymbol(), le = "{{" == se || "}}" == ue ? d : function(t) {
        return t.replace(/\{\{/g, se).replace(/}}/g, ue)
      }, fe = /^ngAttr[A-Z]/;
      return V.$$addBindingInfo = x ? function(t, e) {
        var n = t.data("$binding") || [];
        li(e) ? n = n.concat(e) : n.push(e), t.data("$binding", n)
      } : $, V.$$addBindingClass = x ? function(t) {
        M(t, "ng-binding")
      } : $, V.$$addScopeInfo = x ? function(t, e, n, r) {
        var i = n ? r ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope";
        t.data(i, e)
      } : $, V.$$addScopeClass = x ? function(t, e) {
        M(t, e ? "ng-isolate-scope" : "ng-scope")
      } : $, V
    }]
  }

  function Xe(t) {
    return de(t.replace(Ji, ""))
  }

  function Qe(t, e) {
    var n = "", r = t.split(/\s+/), i = e.split(/\s+/);
    t:for (var o = 0; o < r.length; o++) {
      for (var a = r[o], s = 0; s < i.length; s++)if (a == i[s])continue t;
      n += (n.length > 0 ? " " : "") + a
    }
    return n
  }

  function tn(t) {
    t = Qr(t);
    var e = t.length;
    if (1 >= e)return t;
    for (; e--;) {
      var n = t[e];
      n.nodeType === yi && ri.call(t, e, 1)
    }
    return t
  }

  function en() {
    var t = {}, e = !1, i = /^(\S+)(\s+as\s+(\w+))?$/;
    this.register = function(e, n) {
      ae(e, "controller"), y(e) ? f(t, e) : t[e] = n
    }, this.allowGlobals = function() {
      e = !0
    }, this.$get = ["$injector", "$window", function(o, a) {
      function s(t, e, n, i) {
        if (!t || !y(t.$scope))throw r("$controller")("noscp", "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", i, e);
        t.$scope[e] = n
      }

      return function(r, u, c, l) {
        var h, p, $, d;
        if (c = c === !0, l && w(l) && (d = l), w(r) && (p = r.match(i), $ = p[1], d = d || p[3], r = t.hasOwnProperty($) ? t[$] : se(u.$scope, $, !0) || (e ? se(a, $, !0) : n), oe(r, $, !0)), c) {
          var v = (li(r) ? r[r.length - 1] : r).prototype;
          return h = Object.create(v), d && s(u, d, h, $ || r.name), f(function() {
            return o.invoke(r, h, u, $), h
          }, { instance: h, identifier: d })
        }
        return h = o.instantiate(r, u, $), d && s(u, d, h, $ || r.name), h
      }
    }]
  }

  function nn() {
    this.$get = ["$window", function(t) {
      return Qr(t.document)
    }]
  }

  function rn() {
    this.$get = ["$log", function(t) {
      return function() {
        t.error.apply(t, arguments)
      }
    }]
  }

  function on(t, e) {
    if (w(t)) {
      var n = t.replace(Qi, "").trim();
      if (n) {
        var r = e("Content-Type");
        (r && 0 === r.indexOf(Yi) || an(n)) && (t = B(n))
      }
    }
    return t
  }

  function an(t) {
    var e = t.match(Ki);
    return e && Xi[e[0]].test(t)
  }

  function sn(t) {
    var e, n, r, i = ce();
    return t ? (o(t.split("\n"), function(t) {
      r = t.indexOf(":"), e = Gr(fi(t.substr(0, r))), n = fi(t.substr(r + 1)), e && (i[e] = i[e] ? i[e] + ", " + n : n)
    }), i) : i
  }

  function un(t) {
    var e = y(t) ? t : n;
    return function(n) {
      if (e || (e = sn(t)), n) {
        var r = e[Gr(n)];
        return void 0 === r && (r = null), r
      }
      return e
    }
  }

  function cn(t, e, n, r) {
    return S(r) ? r(t, e, n) : (o(r, function(r) {
      t = r(t, e, n)
    }), t)
  }

  function ln(t) {
    return t >= 200 && 300 > t
  }

  function fn() {
    var t = this.defaults = {
      transformResponse: [on],
      transformRequest: [function(t) {
        return !y(t) || E(t) || T(t) || O(t) ? t : L(t)
      }],
      headers: { common: { Accept: "application/json, text/plain, */*" }, post: q(Zi), put: q(Zi), patch: q(Zi) },
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN"
    }, e = !1;
    this.useApplyAsync = function(t) {
      return g(t) ? (e = !!t, this) : e
    };
    var i = this.interceptors = [];
    this.$get = ["$httpBackend", "$browser", "$cacheFactory", "$rootScope", "$q", "$injector", function(a, u, c, l, h, p) {
      function $(e) {
        function i(t) {
          var e = f({}, t);
          return e.data = t.data ? cn(t.data, t.headers, t.status, u.transformResponse) : t.data, ln(t.status) ? e : h.reject(e)
        }

        function a(t) {
          var e, n = {};
          return o(t, function(t, r) {
            S(t) ? (e = t(), null != e && (n[r] = e)) : n[r] = t
          }), n
        }

        function s(e) {
          var n, r, i, o = t.headers, s = f({}, e.headers);
          o = f({}, o.common, o[Gr(e.method)]);
          t:for (n in o) {
            r = Gr(n);
            for (i in s)if (Gr(i) === r)continue t;
            s[n] = o[n]
          }
          return a(s)
        }

        if (!si.isObject(e))throw r("$http")("badreq", "Http request configuration must be an object.  Received: {0}", e);
        var u = f({ method: "get", transformRequest: t.transformRequest, transformResponse: t.transformResponse }, e);
        u.headers = s(e), u.method = Yr(u.method);
        var c = function(e) {
          var r = e.headers, a = cn(e.data, un(r), n, e.transformRequest);
          return m(a) && o(r, function(t, e) {
            "content-type" === Gr(e) && delete r[e]
          }), m(e.withCredentials) && !m(t.withCredentials) && (e.withCredentials = t.withCredentials), b(e, a).then(i, i)
        }, l = [c, n], p = h.when(u);
        for (o(k, function(t) {
          (t.request || t.requestError) && l.unshift(t.request, t.requestError), (t.response || t.responseError) && l.push(t.response, t.responseError)
        }); l.length;) {
          var $ = l.shift(), d = l.shift();
          p = p.then($, d)
        }
        return p.success = function(t) {
          return p.then(function(e) {
            t(e.data, e.status, e.headers, u)
          }), p
        }, p.error = function(t) {
          return p.then(null, function(e) {
            t(e.data, e.status, e.headers, u)
          }), p
        }, p
      }

      function d() {
        o(arguments, function(t) {
          $[t] = function(e, n) {
            return $(f(n || {}, { method: t, url: e }))
          }
        })
      }

      function v() {
        o(arguments, function(t) {
          $[t] = function(e, n, r) {
            return $(f(r || {}, { method: t, url: e, data: n }))
          }
        })
      }

      function b(r, i) {
        function o(t, n, r, i) {
          function o() {
            s(n, t, r, i)
          }

          p && (ln(t) ? p.put(x, [t, n, sn(r), i]) : p.remove(x)), e ? l.$applyAsync(o) : (o(), l.$$phase || l.$apply())
        }

        function s(t, e, n, i) {
          e = Math.max(e, 0), (ln(e) ? v.resolve : v.reject)({
            data: t,
            status: e,
            headers: un(n),
            config: r,
            statusText: i
          })
        }

        function c(t) {
          s(t.data, t.status, q(t.headers()), t.statusText)
        }

        function f() {
          var t = $.pendingRequests.indexOf(r);
          -1 !== t && $.pendingRequests.splice(t, 1)
        }

        var p, d, v = h.defer(), w = v.promise, b = r.headers, x = C(r.url, r.params);
        if ($.pendingRequests.push(r), w.then(f, f), !r.cache && !t.cache || r.cache === !1 || "GET" !== r.method && "JSONP" !== r.method || (p = y(r.cache) ? r.cache : y(t.cache) ? t.cache : A), p && (d = p.get(x), g(d) ? V(d) ? d.then(c, c) : li(d) ? s(d[1], d[0], q(d[2]), d[3]) : s(d, 200, {}, "OK") : p.put(x, w)), m(d)) {
          var S = or(r.url) ? u.cookies()[r.xsrfCookieName || t.xsrfCookieName] : n;
          S && (b[r.xsrfHeaderName || t.xsrfHeaderName] = S), a(r.method, x, i, o, b, r.timeout, r.withCredentials, r.responseType)
        }
        return w
      }

      function C(t, e) {
        if (!e)return t;
        var n = [];
        return s(e, function(t, e) {
          null === t || m(t) || (li(t) || (t = [t]), o(t, function(t) {
            y(t) && (t = x(t) ? t.toISOString() : L(t)), n.push(Z(e) + "=" + Z(t))
          }))
        }), n.length > 0 && (t += (-1 == t.indexOf("?") ? "?" : "&") + n.join("&")), t
      }

      var A = c("$http"), k = [];
      return o(i, function(t) {
        k.unshift(w(t) ? p.get(t) : p.invoke(t))
      }), $.pendingRequests = [], d("get", "delete", "head", "jsonp"), v("post", "put", "patch"), $.defaults = t, $
    }]
  }

  function hn() {
    return new t.XMLHttpRequest
  }

  function pn() {
    this.$get = ["$browser", "$window", "$document", function(t, e, n) {
      return $n(t, hn, t.defer, e.angular.callbacks, n[0])
    }]
  }

  function $n(t, e, r, i, a) {
    function s(t, e, n) {
      var r = a.createElement("script"), o = null;
      return r.type = "text/javascript", r.src = t, r.async = !0, o = function(t) {
        ki(r, "load", o), ki(r, "error", o), a.body.removeChild(r), r = null;
        var s = -1, u = "unknown";
        t && ("load" !== t.type || i[e].called || (t = { type: "error" }), u = t.type, s = "error" === t.type ? 404 : 200), n && n(s, u)
      }, Ai(r, "load", o), Ai(r, "error", o), a.body.appendChild(r), o
    }

    return function(a, u, c, l, f, h, p, d) {
      function v() {
        w && w(), b && b.abort()
      }

      function m(e, i, o, a, s) {
        C !== n && r.cancel(C), w = b = null, e(i, o, a, s), t.$$completeOutstandingRequest($)
      }

      if (t.$$incOutstandingRequestCount(), u = u || t.url(), "jsonp" == Gr(a)) {
        var y = "_" + (i.counter++).toString(36);
        i[y] = function(t) {
          i[y].data = t, i[y].called = !0
        };
        var w = s(u.replace("JSON_CALLBACK", "angular.callbacks." + y), y, function(t, e) {
          m(l, t, i[y].data, "", e), i[y] = $
        })
      } else {
        var b = e();
        b.open(a, u, !0), o(f, function(t, e) {
          g(t) && b.setRequestHeader(e, t)
        }), b.onload = function() {
          var t = b.statusText || "", e = "response" in b ? b.response : b.responseText, n = 1223 === b.status ? 204 : b.status;
          0 === n && (n = e ? 200 : "file" == ir(u).protocol ? 404 : 0), m(l, n, e, b.getAllResponseHeaders(), t)
        };
        var x = function() {
          m(l, -1, null, null, "")
        };
        if (b.onerror = x, b.onabort = x, p && (b.withCredentials = !0), d)try {
          b.responseType = d
        } catch (S) {
          if ("json" !== d)throw S
        }
        b.send(c || null)
      }
      if (h > 0)var C = r(v, h); else V(h) && h.then(v)
    }
  }

  function dn() {
    var t = "{{", e = "}}";
    this.startSymbol = function(e) {
      return e ? (t = e, this) : t
    }, this.endSymbol = function(t) {
      return t ? (e = t, this) : e
    }, this.$get = ["$parse", "$exceptionHandler", "$sce", function(n, r, i) {
      function o(t) {
        return "\\\\\\" + t
      }

      function a(o, a, h, p) {
        function $(n) {
          return n.replace(c, t).replace(l, e)
        }

        function d(t) {
          try {
            return t = T(t), p && !g(t) ? t : M(t)
          } catch (e) {
            var n = to("interr", "Can't interpolate: {0}\n{1}", o, e.toString());
            r(n)
          }
        }

        p = !!p;
        for (var v, y, w, b = 0, x = [], C = [], A = o.length, k = [], E = []; A > b;) {
          if (-1 == (v = o.indexOf(t, b)) || -1 == (y = o.indexOf(e, v + s))) {
            b !== A && k.push($(o.substring(b)));
            break
          }
          b !== v && k.push($(o.substring(b, v))), w = o.substring(v + s, y), x.push(w), C.push(n(w, d)), b = y + u, E.push(k.length), k.push("")
        }
        if (h && k.length > 1)throw to("noconcat", "Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce", o);
        if (!a || x.length) {
          var O = function(t) {
            for (var e = 0, n = x.length; n > e; e++) {
              if (p && m(t[e]))return;
              k[E[e]] = t[e]
            }
            return k.join("")
          }, T = function(t) {
            return h ? i.getTrusted(h, t) : i.valueOf(t)
          }, M = function(t) {
            if (null == t)return "";
            switch (typeof t) {
              case"string":
                break;
              case"number":
                t = "" + t;
                break;
              default:
                t = L(t)
            }
            return t
          };
          return f(function(t) {
            var e = 0, n = x.length, i = new Array(n);
            try {
              for (; n > e; e++)i[e] = C[e](t);
              return O(i)
            } catch (a) {
              var s = to("interr", "Can't interpolate: {0}\n{1}", o, a.toString());
              r(s)
            }
          }, {
            exp: o, expressions: x, $$watchDelegate: function(t, e, n) {
              var r;
              return t.$watchGroup(C, function(n, i) {
                var o = O(n);
                S(e) && e.call(this, o, n !== i ? r : o, t), r = o
              }, n)
            }
          })
        }
      }

      var s = t.length, u = e.length, c = new RegExp(t.replace(/./g, o), "g"), l = new RegExp(e.replace(/./g, o), "g");
      return a.startSymbol = function() {
        return t
      }, a.endSymbol = function() {
        return e
      }, a
    }]
  }

  function vn() {
    this.$get = ["$rootScope", "$window", "$q", "$$q", function(t, e, n, r) {
      function i(i, a, s, u) {
        var c = e.setInterval, l = e.clearInterval, f = 0, h = g(u) && !u, p = (h ? r : n).defer(), $ = p.promise;
        return s = g(s) ? s : 0, $.then(null, null, i), $.$$intervalId = c(function() {
          p.notify(f++), s > 0 && f >= s && (p.resolve(f), l($.$$intervalId), delete o[$.$$intervalId]), h || t.$apply()
        }, a), o[$.$$intervalId] = p, $
      }

      var o = {};
      return i.cancel = function(t) {
        return t && t.$$intervalId in o ? (o[t.$$intervalId].reject("canceled"), e.clearInterval(t.$$intervalId), delete o[t.$$intervalId], !0) : !1
      }, i
    }]
  }

  function mn() {
    this.$get = function() {
      return {
        id: "en-us",
        NUMBER_FORMATS: {
          DECIMAL_SEP: ".",
          GROUP_SEP: ",",
          PATTERNS: [{
            minInt: 1,
            minFrac: 0,
            maxFrac: 3,
            posPre: "",
            posSuf: "",
            negPre: "-",
            negSuf: "",
            gSize: 3,
            lgSize: 3
          }, {
            minInt: 1,
            minFrac: 2,
            maxFrac: 2,
            posPre: "¤",
            posSuf: "",
            negPre: "(¤",
            negSuf: ")",
            gSize: 3,
            lgSize: 3
          }],
          CURRENCY_SYM: "$"
        },
        DATETIME_FORMATS: {
          MONTH: "January,February,March,April,May,June,July,August,September,October,November,December".split(","),
          SHORTMONTH: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),
          DAY: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),
          SHORTDAY: "Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),
          AMPMS: ["AM", "PM"],
          medium: "MMM d, y h:mm:ss a",
          "short": "M/d/yy h:mm a",
          fullDate: "EEEE, MMMM d, y",
          longDate: "MMMM d, y",
          mediumDate: "MMM d, y",
          shortDate: "M/d/yy",
          mediumTime: "h:mm:ss a",
          shortTime: "h:mm a"
        },
        pluralCat: function(t) {
          return 1 === t ? "one" : "other"
        }
      }
    }
  }

  function gn(t) {
    for (var e = t.split("/"), n = e.length; n--;)e[n] = Y(e[n]);
    return e.join("/")
  }

  function yn(t, e) {
    var n = ir(t);
    e.$$protocol = n.protocol, e.$$host = n.hostname, e.$$port = h(n.port) || no[n.protocol] || null
  }

  function wn(t, e) {
    var n = "/" !== t.charAt(0);
    n && (t = "/" + t);
    var r = ir(t);
    e.$$path = decodeURIComponent(n && "/" === r.pathname.charAt(0) ? r.pathname.substring(1) : r.pathname), e.$$search = G(r.search), e.$$hash = decodeURIComponent(r.hash), e.$$path && "/" != e.$$path.charAt(0) && (e.$$path = "/" + e.$$path)
  }

  function bn(t, e) {
    return 0 === e.indexOf(t) ? e.substr(t.length) : void 0
  }

  function xn(t) {
    var e = t.indexOf("#");
    return -1 == e ? t : t.substr(0, e)
  }

  function Sn(t) {
    return t.replace(/(#.+)|#$/, "$1")
  }

  function Cn(t) {
    return t.substr(0, xn(t).lastIndexOf("/") + 1)
  }

  function An(t) {
    return t.substring(0, t.indexOf("/", t.indexOf("//") + 2))
  }

  function kn(t, e) {
    this.$$html5 = !0, e = e || "";
    var r = Cn(t);
    yn(t, this), this.$$parse = function(t) {
      var e = bn(r, t);
      if (!w(e))throw ro("ipthprfx", 'Invalid url "{0}", missing path prefix "{1}".', t, r);
      wn(e, this), this.$$path || (this.$$path = "/"), this.$$compose()
    }, this.$$compose = function() {
      var t = J(this.$$search), e = this.$$hash ? "#" + Y(this.$$hash) : "";
      this.$$url = gn(this.$$path) + (t ? "?" + t : "") + e, this.$$absUrl = r + this.$$url.substr(1)
    }, this.$$parseLinkUrl = function(i, o) {
      if (o && "#" === o[0])return this.hash(o.slice(1)), !0;
      var a, s, u;
      return (a = bn(t, i)) !== n ? (s = a, u = (a = bn(e, a)) !== n ? r + (bn("/", a) || a) : t + s) : (a = bn(r, i)) !== n ? u = r + a : r == i + "/" && (u = r), u && this.$$parse(u), !!u
    }
  }

  function En(t, e) {
    var n = Cn(t);
    yn(t, this), this.$$parse = function(r) {
      function i(t, e, n) {
        var r, i = /^\/[A-Z]:(\/.*)/;
        return 0 === e.indexOf(n) && (e = e.replace(n, "")), i.exec(e) ? t : (r = i.exec(t), r ? r[1] : t)
      }

      var o, a = bn(t, r) || bn(n, r);
      "#" === a.charAt(0) ? (o = bn(e, a), m(o) && (o = a)) : o = this.$$html5 ? a : "", wn(o, this), this.$$path = i(this.$$path, o, t), this.$$compose()
    }, this.$$compose = function() {
      var n = J(this.$$search), r = this.$$hash ? "#" + Y(this.$$hash) : "";
      this.$$url = gn(this.$$path) + (n ? "?" + n : "") + r, this.$$absUrl = t + (this.$$url ? e + this.$$url : "")
    }, this.$$parseLinkUrl = function(e) {
      return xn(t) == xn(e) ? (this.$$parse(e), !0) : !1
    }
  }

  function On(t, e) {
    this.$$html5 = !0, En.apply(this, arguments);
    var n = Cn(t);
    this.$$parseLinkUrl = function(r, i) {
      if (i && "#" === i[0])return this.hash(i.slice(1)), !0;
      var o, a;
      return t == xn(r) ? o = r : (a = bn(n, r)) ? o = t + e + a : n === r + "/" && (o = n), o && this.$$parse(o), !!o
    }, this.$$compose = function() {
      var n = J(this.$$search), r = this.$$hash ? "#" + Y(this.$$hash) : "";
      this.$$url = gn(this.$$path) + (n ? "?" + n : "") + r, this.$$absUrl = t + e + this.$$url
    }
  }

  function Tn(t) {
    return function() {
      return this[t]
    }
  }

  function Mn(t, e) {
    return function(n) {
      return m(n) ? this[t] : (this[t] = e(n), this.$$compose(), this)
    }
  }

  function Vn() {
    var t = "", e = { enabled: !1, requireBase: !0, rewriteLinks: !0 };
    this.hashPrefix = function(e) {
      return g(e) ? (t = e, this) : t
    }, this.html5Mode = function(t) {
      return M(t) ? (e.enabled = t, this) : y(t) ? (M(t.enabled) && (e.enabled = t.enabled), M(t.requireBase) && (e.requireBase = t.requireBase), M(t.rewriteLinks) && (e.rewriteLinks = t.rewriteLinks), this) : e
    }, this.$get = ["$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function(n, r, i, o, a) {
      function s(t, e, n) {
        var i = c.url(), o = c.$$state;
        try {
          r.url(t, e, n), c.$$state = r.state()
        } catch (a) {
          throw c.url(i), c.$$state = o, a
        }
      }

      function u(t, e) {
        n.$broadcast("$locationChangeSuccess", c.absUrl(), t, c.$$state, e)
      }

      var c, l, f, h = r.baseHref(), p = r.url();
      if (e.enabled) {
        if (!h && e.requireBase)throw ro("nobase", "$location in HTML5 mode requires a <base> tag to be present!");
        f = An(p) + (h || "/"), l = i.history ? kn : On
      } else f = xn(p), l = En;
      c = new l(f, "#" + t), c.$$parseLinkUrl(p, p), c.$$state = r.state();
      var $ = /^\s*(javascript|mailto):/i;
      o.on("click", function(t) {
        if (e.rewriteLinks && !t.ctrlKey && !t.metaKey && 2 != t.which) {
          for (var i = Qr(t.target); "a" !== D(i[0]);)if (i[0] === o[0] || !(i = i.parent())[0])return;
          var s = i.prop("href"), u = i.attr("href") || i.attr("xlink:href");
          y(s) && "[object SVGAnimatedString]" === s.toString() && (s = ir(s.animVal).href), $.test(s) || !s || i.attr("target") || t.isDefaultPrevented() || c.$$parseLinkUrl(s, u) && (t.preventDefault(), c.absUrl() != r.url() && (n.$apply(), a.angular["ff-684208-preventDefault"] = !0))
        }
      }), c.absUrl() != p && r.url(c.absUrl(), !0);
      var d = !0;
      return r.onUrlChange(function(t, e) {
        n.$evalAsync(function() {
          var r, i = c.absUrl(), o = c.$$state;
          c.$$parse(t), c.$$state = e, r = n.$broadcast("$locationChangeStart", t, i, e, o).defaultPrevented, c.absUrl() === t && (r ? (c.$$parse(i), c.$$state = o, s(i, !1, o)) : (d = !1, u(i, o)))
        }), n.$$phase || n.$digest()
      }), n.$watch(function() {
        var t = Sn(r.url()), e = Sn(c.absUrl()), o = r.state(), a = c.$$replace, l = t !== e || c.$$html5 && i.history && o !== c.$$state;
        (d || l) && (d = !1, n.$evalAsync(function() {
          var e = c.absUrl(), r = n.$broadcast("$locationChangeStart", e, t, c.$$state, o).defaultPrevented;
          c.absUrl() === e && (r ? (c.$$parse(t), c.$$state = o) : (l && s(e, a, o === c.$$state ? null : c.$$state), u(t, o)))
        })), c.$$replace = !1
      }), c
    }]
  }

  function Nn() {
    var t = !0, e = this;
    this.debugEnabled = function(e) {
      return g(e) ? (t = e, this) : t
    }, this.$get = ["$window", function(n) {
      function r(t) {
        return t instanceof Error && (t.stack ? t = t.message && -1 === t.stack.indexOf(t.message) ? "Error: " + t.message + "\n" + t.stack : t.stack : t.sourceURL && (t = t.message + "\n" + t.sourceURL + ":" + t.line)), t
      }

      function i(t) {
        var e = n.console || {}, i = e[t] || e.log || $, a = !1;
        try {
          a = !!i.apply
        } catch (s) {
        }
        return a ? function() {
          var t = [];
          return o(arguments, function(e) {
            t.push(r(e))
          }), i.apply(e, t)
        } : function(t, e) {
          i(t, null == e ? "" : e)
        }
      }

      return {
        log: i("log"), info: i("info"), warn: i("warn"), error: i("error"), debug: function() {
          var n = i("debug");
          return function() {
            t && n.apply(e, arguments)
          }
        }()
      }
    }]
  }

  function jn(t, e) {
    if ("__defineGetter__" === t || "__defineSetter__" === t || "__lookupGetter__" === t || "__lookupSetter__" === t || "__proto__" === t)throw oo("isecfld", "Attempting to access a disallowed field in Angular expressions! Expression: {0}", e);
    return t
  }

  function Dn(t, e) {
    if (t) {
      if (t.constructor === t)throw oo("isecfn", "Referencing Function in Angular expressions is disallowed! Expression: {0}", e);
      if (t.window === t)throw oo("isecwindow", "Referencing the Window in Angular expressions is disallowed! Expression: {0}", e);
      if (t.children && (t.nodeName || t.prop && t.attr && t.find))throw oo("isecdom", "Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}", e);
      if (t === Object)throw oo("isecobj", "Referencing Object in Angular expressions is disallowed! Expression: {0}", e)
    }
    return t
  }

  function Pn(t, e) {
    if (t) {
      if (t.constructor === t)throw oo("isecfn", "Referencing Function in Angular expressions is disallowed! Expression: {0}", e);
      if (t === ao || t === so || t === uo)throw oo("isecff", "Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}", e)
    }
  }

  function Rn(t) {
    return t.constant
  }

  function qn(t, e, n, r) {
    Dn(t, r);
    for (var i, o = e.split("."), a = 0; o.length > 1; a++) {
      i = jn(o.shift(), r);
      var s = Dn(t[i], r);
      s || (s = {}, t[i] = s), t = s
    }
    return i = jn(o.shift(), r), Dn(t[i], r), t[i] = n, n
  }

  function In(t) {
    return "constructor" == t
  }

  function Un(t, e, r, i, o, a, s) {
    jn(t, a), jn(e, a), jn(r, a), jn(i, a), jn(o, a);
    var u = function(t) {
      return Dn(t, a)
    }, c = s || In(t) ? u : d, l = s || In(e) ? u : d, f = s || In(r) ? u : d, h = s || In(i) ? u : d, p = s || In(o) ? u : d;
    return function(a, s) {
      var u = s && s.hasOwnProperty(t) ? s : a;
      return null == u ? u : (u = c(u[t]), e ? null == u ? n : (u = l(u[e]), r ? null == u ? n : (u = f(u[r]), i ? null == u ? n : (u = h(u[i]), o ? null == u ? n : u = p(u[o]) : u) : u) : u) : u)
    }
  }

  function _n(t, e) {
    return function(n, r) {
      return t(n, r, Dn, e)
    }
  }

  function Fn(t, e, r) {
    var i = e.expensiveChecks, a = i ? vo : $o, s = a[t];
    if (s)return s;
    var u = t.split("."), c = u.length;
    if (e.csp)s = 6 > c ? Un(u[0], u[1], u[2], u[3], u[4], r, i) : function(t, e) {
      var o, a = 0;
      do o = Un(u[a++], u[a++], u[a++], u[a++], u[a++], r, i)(t, e), e = n, t = o; while (c > a);
      return o
    }; else {
      var l = "";
      i && (l += "s = eso(s, fe);\nl = eso(l, fe);\n");
      var f = i;
      o(u, function(t, e) {
        jn(t, r);
        var n = (e ? "s" : '((l&&l.hasOwnProperty("' + t + '"))?l:s)') + "." + t;
        (i || In(t)) && (n = "eso(" + n + ", fe)", f = !0), l += "if(s == null) return undefined;\ns=" + n + ";\n"
      }), l += "return s;";
      var h = new Function("s", "l", "eso", "fe", l);
      h.toString = v(l), f && (h = _n(h, r)), s = h
    }
    return s.sharedGetter = !0, s.assign = function(e, n) {
      return qn(e, t, n, t)
    }, a[t] = s, s
  }

  function Hn(t) {
    return S(t.valueOf) ? t.valueOf() : mo.call(t)
  }

  function Ln() {
    var t = ce(), e = ce();
    this.$get = ["$filter", "$sniffer", function(n, r) {
      function i(t) {
        var e = t;
        return t.sharedGetter && (e = function(e, n) {
          return t(e, n)
        }, e.literal = t.literal, e.constant = t.constant, e.assign = t.assign), e
      }

      function a(t, e) {
        for (var n = 0, r = t.length; r > n; n++) {
          var i = t[n];
          i.constant || (i.inputs ? a(i.inputs, e) : -1 === e.indexOf(i) && e.push(i))
        }
        return e
      }

      function s(t, e) {
        return null == t || null == e ? t === e : "object" == typeof t && (t = Hn(t), "object" == typeof t) ? !1 : t === e || t !== t && e !== e
      }

      function u(t, e, n, r) {
        var i, o = r.$$inputs || (r.$$inputs = a(r.inputs, []));
        if (1 === o.length) {
          var u = s;
          return o = o[0], t.$watch(function(t) {
            var e = o(t);
            return s(e, u) || (i = r(t), u = e && Hn(e)), i
          }, e, n)
        }
        for (var c = [], l = 0, f = o.length; f > l; l++)c[l] = s;
        return t.$watch(function(t) {
          for (var e = !1, n = 0, a = o.length; a > n; n++) {
            var u = o[n](t);
            (e || (e = !s(u, c[n]))) && (c[n] = u && Hn(u))
          }
          return e && (i = r(t)), i
        }, e, n)
      }

      function c(t, e, n, r) {
        var i, o;
        return i = t.$watch(function(t) {
          return r(t)
        }, function(t, n, r) {
          o = t, S(e) && e.apply(this, arguments), g(t) && r.$$postDigest(function() {
            g(o) && i()
          })
        }, n)
      }

      function l(t, e, n, r) {
        function i(t) {
          var e = !0;
          return o(t, function(t) {
            g(t) || (e = !1)
          }), e
        }

        var a, s;
        return a = t.$watch(function(t) {
          return r(t)
        }, function(t, n, r) {
          s = t, S(e) && e.call(this, t, n, r), i(t) && r.$$postDigest(function() {
            i(s) && a()
          })
        }, n)
      }

      function f(t, e, n, r) {
        var i;
        return i = t.$watch(function(t) {
          return r(t)
        }, function() {
          S(e) && e.apply(this, arguments), i()
        }, n)
      }

      function h(t, e) {
        if (!e)return t;
        var n = t.$$watchDelegate, r = n !== l && n !== c, i = r ? function(n, r) {
          var i = t(n, r);
          return e(i, n, r)
        } : function(n, r) {
          var i = t(n, r), o = e(i, n, r);
          return g(i) ? o : i
        };
        return t.$$watchDelegate && t.$$watchDelegate !== u ? i.$$watchDelegate = t.$$watchDelegate : e.$stateful || (i.$$watchDelegate = u, i.inputs = [t]), i
      }

      var p = { csp: r.csp, expensiveChecks: !1 }, d = { csp: r.csp, expensiveChecks: !0 };
      return function(r, o, a) {
        var s, v, m;
        switch (typeof r) {
          case"string":
            m = r = r.trim();
            var g = a ? e : t;
            if (s = g[m], !s) {
              ":" === r.charAt(0) && ":" === r.charAt(1) && (v = !0, r = r.substring(2));
              var y = a ? d : p, w = new ho(y), b = new po(w, n, y);
              s = b.parse(r), s.constant ? s.$$watchDelegate = f : v ? (s = i(s), s.$$watchDelegate = s.literal ? l : c) : s.inputs && (s.$$watchDelegate = u), g[m] = s
            }
            return h(s, o);
          case"function":
            return h(r, o);
          default:
            return h($, o)
        }
      }
    }]
  }

  function Bn() {
    this.$get = ["$rootScope", "$exceptionHandler", function(t, e) {
      return Wn(function(e) {
        t.$evalAsync(e)
      }, e)
    }]
  }

  function zn() {
    this.$get = ["$browser", "$exceptionHandler", function(t, e) {
      return Wn(function(e) {
        t.defer(e)
      }, e)
    }]
  }

  function Wn(t, e) {
    function i(t, e, n) {
      function r(e) {
        return function(n) {
          i || (i = !0, e.call(t, n))
        }
      }

      var i = !1;
      return [r(e), r(n)]
    }

    function a() {
      this.$$state = { status: 0 }
    }

    function s(t, e) {
      return function(n) {
        e.call(t, n)
      }
    }

    function u(t) {
      var r, i, o;
      o = t.pending, t.processScheduled = !1, t.pending = n;
      for (var a = 0, s = o.length; s > a; ++a) {
        i = o[a][0], r = o[a][t.status];
        try {
          S(r) ? i.resolve(r(t.value)) : 1 === t.status ? i.resolve(t.value) : i.reject(t.value)
        } catch (u) {
          i.reject(u), e(u)
        }
      }
    }

    function c(e) {
      !e.processScheduled && e.pending && (e.processScheduled = !0, t(function() {
        u(e)
      }))
    }

    function l() {
      this.promise = new a, this.resolve = s(this, this.resolve), this.reject = s(this, this.reject), this.notify = s(this, this.notify)
    }

    function f(t) {
      var e = new l, n = 0, r = li(t) ? [] : {};
      return o(t, function(t, i) {
        n++, m(t).then(function(t) {
          r.hasOwnProperty(i) || (r[i] = t, --n || e.resolve(r))
        }, function(t) {
          r.hasOwnProperty(i) || e.reject(t)
        })
      }), 0 === n && e.resolve(r), e.promise
    }

    var h = r("$q", TypeError), p = function() {
      return new l
    };
    a.prototype = {
      then: function(t, e, n) {
        var r = new l;
        return this.$$state.pending = this.$$state.pending || [], this.$$state.pending.push([r, t, e, n]), this.$$state.status > 0 && c(this.$$state), r.promise
      }, "catch": function(t) {
        return this.then(null, t)
      }, "finally": function(t, e) {
        return this.then(function(e) {
          return v(e, !0, t)
        }, function(e) {
          return v(e, !1, t)
        }, e)
      }
    }, l.prototype = {
      resolve: function(t) {
        this.promise.$$state.status || (t === this.promise ? this.$$reject(h("qcycle", "Expected promise to be resolved with value other than itself '{0}'", t)) : this.$$resolve(t))
      }, $$resolve: function(t) {
        var n, r;
        r = i(this, this.$$resolve, this.$$reject);
        try {
          (y(t) || S(t)) && (n = t && t.then), S(n) ? (this.promise.$$state.status = -1, n.call(t, r[0], r[1], this.notify)) : (this.promise.$$state.value = t, this.promise.$$state.status = 1, c(this.promise.$$state))
        } catch (o) {
          r[1](o), e(o)
        }
      }, reject: function(t) {
        this.promise.$$state.status || this.$$reject(t)
      }, $$reject: function(t) {
        this.promise.$$state.value = t, this.promise.$$state.status = 2, c(this.promise.$$state)
      }, notify: function(n) {
        var r = this.promise.$$state.pending;
        this.promise.$$state.status <= 0 && r && r.length && t(function() {
          for (var t, i, o = 0, a = r.length; a > o; o++) {
            i = r[o][0], t = r[o][3];
            try {
              i.notify(S(t) ? t(n) : n)
            } catch (s) {
              e(s)
            }
          }
        })
      }
    };
    var $ = function(t) {
      var e = new l;
      return e.reject(t), e.promise
    }, d = function(t, e) {
      var n = new l;
      return e ? n.resolve(t) : n.reject(t), n.promise
    }, v = function(t, e, n) {
      var r = null;
      try {
        S(n) && (r = n())
      } catch (i) {
        return d(i, !1)
      }
      return V(r) ? r.then(function() {
        return d(t, e)
      }, function(t) {
        return d(t, !1)
      }) : d(t, e)
    }, m = function(t, e, n, r) {
      var i = new l;
      return i.resolve(t), i.promise.then(e, n, r)
    }, g = function w(t) {
      function e(t) {
        r.resolve(t)
      }

      function n(t) {
        r.reject(t)
      }

      if (!S(t))throw h("norslvr", "Expected resolverFn, got '{0}'", t);
      if (!(this instanceof w))return new w(t);
      var r = new l;
      return t(e, n), r.promise
    };
    return g.defer = p, g.reject = $, g.when = m, g.all = f, g
  }

  function Gn() {
    this.$get = ["$window", "$timeout", function(t, e) {
      var n = t.requestAnimationFrame || t.webkitRequestAnimationFrame, r = t.cancelAnimationFrame || t.webkitCancelAnimationFrame || t.webkitCancelRequestAnimationFrame, i = !!n, o = i ? function(t) {
        var e = n(t);
        return function() {
          r(e)
        }
      } : function(t) {
        var n = e(t, 16.66, !1);
        return function() {
          e.cancel(n)
        }
      };
      return o.supported = i, o
    }]
  }

  function Jn() {
    var t = 10, e = r("$rootScope"), n = null, a = null;
    this.digestTtl = function(e) {
      return arguments.length && (t = e), t
    }, this.$get = ["$injector", "$exceptionHandler", "$parse", "$browser", function(r, s, u, l) {
      function f() {
        this.$id = c(), this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null, this.$root = this, this.$$destroyed = !1, this.$$listeners = {}, this.$$listenerCount = {}, this.$$isolateBindings = null
      }

      function h(t) {
        if (b.$$phase)throw e("inprog", "{0} already in progress", b.$$phase);
        b.$$phase = t
      }

      function p() {
        b.$$phase = null
      }

      function d(t, e, n) {
        do t.$$listenerCount[n] -= e, 0 === t.$$listenerCount[n] && delete t.$$listenerCount[n]; while (t = t.$parent)
      }

      function v() {
      }

      function g() {
        for (; A.length;)try {
          A.shift()()
        } catch (t) {
          s(t)
        }
        a = null
      }

      function w() {
        null === a && (a = l.defer(function() {
          b.$apply(g)
        }))
      }

      f.prototype = {
        constructor: f, $new: function(t, e) {
          function n() {
            r.$$destroyed = !0
          }

          var r;
          return e = e || this, t ? (r = new f, r.$root = this.$root) : (this.$$ChildScope || (this.$$ChildScope = function() {
            this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null, this.$$listeners = {}, this.$$listenerCount = {}, this.$id = c(), this.$$ChildScope = null
          }, this.$$ChildScope.prototype = this), r = new this.$$ChildScope), r.$parent = e, r.$$prevSibling = e.$$childTail, e.$$childHead ? (e.$$childTail.$$nextSibling = r, e.$$childTail = r) : e.$$childHead = e.$$childTail = r, (t || e != this) && r.$on("$destroy", n), r
        }, $watch: function(t, e, r) {
          var i = u(t);
          if (i.$$watchDelegate)return i.$$watchDelegate(this, e, r, i);
          var o = this, a = o.$$watchers, s = { fn: e, last: v, get: i, exp: t, eq: !!r };
          return n = null, S(e) || (s.fn = $), a || (a = o.$$watchers = []), a.unshift(s), function() {
            P(a, s), n = null
          }
        }, $watchGroup: function(t, e) {
          function n() {
            u = !1, c ? (c = !1, e(i, i, s)) : e(i, r, s)
          }

          var r = new Array(t.length), i = new Array(t.length), a = [], s = this, u = !1, c = !0;
          if (!t.length) {
            var l = !0;
            return s.$evalAsync(function() {
              l && e(i, i, s)
            }), function() {
              l = !1
            }
          }
          return 1 === t.length ? this.$watch(t[0], function(t, n, o) {
            i[0] = t, r[0] = n, e(i, t === n ? i : r, o)
          }) : (o(t, function(t, e) {
            var o = s.$watch(t, function(t, o) {
              i[e] = t, r[e] = o, u || (u = !0, s.$evalAsync(n))
            });
            a.push(o)
          }), function() {
            for (; a.length;)a.shift()()
          })
        }, $watchCollection: function(t, e) {
          function n(t) {
            o = t;
            var e, n, r, s, u;
            if (!m(o)) {
              if (y(o))if (i(o)) {
                a !== p && (a = p, v = a.length = 0, f++), e = o.length, v !== e && (f++, a.length = v = e);
                for (var c = 0; e > c; c++)u = a[c], s = o[c], r = u !== u && s !== s, r || u === s || (f++, a[c] = s)
              } else {
                a !== $ && (a = $ = {}, v = 0, f++), e = 0;
                for (n in o)o.hasOwnProperty(n) && (e++, s = o[n], u = a[n], n in a ? (r = u !== u && s !== s, r || u === s || (f++, a[n] = s)) : (v++, a[n] = s, f++));
                if (v > e) {
                  f++;
                  for (n in a)o.hasOwnProperty(n) || (v--, delete a[n])
                }
              } else a !== o && (a = o, f++);
              return f
            }
          }

          function r() {
            if (d ? (d = !1, e(o, o, c)) : e(o, s, c), l)if (y(o))if (i(o)) {
              s = new Array(o.length);
              for (var t = 0; t < o.length; t++)s[t] = o[t]
            } else {
              s = {};
              for (var n in o)Jr.call(o, n) && (s[n] = o[n])
            } else s = o
          }

          n.$stateful = !0;
          var o, a, s, c = this, l = e.length > 1, f = 0, h = u(t, n), p = [], $ = {}, d = !0, v = 0;
          return this.$watch(h, r)
        }, $digest: function() {
          var r, i, o, u, c, f, $, d, m, y, w = t, A = this, k = [];
          h("$digest"), l.$$checkUrlChange(), this === b && null !== a && (l.defer.cancel(a), g()), n = null;
          do {
            for (f = !1, d = A; x.length;) {
              try {
                y = x.shift(), y.scope.$eval(y.expression, y.locals)
              } catch (E) {
                s(E)
              }
              n = null
            }
            t:do {
              if (u = d.$$watchers)for (c = u.length; c--;)try {
                if (r = u[c])if ((i = r.get(d)) === (o = r.last) || (r.eq ? I(i, o) : "number" == typeof i && "number" == typeof o && isNaN(i) && isNaN(o))) {
                  if (r === n) {
                    f = !1;
                    break t
                  }
                } else f = !0, n = r, r.last = r.eq ? R(i, null) : i, r.fn(i, o === v ? i : o, d), 5 > w && (m = 4 - w, k[m] || (k[m] = []), k[m].push({
                  msg: S(r.exp) ? "fn: " + (r.exp.name || r.exp.toString()) : r.exp,
                  newVal: i,
                  oldVal: o
                }))
              } catch (E) {
                s(E)
              }
              if (!($ = d.$$childHead || d !== A && d.$$nextSibling))for (; d !== A && !($ = d.$$nextSibling);)d = d.$parent
            } while (d = $);
            if ((f || x.length) && !w--)throw p(), e("infdig", "{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}", t, k)
          } while (f || x.length);
          for (p(); C.length;)try {
            C.shift()()
          } catch (E) {
            s(E)
          }
        }, $destroy: function() {
          if (!this.$$destroyed) {
            var t = this.$parent;
            if (this.$broadcast("$destroy"), this.$$destroyed = !0, this !== b) {
              for (var e in this.$$listenerCount)d(this, this.$$listenerCount[e], e);
              t.$$childHead == this && (t.$$childHead = this.$$nextSibling), t.$$childTail == this && (t.$$childTail = this.$$prevSibling), this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling), this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling), this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = $, this.$on = this.$watch = this.$watchGroup = function() {
                return $
              }, this.$$listeners = {}, this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = this.$$watchers = null
            }
          }
        }, $eval: function(t, e) {
          return u(t)(this, e)
        }, $evalAsync: function(t, e) {
          b.$$phase || x.length || l.defer(function() {
            x.length && b.$digest()
          }), x.push({ scope: this, expression: t, locals: e })
        }, $$postDigest: function(t) {
          C.push(t)
        }, $apply: function(t) {
          try {
            return h("$apply"), this.$eval(t)
          } catch (e) {
            s(e)
          } finally {
            p();
            try {
              b.$digest()
            } catch (e) {
              throw s(e), e
            }
          }
        }, $applyAsync: function(t) {
          function e() {
            n.$eval(t)
          }

          var n = this;
          t && A.push(e), w()
        }, $on: function(t, e) {
          var n = this.$$listeners[t];
          n || (this.$$listeners[t] = n = []), n.push(e);
          var r = this;
          do r.$$listenerCount[t] || (r.$$listenerCount[t] = 0), r.$$listenerCount[t]++; while (r = r.$parent);
          var i = this;
          return function() {
            var r = n.indexOf(e);
            -1 !== r && (n[r] = null, d(i, 1, t))
          }
        }, $emit: function(t) {
          var e, n, r, i = [], o = this, a = !1, u = {
            name: t, targetScope: o, stopPropagation: function() {
              a = !0
            }, preventDefault: function() {
              u.defaultPrevented = !0
            }, defaultPrevented: !1
          }, c = U([u], arguments, 1);
          do {
            for (e = o.$$listeners[t] || i, u.currentScope = o, n = 0, r = e.length; r > n; n++)if (e[n])try {
              e[n].apply(null, c)
            } catch (l) {
              s(l)
            } else e.splice(n, 1), n--, r--;
            if (a)return u.currentScope = null, u;
            o = o.$parent
          } while (o);
          return u.currentScope = null, u
        }, $broadcast: function(t) {
          var e = this, n = e, r = e, i = {
            name: t, targetScope: e, preventDefault: function() {
              i.defaultPrevented = !0
            }, defaultPrevented: !1
          };
          if (!e.$$listenerCount[t])return i;
          for (var o, a, u, c = U([i], arguments, 1); n = r;) {
            for (i.currentScope = n, o = n.$$listeners[t] || [], a = 0, u = o.length; u > a; a++)if (o[a])try {
              o[a].apply(null, c)
            } catch (l) {
              s(l)
            } else o.splice(a, 1), a--, u--;
            if (!(r = n.$$listenerCount[t] && n.$$childHead || n !== e && n.$$nextSibling))for (; n !== e && !(r = n.$$nextSibling);)n = n.$parent
          }
          return i.currentScope = null, i
        }
      };
      var b = new f, x = b.$$asyncQueue = [], C = b.$$postDigestQueue = [], A = b.$$applyAsyncQueue = [];
      return b
    }]
  }

  function Yn() {
    var t = /^\s*(https?|ftp|mailto|tel|file):/, e = /^\s*((https?|ftp|file|blob):|data:image\/)/;
    this.aHrefSanitizationWhitelist = function(e) {
      return g(e) ? (t = e, this) : t
    }, this.imgSrcSanitizationWhitelist = function(t) {
      return g(t) ? (e = t, this) : e
    }, this.$get = function() {
      return function(n, r) {
        var i, o = r ? e : t;
        return i = ir(n).href, "" === i || i.match(o) ? n : "unsafe:" + i
      }
    }
  }

  function Zn(t) {
    if ("self" === t)return t;
    if (w(t)) {
      if (t.indexOf("***") > -1)throw go("iwcard", "Illegal sequence *** in string matcher.  String: {0}", t);
      return t = hi(t).replace("\\*\\*", ".*").replace("\\*", "[^:/.?&;]*"), new RegExp("^" + t + "$")
    }
    if (C(t))return new RegExp("^" + t.source + "$");
    throw go("imatcher", 'Matchers may only be "self", string patterns or RegExp objects')
  }

  function Kn(t) {
    var e = [];
    return g(t) && o(t, function(t) {
      e.push(Zn(t))
    }), e
  }

  function Xn() {
    this.SCE_CONTEXTS = yo;
    var t = ["self"], e = [];
    this.resourceUrlWhitelist = function(e) {
      return arguments.length && (t = Kn(e)), t
    }, this.resourceUrlBlacklist = function(t) {
      return arguments.length && (e = Kn(t)), e
    }, this.$get = ["$injector", function(r) {
      function i(t, e) {
        return "self" === t ? or(e) : !!t.exec(e.href)
      }

      function o(n) {
        var r, o, a = ir(n.toString()), s = !1;
        for (r = 0, o = t.length; o > r; r++)if (i(t[r], a)) {
          s = !0;
          break
        }
        if (s)for (r = 0, o = e.length; o > r; r++)if (i(e[r], a)) {
          s = !1;
          break
        }
        return s
      }

      function a(t) {
        var e = function(t) {
          this.$$unwrapTrustedValue = function() {
            return t
          }
        };
        return t && (e.prototype = new t), e.prototype.valueOf = function() {
          return this.$$unwrapTrustedValue()
        }, e.prototype.toString = function() {
          return this.$$unwrapTrustedValue().toString()
        }, e
      }

      function s(t, e) {
        var r = h.hasOwnProperty(t) ? h[t] : null;
        if (!r)throw go("icontext", "Attempted to trust a value in invalid context. Context: {0}; Value: {1}", t, e);
        if (null === e || e === n || "" === e)return e;
        if ("string" != typeof e)throw go("itype", "Attempted to trust a non-string value in a content requiring a string: Context: {0}", t);
        return new r(e)
      }

      function u(t) {
        return t instanceof f ? t.$$unwrapTrustedValue() : t
      }

      function c(t, e) {
        if (null === e || e === n || "" === e)return e;
        var r = h.hasOwnProperty(t) ? h[t] : null;
        if (r && e instanceof r)return e.$$unwrapTrustedValue();
        if (t === yo.RESOURCE_URL) {
          if (o(e))return e;
          throw go("insecurl", "Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}", e.toString())
        }
        if (t === yo.HTML)return l(e);
        throw go("unsafe", "Attempting to use an unsafe value in a safe context.")
      }

      var l = function() {
        throw go("unsafe", "Attempting to use an unsafe value in a safe context.")
      };
      r.has("$sanitize") && (l = r.get("$sanitize"));
      var f = a(), h = {};
      return h[yo.HTML] = a(f), h[yo.CSS] = a(f), h[yo.URL] = a(f), h[yo.JS] = a(f), h[yo.RESOURCE_URL] = a(h[yo.URL]), {
        trustAs: s,
        getTrusted: c,
        valueOf: u
      }
    }]
  }

  function Qn() {
    var t = !0;
    this.enabled = function(e) {
      return arguments.length && (t = !!e), t
    }, this.$get = ["$parse", "$sceDelegate", function(e, n) {
      if (t && 8 > Xr)throw go("iequirks", "Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");
      var r = q(yo);
      r.isEnabled = function() {
        return t
      }, r.trustAs = n.trustAs, r.getTrusted = n.getTrusted, r.valueOf = n.valueOf, t || (r.trustAs = r.getTrusted = function(t, e) {
        return e
      }, r.valueOf = d), r.parseAs = function(t, n) {
        var i = e(n);
        return i.literal && i.constant ? i : e(n, function(e) {
          return r.getTrusted(t, e)
        })
      };
      var i = r.parseAs, a = r.getTrusted, s = r.trustAs;
      return o(yo, function(t, e) {
        var n = Gr(e);
        r[de("parse_as_" + n)] = function(e) {
          return i(t, e)
        }, r[de("get_trusted_" + n)] = function(e) {
          return a(t, e)
        }, r[de("trust_as_" + n)] = function(e) {
          return s(t, e)
        }
      }), r
    }]
  }

  function tr() {
    this.$get = ["$window", "$document", function(t, e) {
      var n, r, i = {}, o = h((/android (\d+)/.exec(Gr((t.navigator || {}).userAgent)) || [])[1]), a = /Boxee/i.test((t.navigator || {}).userAgent), s = e[0] || {}, u = /^(Moz|webkit|ms)(?=[A-Z])/, c = s.body && s.body.style, l = !1, f = !1;
      if (c) {
        for (var p in c)if (r = u.exec(p)) {
          n = r[0], n = n.substr(0, 1).toUpperCase() + n.substr(1);
          break
        }
        n || (n = "WebkitOpacity" in c && "webkit"), l = !!("transition" in c || n + "Transition" in c), f = !!("animation" in c || n + "Animation" in c), !o || l && f || (l = w(s.body.style.webkitTransition), f = w(s.body.style.webkitAnimation))
      }
      return {
        history: !(!t.history || !t.history.pushState || 4 > o || a), hasEvent: function(t) {
          if ("input" === t && 11 >= Xr)return !1;
          if (m(i[t])) {
            var e = s.createElement("div");
            i[t] = "on" + t in e
          }
          return i[t]
        }, csp: pi(), vendorPrefix: n, transitions: l, animations: f, android: o
      }
    }]
  }

  function er() {
    this.$get = ["$templateCache", "$http", "$q", function(t, e, n) {
      function r(i, o) {
        function a(t) {
          if (s.totalPendingRequests--, !o)throw Gi("tpload", "Failed to load template: {0}", i);
          return n.reject(t)
        }

        var s = r;
        s.totalPendingRequests++;
        var u = e.defaults && e.defaults.transformResponse;
        li(u) ? u = u.filter(function(t) {
          return t !== on
        }) : u === on && (u = null);
        var c = { cache: t, transformResponse: u };
        return e.get(i, c).then(function(t) {
          return s.totalPendingRequests--, t.data
        }, a)
      }

      return r.totalPendingRequests = 0, r
    }]
  }

  function nr() {
    this.$get = ["$rootScope", "$browser", "$location", function(t, e, n) {
      var r = {};
      return r.findBindings = function(t, e, n) {
        var r = t.getElementsByClassName("ng-binding"), i = [];
        return o(r, function(t) {
          var r = si.element(t).data("$binding");
          r && o(r, function(r) {
            if (n) {
              var o = new RegExp("(^|\\s)" + hi(e) + "(\\s|\\||$)");
              o.test(r) && i.push(t)
            } else-1 != r.indexOf(e) && i.push(t)
          })
        }), i
      }, r.findModels = function(t, e, n) {
        for (var r = ["ng-", "data-ng-", "ng\\:"], i = 0; i < r.length; ++i) {
          var o = n ? "=" : "*=", a = "[" + r[i] + "model" + o + '"' + e + '"]', s = t.querySelectorAll(a);
          if (s.length)return s
        }
      }, r.getLocation = function() {
        return n.url()
      }, r.setLocation = function(e) {
        e !== n.url() && (n.url(e), t.$digest())
      }, r.whenStable = function(t) {
        e.notifyWhenNoOutstandingRequests(t)
      }, r
    }]
  }

  function rr() {
    this.$get = ["$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function(t, e, n, r, i) {
      function o(o, s, u) {
        var c, l = g(u) && !u, f = (l ? r : n).defer(), h = f.promise;
        return c = e.defer(function() {
          try {
            f.resolve(o())
          } catch (e) {
            f.reject(e), i(e)
          } finally {
            delete a[h.$$timeoutId]
          }
          l || t.$apply()
        }, s), h.$$timeoutId = c, a[c] = f, h
      }

      var a = {};
      return o.cancel = function(t) {
        return t && t.$$timeoutId in a ? (a[t.$$timeoutId].reject("canceled"), delete a[t.$$timeoutId], e.defer.cancel(t.$$timeoutId)) : !1
      }, o
    }]
  }

  function ir(t) {
    var e = t;
    return Xr && (wo.setAttribute("href", e), e = wo.href), wo.setAttribute("href", e), {
      href: wo.href,
      protocol: wo.protocol ? wo.protocol.replace(/:$/, "") : "",
      host: wo.host,
      search: wo.search ? wo.search.replace(/^\?/, "") : "",
      hash: wo.hash ? wo.hash.replace(/^#/, "") : "",
      hostname: wo.hostname,
      port: wo.port,
      pathname: "/" === wo.pathname.charAt(0) ? wo.pathname : "/" + wo.pathname
    }
  }

  function or(t) {
    var e = w(t) ? ir(t) : t;
    return e.protocol === bo.protocol && e.host === bo.host
  }

  function ar() {
    this.$get = v(t)
  }

  function sr(t) {
    function e(r, i) {
      if (y(r)) {
        var a = {};
        return o(r, function(t, n) {
          a[n] = e(n, t)
        }), a
      }
      return t.factory(r + n, i)
    }

    var n = "Filter";
    this.register = e, this.$get = ["$injector", function(t) {
      return function(e) {
        return t.get(e + n)
      }
    }], e("currency", fr), e("date", xr), e("filter", ur), e("json", Sr), e("limitTo", Cr), e("lowercase", ko), e("number", hr), e("orderBy", Ar), e("uppercase", Eo)
  }

  function ur() {
    return function(t, e, n) {
      if (!li(t))return t;
      var r, i;
      switch (typeof e) {
        case"function":
          r = e;
          break;
        case"boolean":
        case"number":
        case"string":
          i = !0;
        case"object":
          r = cr(e, n, i);
          break;
        default:
          return t
      }
      return t.filter(r)
    }
  }

  function cr(t, e, n) {
    var r, i = y(t) && "$" in t;
    return e === !0 ? e = I : S(e) || (e = function(t, e) {
      return y(t) || y(e) ? !1 : (t = Gr("" + t), e = Gr("" + e), -1 !== t.indexOf(e))
    }), r = function(r) {
      return i && !y(r) ? lr(r, t.$, e, !1) : lr(r, t, e, n)
    }
  }

  function lr(t, e, n, r, i) {
    var o = typeof t, a = typeof e;
    if ("string" === a && "!" === e.charAt(0))return !lr(t, e.substring(1), n, r);
    if ("array" === o)return t.some(function(t) {
      return lr(t, e, n, r)
    });
    switch (o) {
      case"object":
        var s;
        if (r) {
          for (s in t)if ("$" !== s.charAt(0) && lr(t[s], e, n, !0))return !0;
          return i ? !1 : lr(t, e, n, !1)
        }
        if ("object" === a) {
          for (s in e) {
            var u = e[s];
            if (!S(u)) {
              var c = "$" === s, l = c ? t : t[s];
              if (!lr(l, u, n, c, c))return !1
            }
          }
          return !0
        }
        return n(t, e);
      case"function":
        return !1;
      default:
        return n(t, e)
    }
  }

  function fr(t) {
    var e = t.NUMBER_FORMATS;
    return function(t, n, r) {
      return m(n) && (n = e.CURRENCY_SYM), m(r) && (r = e.PATTERNS[1].maxFrac), null == t ? t : pr(t, e.PATTERNS[1], e.GROUP_SEP, e.DECIMAL_SEP, r).replace(/\u00A4/g, n)
    }
  }

  function hr(t) {
    var e = t.NUMBER_FORMATS;
    return function(t, n) {
      return null == t ? t : pr(t, e.PATTERNS[0], e.GROUP_SEP, e.DECIMAL_SEP, n)
    }
  }

  function pr(t, e, n, r, i) {
    if (!isFinite(t) || y(t))return "";
    var o = 0 > t;
    t = Math.abs(t);
    var a = t + "", s = "", u = [], c = !1;
    if (-1 !== a.indexOf("e")) {
      var l = a.match(/([\d\.]+)e(-?)(\d+)/);
      l && "-" == l[2] && l[3] > i + 1 ? t = 0 : (s = a, c = !0)
    }
    if (c)i > 0 && 1 > t && (s = t.toFixed(i), t = parseFloat(s)); else {
      var f = (a.split(xo)[1] || "").length;
      m(i) && (i = Math.min(Math.max(e.minFrac, f), e.maxFrac)), t = +(Math.round(+(t.toString() + "e" + i)).toString() + "e" + -i);
      var h = ("" + t).split(xo), p = h[0];
      h = h[1] || "";
      var $, d = 0, v = e.lgSize, g = e.gSize;
      if (p.length >= v + g)for (d = p.length - v, $ = 0; d > $; $++)(d - $) % g === 0 && 0 !== $ && (s += n), s += p.charAt($);
      for ($ = d; $ < p.length; $++)(p.length - $) % v === 0 && 0 !== $ && (s += n), s += p.charAt($);
      for (; h.length < i;)h += "0";
      i && "0" !== i && (s += r + h.substr(0, i))
    }
    return 0 === t && (o = !1), u.push(o ? e.negPre : e.posPre, s, o ? e.negSuf : e.posSuf), u.join("")
  }

  function $r(t, e, n) {
    var r = "";
    for (0 > t && (r = "-", t = -t), t = "" + t; t.length < e;)t = "0" + t;
    return n && (t = t.substr(t.length - e)), r + t
  }

  function dr(t, e, n, r) {
    return n = n || 0, function(i) {
      var o = i["get" + t]();
      return (n > 0 || o > -n) && (o += n), 0 === o && -12 == n && (o = 12), $r(o, e, r)
    }
  }

  function vr(t, e) {
    return function(n, r) {
      var i = n["get" + t](), o = Yr(e ? "SHORT" + t : t);
      return r[o][i]
    }
  }

  function mr(t) {
    var e = -1 * t.getTimezoneOffset(), n = e >= 0 ? "+" : "";
    return n += $r(Math[e > 0 ? "floor" : "ceil"](e / 60), 2) + $r(Math.abs(e % 60), 2)
  }

  function gr(t) {
    var e = new Date(t, 0, 1).getDay();
    return new Date(t, 0, (4 >= e ? 5 : 12) - e)
  }

  function yr(t) {
    return new Date(t.getFullYear(), t.getMonth(), t.getDate() + (4 - t.getDay()))
  }

  function wr(t) {
    return function(e) {
      var n = gr(e.getFullYear()), r = yr(e), i = +r - +n, o = 1 + Math.round(i / 6048e5);
      return $r(o, t)
    }
  }

  function br(t, e) {
    return t.getHours() < 12 ? e.AMPMS[0] : e.AMPMS[1]
  }

  function xr(t) {
    function e(t) {
      var e;
      if (e = t.match(n)) {
        var r = new Date(0), i = 0, o = 0, a = e[8] ? r.setUTCFullYear : r.setFullYear, s = e[8] ? r.setUTCHours : r.setHours;
        e[9] && (i = h(e[9] + e[10]), o = h(e[9] + e[11])), a.call(r, h(e[1]), h(e[2]) - 1, h(e[3]));
        var u = h(e[4] || 0) - i, c = h(e[5] || 0) - o, l = h(e[6] || 0), f = Math.round(1e3 * parseFloat("0." + (e[7] || 0)));
        return s.call(r, u, c, l, f), r
      }
      return t
    }

    var n = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    return function(n, r, i) {
      var a, s, u = "", c = [];
      if (r = r || "mediumDate", r = t.DATETIME_FORMATS[r] || r, w(n) && (n = Ao.test(n) ? h(n) : e(n)), b(n) && (n = new Date(n)), !x(n))return n;
      for (; r;)s = Co.exec(r), s ? (c = U(c, s, 1), r = c.pop()) : (c.push(r), r = null);
      return i && "UTC" === i && (n = new Date(n.getTime()), n.setMinutes(n.getMinutes() + n.getTimezoneOffset())), o(c, function(e) {
        a = So[e], u += a ? a(n, t.DATETIME_FORMATS) : e.replace(/(^'|'$)/g, "").replace(/''/g, "'")
      }), u
    }
  }

  function Sr() {
    return function(t, e) {
      return m(e) && (e = 2), L(t, e)
    }
  }

  function Cr() {
    return function(t, e) {
      if (b(t) && (t = t.toString()), !li(t) && !w(t))return t;
      if (e = 1 / 0 === Math.abs(Number(e)) ? Number(e) : h(e), w(t))return e ? e >= 0 ? t.slice(0, e) : t.slice(e, t.length) : "";
      var n, r;
      if (e > t.length ? e = t.length : e < -t.length && (e = -t.length), e > 0)n = 0, r = e; else {
        if (!e)return [];
        n = t.length + e, r = t.length
      }
      return t.slice(n, r)
    }
  }

  function Ar(t) {
    return function(e, n, r) {
      function o(t, e) {
        for (var r = 0; r < n.length; r++) {
          var i = n[r](t, e);
          if (0 !== i)return i
        }
        return 0
      }

      function a(t, e) {
        return e ? function(e, n) {
          return t(n, e)
        } : t
      }

      function s(t) {
        switch (typeof t) {
          case"number":
          case"boolean":
          case"string":
            return !0;
          default:
            return !1
        }
      }

      function u(t) {
        return null === t ? "null" : "function" == typeof t.valueOf && (t = t.valueOf(), s(t)) ? t : "function" == typeof t.toString && (t = t.toString(), s(t)) ? t : ""
      }

      function c(t, e) {
        var n = typeof t, r = typeof e;
        return n === r && "object" === n && (t = u(t), e = u(e)), n === r ? ("string" === n && (t = t.toLowerCase(), e = e.toLowerCase()), t === e ? 0 : e > t ? -1 : 1) : r > n ? -1 : 1
      }

      return i(e) ? (n = li(n) ? n : [n], 0 === n.length && (n = ["+"]), n = n.map(function(e) {
        var n = !1, r = e || d;
        if (w(e)) {
          if (("+" == e.charAt(0) || "-" == e.charAt(0)) && (n = "-" == e.charAt(0), e = e.substring(1)), "" === e)return a(c, n);
          if (r = t(e), r.constant) {
            var i = r();
            return a(function(t, e) {
              return c(t[i], e[i])
            }, n)
          }
        }
        return a(function(t, e) {
          return c(r(t), r(e))
        }, n)
      }), ni.call(e).sort(a(o, r))) : e
    }
  }

  function kr(t) {
    return S(t) && (t = { link: t }), t.restrict = t.restrict || "AC", v(t)
  }

  function Er(t, e) {
    t.$name = e
  }

  function Or(t, e, r, i, a) {
    var s = this, u = [], c = s.$$parentForm = t.parent().controller("form") || Mo;
    s.$error = {}, s.$$success = {}, s.$pending = n, s.$name = a(e.name || e.ngForm || "")(r), s.$dirty = !1, s.$pristine = !0, s.$valid = !0, s.$invalid = !1, s.$submitted = !1, c.$addControl(s), s.$rollbackViewValue = function() {
      o(u, function(t) {
        t.$rollbackViewValue()
      })
    }, s.$commitViewValue = function() {
      o(u, function(t) {
        t.$commitViewValue()
      })
    }, s.$addControl = function(t) {
      ae(t.$name, "input"), u.push(t), t.$name && (s[t.$name] = t)
    }, s.$$renameControl = function(t, e) {
      var n = t.$name;
      s[n] === t && delete s[n], s[e] = t, t.$name = e
    }, s.$removeControl = function(t) {
      t.$name && s[t.$name] === t && delete s[t.$name], o(s.$pending, function(e, n) {
        s.$setValidity(n, null, t)
      }), o(s.$error, function(e, n) {
        s.$setValidity(n, null, t)
      }), P(u, t)
    }, Hr({
      ctrl: this, $element: t, set: function(t, e, n) {
        var r = t[e];
        if (r) {
          var i = r.indexOf(n);
          -1 === i && r.push(n)
        } else t[e] = [n]
      }, unset: function(t, e, n) {
        var r = t[e];
        r && (P(r, n), 0 === r.length && delete t[e])
      }, parentForm: c, $animate: i
    }), s.$setDirty = function() {
      i.removeClass(t, Zo), i.addClass(t, Ko), s.$dirty = !0, s.$pristine = !1, c.$setDirty()
    }, s.$setPristine = function() {
      i.setClass(t, Zo, Ko + " " + Vo), s.$dirty = !1, s.$pristine = !0, s.$submitted = !1, o(u, function(t) {
        t.$setPristine()
      })
    }, s.$setUntouched = function() {
      o(u, function(t) {
        t.$setUntouched()
      })
    }, s.$setSubmitted = function() {
      i.addClass(t, Vo), s.$submitted = !0, c.$setSubmitted()
    }
  }

  function Tr(t) {
    t.$formatters.push(function(e) {
      return t.$isEmpty(e) ? e : e.toString()
    })
  }

  function Mr(t, e, n, r, i, o) {
    Vr(t, e, n, r, i, o), Tr(r)
  }

  function Vr(t, e, n, r, i, o) {
    var a = Gr(e[0].type);
    if (!i.android) {
      var s = !1;
      e.on("compositionstart", function() {
        s = !0
      }), e.on("compositionend", function() {
        s = !1, u()
      })
    }
    var u = function(t) {
      if (c && (o.defer.cancel(c), c = null), !s) {
        var i = e.val(), u = t && t.type;
        "password" === a || n.ngTrim && "false" === n.ngTrim || (i = fi(i)), (r.$viewValue !== i || "" === i && r.$$hasNativeValidators) && r.$setViewValue(i, u)
      }
    };
    if (i.hasEvent("input"))e.on("input", u); else {
      var c, l = function(t, e, n) {
        c || (c = o.defer(function() {
          c = null, e && e.value === n || u(t)
        }))
      };
      e.on("keydown", function(t) {
        var e = t.keyCode;
        91 === e || e > 15 && 19 > e || e >= 37 && 40 >= e || l(t, this, this.value)
      }), i.hasEvent("paste") && e.on("paste cut", l)
    }
    e.on("change", u), r.$render = function() {
      e.val(r.$isEmpty(r.$viewValue) ? "" : r.$viewValue)
    }
  }

  function Nr(t, e) {
    if (x(t))return t;
    if (w(t)) {
      Fo.lastIndex = 0;
      var n = Fo.exec(t);
      if (n) {
        var r = +n[1], i = +n[2], o = 0, a = 0, s = 0, u = 0, c = gr(r), l = 7 * (i - 1);
        return e && (o = e.getHours(), a = e.getMinutes(), s = e.getSeconds(), u = e.getMilliseconds()), new Date(r, 0, c.getDate() + l, o, a, s, u)
      }
    }
    return 0 / 0
  }

  function jr(t, e) {
    return function(n, r) {
      var i, a;
      if (x(n))return n;
      if (w(n)) {
        if ('"' == n.charAt(0) && '"' == n.charAt(n.length - 1) && (n = n.substring(1, n.length - 1)), Po.test(n))return new Date(n);
        if (t.lastIndex = 0, i = t.exec(n))return i.shift(), a = r ? {
          yyyy: r.getFullYear(),
          MM: r.getMonth() + 1,
          dd: r.getDate(),
          HH: r.getHours(),
          mm: r.getMinutes(),
          ss: r.getSeconds(),
          sss: r.getMilliseconds() / 1e3
        } : { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 }, o(i, function(t, n) {
          n < e.length && (a[e[n]] = +t)
        }), new Date(a.yyyy, a.MM - 1, a.dd, a.HH, a.mm, a.ss || 0, 1e3 * a.sss || 0)
      }
      return 0 / 0
    }
  }

  function Dr(t, e, r, i) {
    return function(o, a, s, u, c, l, f) {
      function h(t) {
        return t && !(t.getTime && t.getTime() !== t.getTime())
      }

      function p(t) {
        return g(t) ? x(t) ? t : r(t) : n
      }

      Pr(o, a, s, u), Vr(o, a, s, u, c, l);
      var $, d = u && u.$options && u.$options.timezone;
      if (u.$$parserName = t, u.$parsers.push(function(t) {
          if (u.$isEmpty(t))return null;
          if (e.test(t)) {
            var i = r(t, $);
            return "UTC" === d && i.setMinutes(i.getMinutes() - i.getTimezoneOffset()), i
          }
          return n
        }), u.$formatters.push(function(t) {
          if (t && !x(t))throw zo("datefmt", "Expected `{0}` to be a date", t);
          if (h(t)) {
            if ($ = t, $ && "UTC" === d) {
              var e = 6e4 * $.getTimezoneOffset();
              $ = new Date($.getTime() + e)
            }
            return f("date")(t, i, d)
          }
          return $ = null, ""
        }), g(s.min) || s.ngMin) {
        var v;
        u.$validators.min = function(t) {
          return !h(t) || m(v) || r(t) >= v
        }, s.$observe("min", function(t) {
          v = p(t), u.$validate()
        })
      }
      if (g(s.max) || s.ngMax) {
        var y;
        u.$validators.max = function(t) {
          return !h(t) || m(y) || r(t) <= y
        }, s.$observe("max", function(t) {
          y = p(t), u.$validate()
        })
      }
    }
  }

  function Pr(t, e, r, i) {
    var o = e[0], a = i.$$hasNativeValidators = y(o.validity);
    a && i.$parsers.push(function(t) {
      var r = e.prop(Wr) || {};
      return r.badInput && !r.typeMismatch ? n : t
    })
  }

  function Rr(t, e, r, i, o, a) {
    if (Pr(t, e, r, i), Vr(t, e, r, i, o, a), i.$$parserName = "number", i.$parsers.push(function(t) {
        return i.$isEmpty(t) ? null : Io.test(t) ? parseFloat(t) : n
      }), i.$formatters.push(function(t) {
        if (!i.$isEmpty(t)) {
          if (!b(t))throw zo("numfmt", "Expected `{0}` to be a number", t);
          t = t.toString()
        }
        return t
      }), r.min || r.ngMin) {
      var s;
      i.$validators.min = function(t) {
        return i.$isEmpty(t) || m(s) || t >= s
      }, r.$observe("min", function(t) {
        g(t) && !b(t) && (t = parseFloat(t, 10)), s = b(t) && !isNaN(t) ? t : n, i.$validate()
      })
    }
    if (r.max || r.ngMax) {
      var u;
      i.$validators.max = function(t) {
        return i.$isEmpty(t) || m(u) || u >= t
      }, r.$observe("max", function(t) {
        g(t) && !b(t) && (t = parseFloat(t, 10)), u = b(t) && !isNaN(t) ? t : n, i.$validate()
      })
    }
  }

  function qr(t, e, n, r, i, o) {
    Vr(t, e, n, r, i, o), Tr(r), r.$$parserName = "url", r.$validators.url = function(t, e) {
      var n = t || e;
      return r.$isEmpty(n) || Ro.test(n)
    }
  }

  function Ir(t, e, n, r, i, o) {
    Vr(t, e, n, r, i, o), Tr(r), r.$$parserName = "email", r.$validators.email = function(t, e) {
      var n = t || e;
      return r.$isEmpty(n) || qo.test(n)
    }
  }

  function Ur(t, e, n, r) {
    m(n.name) && e.attr("name", c());
    var i = function(t) {
      e[0].checked && r.$setViewValue(n.value, t && t.type)
    };
    e.on("click", i), r.$render = function() {
      var t = n.value;
      e[0].checked = t == r.$viewValue
    }, n.$observe("value", r.$render)
  }

  function _r(t, e, n, i, o) {
    var a;
    if (g(i)) {
      if (a = t(i), !a.constant)throw r("ngModel")("constexpr", "Expected constant expression for `{0}`, but saw `{1}`.", n, i);
      return a(e)
    }
    return o
  }

  function Fr(t, e, n, r, i, o, a, s) {
    var u = _r(s, t, "ngTrueValue", n.ngTrueValue, !0), c = _r(s, t, "ngFalseValue", n.ngFalseValue, !1), l = function(t) {
      r.$setViewValue(e[0].checked, t && t.type)
    };
    e.on("click", l), r.$render = function() {
      e[0].checked = r.$viewValue
    }, r.$isEmpty = function(t) {
      return t === !1
    }, r.$formatters.push(function(t) {
      return I(t, u)
    }), r.$parsers.push(function(t) {
      return t ? u : c
    })
  }

  function Hr(t) {
    function e(t, e, u) {
      e === n ? r("$pending", t, u) : i("$pending", t, u), M(e) ? e ? (f(s.$error, t, u), l(s.$$success, t, u)) : (l(s.$error, t, u), f(s.$$success, t, u)) : (f(s.$error, t, u), f(s.$$success, t, u)), s.$pending ? (o(ta, !0), s.$valid = s.$invalid = n, a("", null)) : (o(ta, !1), s.$valid = Lr(s.$error), s.$invalid = !s.$valid, a("", s.$valid));
      var c;
      c = s.$pending && s.$pending[t] ? n : s.$error[t] ? !1 : s.$$success[t] ? !0 : null, a(t, c), h.$setValidity(t, c, s)
    }

    function r(t, e, n) {
      s[t] || (s[t] = {}), l(s[t], e, n)
    }

    function i(t, e, r) {
      s[t] && f(s[t], e, r), Lr(s[t]) && (s[t] = n)
    }

    function o(t, e) {
      e && !c[t] ? (p.addClass(u, t), c[t] = !0) : !e && c[t] && (p.removeClass(u, t), c[t] = !1)
    }

    function a(t, e) {
      t = t ? "-" + ne(t, "-") : "", o(Jo + t, e === !0), o(Yo + t, e === !1)
    }

    var s = t.ctrl, u = t.$element, c = {}, l = t.set, f = t.unset, h = t.parentForm, p = t.$animate;
    c[Yo] = !(c[Jo] = u.hasClass(Jo)), s.$setValidity = e
  }

  function Lr(t) {
    if (t)for (var e in t)return !1;
    return !0
  }

  function Br(t, e) {
    return t = "ngClass" + t, ["$animate", function(n) {
      function r(t, e) {
        var n = [];
        t:for (var r = 0; r < t.length; r++) {
          for (var i = t[r], o = 0; o < e.length; o++)if (i == e[o])continue t;
          n.push(i)
        }
        return n
      }

      function i(t) {
        if (li(t))return t;
        if (w(t))return t.split(" ");
        if (y(t)) {
          var e = [];
          return o(t, function(t, n) {
            t && (e = e.concat(n.split(" ")))
          }), e
        }
        return t
      }

      return {
        restrict: "AC", link: function(a, s, u) {
          function c(t) {
            var e = f(t, 1);
            u.$addClass(e)
          }

          function l(t) {
            var e = f(t, -1);
            u.$removeClass(e)
          }

          function f(t, e) {
            var n = s.data("$classCounts") || {}, r = [];
            return o(t, function(t) {
              (e > 0 || n[t]) && (n[t] = (n[t] || 0) + e, n[t] === +(e > 0) && r.push(t))
            }), s.data("$classCounts", n), r.join(" ")
          }

          function h(t, e) {
            var i = r(e, t), o = r(t, e);
            i = f(i, 1), o = f(o, -1), i && i.length && n.addClass(s, i), o && o.length && n.removeClass(s, o)
          }

          function p(t) {
            if (e === !0 || a.$index % 2 === e) {
              var n = i(t || []);
              if ($) {
                if (!I(t, $)) {
                  var r = i($);
                  h(r, n)
                }
              } else c(n)
            }
            $ = q(t)
          }

          var $;
          a.$watch(u[t], p, !0), u.$observe("class", function() {
            p(a.$eval(u[t]))
          }), "ngClass" !== t && a.$watch("$index", function(n, r) {
            var o = 1 & n;
            if (o !== (1 & r)) {
              var s = i(a.$eval(u[t]));
              o === e ? c(s) : l(s)
            }
          })
        }
      }
    }]
  }

  var zr = /^\/(.+)\/([a-z]*)$/, Wr = "validity", Gr = function(t) {
    return w(t) ? t.toLowerCase() : t
  }, Jr = Object.prototype.hasOwnProperty, Yr = function(t) {
    return w(t) ? t.toUpperCase() : t
  }, Zr = function(t) {
    return w(t) ? t.replace(/[A-Z]/g, function(t) {
      return String.fromCharCode(32 | t.charCodeAt(0))
    }) : t
  }, Kr = function(t) {
    return w(t) ? t.replace(/[a-z]/g, function(t) {
      return String.fromCharCode(-33 & t.charCodeAt(0))
    }) : t
  };
  "i" !== "I".toLowerCase() && (Gr = Zr, Yr = Kr);
  var Xr, Qr, ti, ei, ni = [].slice, ri = [].splice, ii = [].push, oi = Object.prototype.toString, ai = r("ng"), si = t.angular || (t.angular = {}), ui = 0;
  Xr = e.documentMode, $.$inject = [], d.$inject = [];
  var ci, li = Array.isArray, fi = function(t) {
    return w(t) ? t.trim() : t
  }, hi = function(t) {
    return t.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
  }, pi = function() {
    if (g(pi.isActive_))return pi.isActive_;
    var t = !(!e.querySelector("[ng-csp]") && !e.querySelector("[data-ng-csp]"));
    if (!t)try {
      new Function("")
    } catch (n) {
      t = !0
    }
    return pi.isActive_ = t
  }, $i = ["ng-", "data-ng-", "ng:", "x-ng-"], di = /[A-Z]/g, vi = !1, mi = 1, gi = 3, yi = 8, wi = 9, bi = 11, xi = {
    full: "1.3.8",
    major: 1,
    minor: 3,
    dot: 8,
    codeName: "prophetic-narwhal"
  };
  we.expando = "ng339";
  var Si = we.cache = {}, Ci = 1, Ai = function(t, e, n) {
    t.addEventListener(e, n, !1)
  }, ki = function(t, e, n) {
    t.removeEventListener(e, n, !1)
  };
  we._data = function(t) {
    return this.cache[t[this.expando]] || {}
  };
  var Ei = /([\:\-\_]+(.))/g, Oi = /^moz([A-Z])/, Ti = {
    mouseleave: "mouseout",
    mouseenter: "mouseover"
  }, Mi = r("jqLite"), Vi = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, Ni = /<|&#?\w+;/, ji = /<([\w:]+)/, Di = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, Pi = {
    option: [1, '<select multiple="multiple">', "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  Pi.optgroup = Pi.option, Pi.tbody = Pi.tfoot = Pi.colgroup = Pi.caption = Pi.thead, Pi.th = Pi.td;
  var Ri = we.prototype = {
    ready: function(n) {
      function r() {
        i || (i = !0, n())
      }

      var i = !1;
      "complete" === e.readyState ? setTimeout(r) : (this.on("DOMContentLoaded", r), we(t).on("load", r))
    }, toString: function() {
      var t = [];
      return o(this, function(e) {
        t.push("" + e)
      }), "[" + t.join(", ") + "]"
    }, eq: function(t) {
      return Qr(t >= 0 ? this[t] : this[this.length + t])
    }, length: 0, push: ii, sort: [].sort, splice: [].splice
  }, qi = {};
  o("multiple,selected,checked,disabled,readOnly,required,open".split(","), function(t) {
    qi[Gr(t)] = t
  });
  var Ii = {};
  o("input,select,option,textarea,button,form,details".split(","), function(t) {
    Ii[t] = !0
  });
  var Ui = { ngMinlength: "minlength", ngMaxlength: "maxlength", ngMin: "min", ngMax: "max", ngPattern: "pattern" };
  o({ data: ke, removeData: Ce }, function(t, e) {
    we[e] = t
  }), o({
    data: ke, inheritedData: Ne, scope: function(t) {
      return Qr.data(t, "$scope") || Ne(t.parentNode || t, ["$isolateScope", "$scope"])
    }, isolateScope: function(t) {
      return Qr.data(t, "$isolateScope") || Qr.data(t, "$isolateScopeNoTemplate")
    }, controller: Ve, injector: function(t) {
      return Ne(t, "$injector")
    }, removeAttr: function(t, e) {
      t.removeAttribute(e)
    }, hasClass: Ee, css: function(t, e, n) {
      return e = de(e), g(n) ? void(t.style[e] = n) : t.style[e]
    }, attr: function(t, e, r) {
      var i = Gr(e);
      if (qi[i]) {
        if (!g(r))return t[e] || (t.attributes.getNamedItem(e) || $).specified ? i : n;
        r ? (t[e] = !0, t.setAttribute(e, i)) : (t[e] = !1, t.removeAttribute(i))
      } else if (g(r))t.setAttribute(e, r); else if (t.getAttribute) {
        var o = t.getAttribute(e, 2);
        return null === o ? n : o
      }
    }, prop: function(t, e, n) {
      return g(n) ? void(t[e] = n) : t[e]
    }, text: function() {
      function t(t, e) {
        if (m(e)) {
          var n = t.nodeType;
          return n === mi || n === gi ? t.textContent : ""
        }
        t.textContent = e
      }

      return t.$dv = "", t
    }(), val: function(t, e) {
      if (m(e)) {
        if (t.multiple && "select" === D(t)) {
          var n = [];
          return o(t.options, function(t) {
            t.selected && n.push(t.value || t.text)
          }), 0 === n.length ? null : n
        }
        return t.value
      }
      t.value = e
    }, html: function(t, e) {
      return m(e) ? t.innerHTML : (xe(t, !0), void(t.innerHTML = e))
    }, empty: je
  }, function(t, e) {
    we.prototype[e] = function(e, r) {
      var i, o, a = this.length;
      if (t !== je && (2 == t.length && t !== Ee && t !== Ve ? e : r) === n) {
        if (y(e)) {
          for (i = 0; a > i; i++)if (t === ke)t(this[i], e); else for (o in e)t(this[i], o, e[o]);
          return this
        }
        for (var s = t.$dv, u = s === n ? Math.min(a, 1) : a, c = 0; u > c; c++) {
          var l = t(this[c], e, r);
          s = s ? s + l : l
        }
        return s
      }
      for (i = 0; a > i; i++)t(this[i], e, r);
      return this
    }
  }), o({
    removeData: Ce, on: function Ba(t, e, n, r) {
      if (g(r))throw Mi("onargs", "jqLite#on() does not support the `selector` or `eventData` parameters");
      if (me(t)) {
        var i = Ae(t, !0), o = i.events, a = i.handle;
        a || (a = i.handle = Ie(t, o));
        for (var s = e.indexOf(" ") >= 0 ? e.split(" ") : [e], u = s.length; u--;) {
          e = s[u];
          var c = o[e];
          c || (o[e] = [], "mouseenter" === e || "mouseleave" === e ? Ba(t, Ti[e], function(t) {
            var n = this, r = t.relatedTarget;
            (!r || r !== n && !n.contains(r)) && a(t, e)
          }) : "$destroy" !== e && Ai(t, e, a), c = o[e]), c.push(n)
        }
      }
    }, off: Se, one: function(t, e, n) {
      t = Qr(t), t.on(e, function r() {
        t.off(e, n), t.off(e, r)
      }), t.on(e, n)
    }, replaceWith: function(t, e) {
      var n, r = t.parentNode;
      xe(t), o(new we(e), function(e) {
        n ? r.insertBefore(e, n.nextSibling) : r.replaceChild(e, t), n = e
      })
    }, children: function(t) {
      var e = [];
      return o(t.childNodes, function(t) {
        t.nodeType === mi && e.push(t)
      }), e
    }, contents: function(t) {
      return t.contentDocument || t.childNodes || []
    }, append: function(t, e) {
      var n = t.nodeType;
      if (n === mi || n === bi) {
        e = new we(e);
        for (var r = 0, i = e.length; i > r; r++) {
          var o = e[r];
          t.appendChild(o)
        }
      }
    }, prepend: function(t, e) {
      if (t.nodeType === mi) {
        var n = t.firstChild;
        o(new we(e), function(e) {
          t.insertBefore(e, n)
        })
      }
    }, wrap: function(t, e) {
      e = Qr(e).eq(0).clone()[0];
      var n = t.parentNode;
      n && n.replaceChild(e, t), e.appendChild(t)
    }, remove: De, detach: function(t) {
      De(t, !0)
    }, after: function(t, e) {
      var n = t, r = t.parentNode;
      e = new we(e);
      for (var i = 0, o = e.length; o > i; i++) {
        var a = e[i];
        r.insertBefore(a, n.nextSibling), n = a
      }
    }, addClass: Te, removeClass: Oe, toggleClass: function(t, e, n) {
      e && o(e.split(" "), function(e) {
        var r = n;
        m(r) && (r = !Ee(t, e)), (r ? Te : Oe)(t, e)
      })
    }, parent: function(t) {
      var e = t.parentNode;
      return e && e.nodeType !== bi ? e : null
    }, next: function(t) {
      return t.nextElementSibling
    }, find: function(t, e) {
      return t.getElementsByTagName ? t.getElementsByTagName(e) : []
    }, clone: be, triggerHandler: function(t, e, n) {
      var r, i, a, s = e.type || e, u = Ae(t), c = u && u.events, l = c && c[s];
      l && (r = {
        preventDefault: function() {
          this.defaultPrevented = !0
        }, isDefaultPrevented: function() {
          return this.defaultPrevented === !0
        }, stopImmediatePropagation: function() {
          this.immediatePropagationStopped = !0
        }, isImmediatePropagationStopped: function() {
          return this.immediatePropagationStopped === !0
        }, stopPropagation: $, type: s, target: t
      }, e.type && (r = f(r, e)), i = q(l), a = n ? [r].concat(n) : [r], o(i, function(e) {
        r.isImmediatePropagationStopped() || e.apply(t, a)
      }))
    }
  }, function(t, e) {
    we.prototype[e] = function(e, n, r) {
      for (var i, o = 0, a = this.length; a > o; o++)m(i) ? (i = t(this[o], e, n, r), g(i) && (i = Qr(i))) : Me(i, t(this[o], e, n, r));
      return g(i) ? i : this
    }, we.prototype.bind = we.prototype.on, we.prototype.unbind = we.prototype.off
  }), Fe.prototype = {
    put: function(t, e) {
      this[_e(t, this.nextUid)] = e
    }, get: function(t) {
      return this[_e(t, this.nextUid)]
    }, remove: function(t) {
      var e = this[t = _e(t, this.nextUid)];
      return delete this[t], e
    }
  };
  var _i = /^function\s*[^\(]*\(\s*([^\)]*)\)/m, Fi = /,/, Hi = /^\s*(_?)(\S+?)\1\s*$/, Li = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, Bi = r("$injector");
  Be.$$annotate = Le;
  var zi = r("$animate"), Wi = ["$provide", function(t) {
    this.$$selectors = {}, this.register = function(e, n) {
      var r = e + "-animation";
      if (e && "." != e.charAt(0))throw zi("notcsel", "Expecting class selector starting with '.' got '{0}'.", e);
      this.$$selectors[e.substr(1)] = r, t.factory(r, n)
    }, this.classNameFilter = function(t) {
      return 1 === arguments.length && (this.$$classNameFilter = t instanceof RegExp ? t : null), this.$$classNameFilter
    }, this.$get = ["$$q", "$$asyncCallback", "$rootScope", function(t, e, n) {
      function r(e) {
        var r, i = t.defer();
        return i.promise.$$cancelFn = function() {
          r && r()
        }, n.$$postDigest(function() {
          r = e(function() {
            i.resolve()
          })
        }), i.promise
      }

      function i(t, e) {
        var n = [], r = [], i = ce();
        return o((t.attr("class") || "").split(/\s+/), function(t) {
          i[t] = !0
        }), o(e, function(t, e) {
          var o = i[e];
          t === !1 && o ? r.push(e) : t !== !0 || o || n.push(e)
        }), n.length + r.length > 0 && [n.length ? n : null, r.length ? r : null]
      }

      function a(t, e, n) {
        for (var r = 0, i = e.length; i > r; ++r) {
          var o = e[r];
          t[o] = n
        }
      }

      function s() {
        return c || (c = t.defer(), e(function() {
          c.resolve(), c = null
        })), c.promise
      }

      function u(t, e) {
        if (si.isObject(e)) {
          var n = f(e.from || {}, e.to || {});
          t.css(n)
        }
      }

      var c;
      return {
        animate: function(t, e, n) {
          return u(t, { from: e, to: n }), s()
        }, enter: function(t, e, n, r) {
          return u(t, r), n ? n.after(t) : e.prepend(t), s()
        }, leave: function(t) {
          return t.remove(), s()
        }, move: function(t, e, n, r) {
          return this.enter(t, e, n, r)
        }, addClass: function(t, e, n) {
          return this.setClass(t, e, [], n)
        }, $$addClassImmediately: function(t, e, n) {
          return t = Qr(t), e = w(e) ? e : li(e) ? e.join(" ") : "", o(t, function(t) {
            Te(t, e)
          }), u(t, n), s()
        }, removeClass: function(t, e, n) {
          return this.setClass(t, [], e, n)
        }, $$removeClassImmediately: function(t, e, n) {
          return t = Qr(t), e = w(e) ? e : li(e) ? e.join(" ") : "", o(t, function(t) {
            Oe(t, e)
          }), u(t, n), s()
        }, setClass: function(t, e, n, o) {
          var s = this, u = "$$animateClasses", c = !1;
          t = Qr(t);
          var l = t.data(u);
          l ? o && l.options && (l.options = si.extend(l.options || {}, o)) : (l = { classes: {}, options: o }, c = !0);
          var f = l.classes;
          return e = li(e) ? e : e.split(" "), n = li(n) ? n : n.split(" "), a(f, e, !0), a(f, n, !1), c && (l.promise = r(function(e) {
            var n = t.data(u);
            if (t.removeData(u), n) {
              var r = i(t, n.classes);
              r && s.$$setClassImmediately(t, r[0], r[1], n.options)
            }
            e()
          }), t.data(u, l)), l.promise
        }, $$setClassImmediately: function(t, e, n, r) {
          return e && this.$$addClassImmediately(t, e), n && this.$$removeClassImmediately(t, n), u(t, r), s()
        }, enabled: $, cancel: $
      }
    }]
  }], Gi = r("$compile");
  Ke.$inject = ["$provide", "$$sanitizeUriProvider"];
  var Ji = /^((?:x|data)[\:\-_])/i, Yi = "application/json", Zi = { "Content-Type": Yi + ";charset=utf-8" }, Ki = /^\[|^\{(?!\{)/, Xi = {
    "[": /]$/,
    "{": /}$/
  }, Qi = /^\)\]\}',?\n/, to = r("$interpolate"), eo = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, no = {
    http: 80,
    https: 443,
    ftp: 21
  }, ro = r("$location"), io = {
    $$html5: !1, $$replace: !1, absUrl: Tn("$$absUrl"), url: function(t) {
      if (m(t))return this.$$url;
      var e = eo.exec(t);
      return (e[1] || "" === t) && this.path(decodeURIComponent(e[1])), (e[2] || e[1] || "" === t) && this.search(e[3] || ""), this.hash(e[5] || ""), this
    }, protocol: Tn("$$protocol"), host: Tn("$$host"), port: Tn("$$port"), path: Mn("$$path", function(t) {
      return t = null !== t ? t.toString() : "", "/" == t.charAt(0) ? t : "/" + t
    }), search: function(t, e) {
      switch (arguments.length) {
        case 0:
          return this.$$search;
        case 1:
          if (w(t) || b(t))t = t.toString(), this.$$search = G(t); else {
            if (!y(t))throw ro("isrcharg", "The first argument of the `$location#search()` call must be a string or an object.");
            t = R(t, {}), o(t, function(e, n) {
              null == e && delete t[n]
            }), this.$$search = t
          }
          break;
        default:
          m(e) || null === e ? delete this.$$search[t] : this.$$search[t] = e
      }
      return this.$$compose(), this
    }, hash: Mn("$$hash", function(t) {
      return null !== t ? t.toString() : ""
    }), replace: function() {
      return this.$$replace = !0, this
    }
  };
  o([On, En, kn], function(t) {
    t.prototype = Object.create(io), t.prototype.state = function(e) {
      if (!arguments.length)return this.$$state;
      if (t !== kn || !this.$$html5)throw ro("nostate", "History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");
      return this.$$state = m(e) ? null : e, this
    }
  });
  var oo = r("$parse"), ao = Function.prototype.call, so = Function.prototype.apply, uo = Function.prototype.bind, co = ce();
  o({
    "null": function() {
      return null
    }, "true": function() {
      return !0
    }, "false": function() {
      return !1
    }, undefined: function() {
    }
  }, function(t, e) {
    t.constant = t.literal = t.sharedGetter = !0, co[e] = t
  }), co["this"] = function(t) {
    return t
  }, co["this"].sharedGetter = !0;
  var lo = f(ce(), {
    "+": function(t, e, r, i) {
      return r = r(t, e), i = i(t, e), g(r) ? g(i) ? r + i : r : g(i) ? i : n
    }, "-": function(t, e, n, r) {
      return n = n(t, e), r = r(t, e), (g(n) ? n : 0) - (g(r) ? r : 0)
    }, "*": function(t, e, n, r) {
      return n(t, e) * r(t, e)
    }, "/": function(t, e, n, r) {
      return n(t, e) / r(t, e)
    }, "%": function(t, e, n, r) {
      return n(t, e) % r(t, e)
    }, "===": function(t, e, n, r) {
      return n(t, e) === r(t, e)
    }, "!==": function(t, e, n, r) {
      return n(t, e) !== r(t, e)
    }, "==": function(t, e, n, r) {
      return n(t, e) == r(t, e)
    }, "!=": function(t, e, n, r) {
      return n(t, e) != r(t, e)
    }, "<": function(t, e, n, r) {
      return n(t, e) < r(t, e)
    }, ">": function(t, e, n, r) {
      return n(t, e) > r(t, e)
    }, "<=": function(t, e, n, r) {
      return n(t, e) <= r(t, e)
    }, ">=": function(t, e, n, r) {
      return n(t, e) >= r(t, e)
    }, "&&": function(t, e, n, r) {
      return n(t, e) && r(t, e)
    }, "||": function(t, e, n, r) {
      return n(t, e) || r(t, e)
    }, "!": function(t, e, n) {
      return !n(t, e)
    }, "=": !0, "|": !0
  }), fo = { n: "\n", f: "\f", r: "\r", t: "	", v: "", "'": "'", '"': '"' }, ho = function(t) {
    this.options = t
  };
  ho.prototype = {
    constructor: ho, lex: function(t) {
      for (this.text = t, this.index = 0, this.tokens = []; this.index < this.text.length;) {
        var e = this.text.charAt(this.index);
        if ('"' === e || "'" === e)this.readString(e); else if (this.isNumber(e) || "." === e && this.isNumber(this.peek()))this.readNumber(); else if (this.isIdent(e))this.readIdent(); else if (this.is(e, "(){}[].,;:?"))this.tokens.push({
          index: this.index,
          text: e
        }), this.index++; else if (this.isWhitespace(e))this.index++; else {
          var n = e + this.peek(), r = n + this.peek(2), i = lo[e], o = lo[n], a = lo[r];
          if (i || o || a) {
            var s = a ? r : o ? n : e;
            this.tokens.push({ index: this.index, text: s, operator: !0 }), this.index += s.length
          } else this.throwError("Unexpected next character ", this.index, this.index + 1)
        }
      }
      return this.tokens
    }, is: function(t, e) {
      return -1 !== e.indexOf(t)
    }, peek: function(t) {
      var e = t || 1;
      return this.index + e < this.text.length ? this.text.charAt(this.index + e) : !1
    }, isNumber: function(t) {
      return t >= "0" && "9" >= t && "string" == typeof t
    }, isWhitespace: function(t) {
      return " " === t || "\r" === t || "	" === t || "\n" === t || "" === t || " " === t
    }, isIdent: function(t) {
      return t >= "a" && "z" >= t || t >= "A" && "Z" >= t || "_" === t || "$" === t
    }, isExpOperator: function(t) {
      return "-" === t || "+" === t || this.isNumber(t)
    }, throwError: function(t, e, n) {
      n = n || this.index;
      var r = g(e) ? "s " + e + "-" + this.index + " [" + this.text.substring(e, n) + "]" : " " + n;
      throw oo("lexerr", "Lexer Error: {0} at column{1} in expression [{2}].", t, r, this.text)
    }, readNumber: function() {
      for (var t = "", e = this.index; this.index < this.text.length;) {
        var n = Gr(this.text.charAt(this.index));
        if ("." == n || this.isNumber(n))t += n; else {
          var r = this.peek();
          if ("e" == n && this.isExpOperator(r))t += n; else if (this.isExpOperator(n) && r && this.isNumber(r) && "e" == t.charAt(t.length - 1))t += n; else {
            if (!this.isExpOperator(n) || r && this.isNumber(r) || "e" != t.charAt(t.length - 1))break;
            this.throwError("Invalid exponent")
          }
        }
        this.index++
      }
      this.tokens.push({ index: e, text: t, constant: !0, value: Number(t) })
    }, readIdent: function() {
      for (var t = this.index; this.index < this.text.length;) {
        var e = this.text.charAt(this.index);
        if (!this.isIdent(e) && !this.isNumber(e))break;
        this.index++
      }
      this.tokens.push({ index: t, text: this.text.slice(t, this.index), identifier: !0 })
    }, readString: function(t) {
      var e = this.index;
      this.index++;
      for (var n = "", r = t, i = !1; this.index < this.text.length;) {
        var o = this.text.charAt(this.index);
        if (r += o, i) {
          if ("u" === o) {
            var a = this.text.substring(this.index + 1, this.index + 5);
            a.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + a + "]"), this.index += 4, n += String.fromCharCode(parseInt(a, 16))
          } else {
            var s = fo[o];
            n += s || o
          }
          i = !1
        } else if ("\\" === o)i = !0; else {
          if (o === t)return this.index++, void this.tokens.push({ index: e, text: r, constant: !0, value: n });
          n += o
        }
        this.index++
      }
      this.throwError("Unterminated quote", e)
    }
  };
  var po = function(t, e, n) {
    this.lexer = t, this.$filter = e, this.options = n
  };
  po.ZERO = f(function() {
    return 0
  }, { sharedGetter: !0, constant: !0 }), po.prototype = {
    constructor: po, parse: function(t) {
      this.text = t, this.tokens = this.lexer.lex(t);
      var e = this.statements();
      return 0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]), e.literal = !!e.literal, e.constant = !!e.constant, e
    }, primary: function() {
      var t;
      this.expect("(") ? (t = this.filterChain(), this.consume(")")) : this.expect("[") ? t = this.arrayDeclaration() : this.expect("{") ? t = this.object() : this.peek().identifier && this.peek().text in co ? t = co[this.consume().text] : this.peek().identifier ? t = this.identifier() : this.peek().constant ? t = this.constant() : this.throwError("not a primary expression", this.peek());
      for (var e, n; e = this.expect("(", "[", ".");)"(" === e.text ? (t = this.functionCall(t, n), n = null) : "[" === e.text ? (n = t, t = this.objectIndex(t)) : "." === e.text ? (n = t, t = this.fieldAccess(t)) : this.throwError("IMPOSSIBLE");
      return t
    }, throwError: function(t, e) {
      throw oo("syntax", "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].", e.text, t, e.index + 1, this.text, this.text.substring(e.index))
    }, peekToken: function() {
      if (0 === this.tokens.length)throw oo("ueoe", "Unexpected end of expression: {0}", this.text);
      return this.tokens[0]
    }, peek: function(t, e, n, r) {
      return this.peekAhead(0, t, e, n, r)
    }, peekAhead: function(t, e, n, r, i) {
      if (this.tokens.length > t) {
        var o = this.tokens[t], a = o.text;
        if (a === e || a === n || a === r || a === i || !e && !n && !r && !i)return o
      }
      return !1
    }, expect: function(t, e, n, r) {
      var i = this.peek(t, e, n, r);
      return i ? (this.tokens.shift(), i) : !1
    }, consume: function(t) {
      if (0 === this.tokens.length)throw oo("ueoe", "Unexpected end of expression: {0}", this.text);
      var e = this.expect(t);
      return e || this.throwError("is unexpected, expecting [" + t + "]", this.peek()), e
    }, unaryFn: function(t, e) {
      var n = lo[t];
      return f(function(t, r) {
        return n(t, r, e)
      }, { constant: e.constant, inputs: [e] })
    }, binaryFn: function(t, e, n, r) {
      var i = lo[e];
      return f(function(e, r) {
        return i(e, r, t, n)
      }, { constant: t.constant && n.constant, inputs: !r && [t, n] })
    }, identifier: function() {
      for (var t = this.consume().text; this.peek(".") && this.peekAhead(1).identifier && !this.peekAhead(2, "(");)t += this.consume().text + this.consume().text;
      return Fn(t, this.options, this.text)
    }, constant: function() {
      var t = this.consume().value;
      return f(function() {
        return t
      }, { constant: !0, literal: !0 })
    }, statements: function() {
      for (var t = []; ;)if (this.tokens.length > 0 && !this.peek("}", ")", ";", "]") && t.push(this.filterChain()), !this.expect(";"))return 1 === t.length ? t[0] : function(e, n) {
        for (var r, i = 0, o = t.length; o > i; i++)r = t[i](e, n);
        return r
      }
    }, filterChain: function() {
      for (var t, e = this.expression(); t = this.expect("|");)e = this.filter(e);
      return e
    }, filter: function(t) {
      var e, r, i = this.$filter(this.consume().text);
      if (this.peek(":"))for (e = [], r = []; this.expect(":");)e.push(this.expression());
      var o = [t].concat(e || []);
      return f(function(o, a) {
        var s = t(o, a);
        if (r) {
          r[0] = s;
          for (var u = e.length; u--;)r[u + 1] = e[u](o, a);
          return i.apply(n, r)
        }
        return i(s)
      }, { constant: !i.$stateful && o.every(Rn), inputs: !i.$stateful && o })
    }, expression: function() {
      return this.assignment()
    }, assignment: function() {
      var t, e, n = this.ternary();
      return (e = this.expect("=")) ? (n.assign || this.throwError("implies assignment but [" + this.text.substring(0, e.index) + "] can not be assigned to", e), t = this.ternary(), f(function(e, r) {
        return n.assign(e, t(e, r), r)
      }, { inputs: [n, t] })) : n
    }, ternary: function() {
      var t, e, n = this.logicalOR();
      if ((e = this.expect("?")) && (t = this.assignment(), this.consume(":"))) {
        var r = this.assignment();
        return f(function(e, i) {
          return n(e, i) ? t(e, i) : r(e, i)
        }, { constant: n.constant && t.constant && r.constant })
      }
      return n
    }, logicalOR: function() {
      for (var t, e = this.logicalAND(); t = this.expect("||");)e = this.binaryFn(e, t.text, this.logicalAND(), !0);
      return e
    }, logicalAND: function() {
      for (var t, e = this.equality(); t = this.expect("&&");)e = this.binaryFn(e, t.text, this.equality(), !0);
      return e
    }, equality: function() {
      for (var t, e = this.relational(); t = this.expect("==", "!=", "===", "!==");)e = this.binaryFn(e, t.text, this.relational());
      return e
    }, relational: function() {
      for (var t, e = this.additive(); t = this.expect("<", ">", "<=", ">=");)e = this.binaryFn(e, t.text, this.additive());
      return e
    }, additive: function() {
      for (var t, e = this.multiplicative(); t = this.expect("+", "-");)e = this.binaryFn(e, t.text, this.multiplicative());
      return e
    }, multiplicative: function() {
      for (var t, e = this.unary(); t = this.expect("*", "/", "%");)e = this.binaryFn(e, t.text, this.unary());
      return e
    }, unary: function() {
      var t;
      return this.expect("+") ? this.primary() : (t = this.expect("-")) ? this.binaryFn(po.ZERO, t.text, this.unary()) : (t = this.expect("!")) ? this.unaryFn(t.text, this.unary()) : this.primary()
    }, fieldAccess: function(t) {
      var e = this.identifier();
      return f(function(r, i, o) {
        var a = o || t(r, i);
        return null == a ? n : e(a)
      }, {
        assign: function(n, r, i) {
          var o = t(n, i);
          return o || t.assign(n, o = {}), e.assign(o, r)
        }
      })
    }, objectIndex: function(t) {
      var e = this.text, r = this.expression();
      return this.consume("]"), f(function(i, o) {
        var a, s = t(i, o), u = r(i, o);
        return jn(u, e), s ? a = Dn(s[u], e) : n
      }, {
        assign: function(n, i, o) {
          var a = jn(r(n, o), e), s = Dn(t(n, o), e);
          return s || t.assign(n, s = {}), s[a] = i
        }
      })
    }, functionCall: function(t, e) {
      var r = [];
      if (")" !== this.peekToken().text)do r.push(this.expression()); while (this.expect(","));
      this.consume(")");
      var i = this.text, o = r.length ? [] : null;
      return function(a, s) {
        var u = e ? e(a, s) : g(e) ? n : a, c = t(a, s, u) || $;
        if (o)for (var l = r.length; l--;)o[l] = Dn(r[l](a, s), i);
        Dn(u, i), Pn(c, i);
        var f = c.apply ? c.apply(u, o) : c(o[0], o[1], o[2], o[3], o[4]);
        return Dn(f, i)
      }
    }, arrayDeclaration: function() {
      var t = [];
      if ("]" !== this.peekToken().text)do {
        if (this.peek("]"))break;
        t.push(this.expression())
      } while (this.expect(","));
      return this.consume("]"), f(function(e, n) {
        for (var r = [], i = 0, o = t.length; o > i; i++)r.push(t[i](e, n));
        return r
      }, { literal: !0, constant: t.every(Rn), inputs: t })
    }, object: function() {
      var t = [], e = [];
      if ("}" !== this.peekToken().text)do {
        if (this.peek("}"))break;
        var n = this.consume();
        n.constant ? t.push(n.value) : n.identifier ? t.push(n.text) : this.throwError("invalid key", n), this.consume(":"), e.push(this.expression())
      } while (this.expect(","));
      return this.consume("}"), f(function(n, r) {
        for (var i = {}, o = 0, a = e.length; a > o; o++)i[t[o]] = e[o](n, r);
        return i
      }, { literal: !0, constant: e.every(Rn), inputs: e })
    }
  };
  var $o = ce(), vo = ce(), mo = Object.prototype.valueOf, go = r("$sce"), yo = {
    HTML: "html",
    CSS: "css",
    URL: "url",
    RESOURCE_URL: "resourceUrl",
    JS: "js"
  }, Gi = r("$compile"), wo = e.createElement("a"), bo = ir(t.location.href);
  sr.$inject = ["$provide"], fr.$inject = ["$locale"], hr.$inject = ["$locale"];
  var xo = ".", So = {
    yyyy: dr("FullYear", 4),
    yy: dr("FullYear", 2, 0, !0),
    y: dr("FullYear", 1),
    MMMM: vr("Month"),
    MMM: vr("Month", !0),
    MM: dr("Month", 2, 1),
    M: dr("Month", 1, 1),
    dd: dr("Date", 2),
    d: dr("Date", 1),
    HH: dr("Hours", 2),
    H: dr("Hours", 1),
    hh: dr("Hours", 2, -12),
    h: dr("Hours", 1, -12),
    mm: dr("Minutes", 2),
    m: dr("Minutes", 1),
    ss: dr("Seconds", 2),
    s: dr("Seconds", 1),
    sss: dr("Milliseconds", 3),
    EEEE: vr("Day"),
    EEE: vr("Day", !0),
    a: br,
    Z: mr,
    ww: wr(2),
    w: wr(1)
  }, Co = /((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/, Ao = /^\-?\d+$/;
  xr.$inject = ["$locale"];
  var ko = v(Gr), Eo = v(Yr);
  Ar.$inject = ["$parse"];
  var Oo = v({
    restrict: "E", compile: function(t, e) {
      return e.href || e.xlinkHref || e.name ? void 0 : function(t, e) {
        var n = "[object SVGAnimatedString]" === oi.call(e.prop("href")) ? "xlink:href" : "href";
        e.on("click", function(t) {
          e.attr(n) || t.preventDefault()
        })
      }
    }
  }), To = {};
  o(qi, function(t, e) {
    if ("multiple" != t) {
      var n = Xe("ng-" + e);
      To[n] = function() {
        return {
          restrict: "A", priority: 100, link: function(t, r, i) {
            t.$watch(i[n], function(t) {
              i.$set(e, !!t)
            })
          }
        }
      }
    }
  }), o(Ui, function(t, e) {
    To[e] = function() {
      return {
        priority: 100, link: function(t, n, r) {
          if ("ngPattern" === e && "/" == r.ngPattern.charAt(0)) {
            var i = r.ngPattern.match(zr);
            if (i)return void r.$set("ngPattern", new RegExp(i[1], i[2]))
          }
          t.$watch(r[e], function(t) {
            r.$set(e, t)
          })
        }
      }
    }
  }), o(["src", "srcset", "href"], function(t) {
    var e = Xe("ng-" + t);
    To[e] = function() {
      return {
        priority: 99, link: function(n, r, i) {
          var o = t, a = t;
          "href" === t && "[object SVGAnimatedString]" === oi.call(r.prop("href")) && (a = "xlinkHref", i.$attr[a] = "xlink:href", o = null), i.$observe(e, function(e) {
            return e ? (i.$set(a, e), void(Xr && o && r.prop(o, i[a]))) : void("href" === t && i.$set(a, null))
          })
        }
      }
    }
  });
  var Mo = {
    $addControl: $,
    $$renameControl: Er,
    $removeControl: $,
    $setValidity: $,
    $setDirty: $,
    $setPristine: $,
    $setSubmitted: $
  }, Vo = "ng-submitted";
  Or.$inject = ["$element", "$attrs", "$scope", "$animate", "$interpolate"];
  var No = function(t) {
    return ["$timeout", function(e) {
      var r = {
        name: "form", restrict: t ? "EAC" : "E", controller: Or, compile: function(t) {
          return t.addClass(Zo).addClass(Jo), {
            pre: function(t, r, i, o) {
              if (!("action" in i)) {
                var a = function(e) {
                  t.$apply(function() {
                    o.$commitViewValue(), o.$setSubmitted()
                  }), e.preventDefault()
                };
                Ai(r[0], "submit", a), r.on("$destroy", function() {
                  e(function() {
                    ki(r[0], "submit", a)
                  }, 0, !1)
                })
              }
              var s = o.$$parentForm, u = o.$name;
              u && (qn(t, u, o, u), i.$observe(i.name ? "name" : "ngForm", function(e) {
                u !== e && (qn(t, u, n, u), u = e, qn(t, u, o, u), s.$$renameControl(o, u))
              })), r.on("$destroy", function() {
                s.$removeControl(o), u && qn(t, u, n, u), f(o, Mo)
              })
            }
          }
        }
      };
      return r
    }]
  }, jo = No(), Do = No(!0), Po = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/, Ro = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/, qo = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i, Io = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/, Uo = /^(\d{4})-(\d{2})-(\d{2})$/, _o = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, Fo = /^(\d{4})-W(\d\d)$/, Ho = /^(\d{4})-(\d\d)$/, Lo = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, Bo = /(\s+|^)default(\s+|$)/, zo = new r("ngModel"), Wo = {
    text: Mr,
    date: Dr("date", Uo, jr(Uo, ["yyyy", "MM", "dd"]), "yyyy-MM-dd"),
    "datetime-local": Dr("datetimelocal", _o, jr(_o, ["yyyy", "MM", "dd", "HH", "mm", "ss", "sss"]), "yyyy-MM-ddTHH:mm:ss.sss"),
    time: Dr("time", Lo, jr(Lo, ["HH", "mm", "ss", "sss"]), "HH:mm:ss.sss"),
    week: Dr("week", Fo, Nr, "yyyy-Www"),
    month: Dr("month", Ho, jr(Ho, ["yyyy", "MM"]), "yyyy-MM"),
    number: Rr,
    url: qr,
    email: Ir,
    radio: Ur,
    checkbox: Fr,
    hidden: $,
    button: $,
    submit: $,
    reset: $,
    file: $
  }, Go = ["$browser", "$sniffer", "$filter", "$parse", function(t, e, n, r) {
    return {
      restrict: "E", require: ["?ngModel"], link: {
        pre: function(i, o, a, s) {
          s[0] && (Wo[Gr(a.type)] || Wo.text)(i, o, a, s[0], e, t, n, r)
        }
      }
    }
  }], Jo = "ng-valid", Yo = "ng-invalid", Zo = "ng-pristine", Ko = "ng-dirty", Xo = "ng-untouched", Qo = "ng-touched", ta = "ng-pending", ea = ["$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$rootScope", "$q", "$interpolate", function(t, e, r, i, a, s, u, c, l, f) {
    this.$viewValue = Number.NaN, this.$modelValue = Number.NaN, this.$$rawModelValue = n, this.$validators = {}, this.$asyncValidators = {}, this.$parsers = [], this.$formatters = [], this.$viewChangeListeners = [], this.$untouched = !0, this.$touched = !1, this.$pristine = !0, this.$dirty = !1, this.$valid = !0, this.$invalid = !1, this.$error = {}, this.$$success = {}, this.$pending = n, this.$name = f(r.name || "", !1)(t);
    var h = a(r.ngModel), p = h.assign, d = h, v = p, y = null, w = this;
    this.$$setOptions = function(t) {
      if (w.$options = t, t && t.getterSetter) {
        var e = a(r.ngModel + "()"), n = a(r.ngModel + "($$$p)");
        d = function(t) {
          var n = h(t);
          return S(n) && (n = e(t)), n
        }, v = function(t) {
          S(h(t)) ? n(t, { $$$p: w.$modelValue }) : p(t, w.$modelValue)
        }
      } else if (!h.assign)throw zo("nonassign", "Expression '{0}' is non-assignable. Element: {1}", r.ngModel, z(i))
    }, this.$render = $, this.$isEmpty = function(t) {
      return m(t) || "" === t || null === t || t !== t
    };
    var x = i.inheritedData("$formController") || Mo, C = 0;
    Hr({
      ctrl: this, $element: i, set: function(t, e) {
        t[e] = !0
      }, unset: function(t, e) {
        delete t[e]
      }, parentForm: x, $animate: s
    }), this.$setPristine = function() {
      w.$dirty = !1, w.$pristine = !0, s.removeClass(i, Ko), s.addClass(i, Zo)
    }, this.$setDirty = function() {
      w.$dirty = !0, w.$pristine = !1, s.removeClass(i, Zo), s.addClass(i, Ko), x.$setDirty()
    }, this.$setUntouched = function() {
      w.$touched = !1, w.$untouched = !0, s.setClass(i, Xo, Qo)
    }, this.$setTouched = function() {
      w.$touched = !0, w.$untouched = !1, s.setClass(i, Qo, Xo)
    }, this.$rollbackViewValue = function() {
      u.cancel(y), w.$viewValue = w.$$lastCommittedViewValue, w.$render()
    }, this.$validate = function() {
      if (!b(w.$modelValue) || !isNaN(w.$modelValue)) {
        var t = w.$$lastCommittedViewValue, e = w.$$rawModelValue, r = w.$$parserName || "parse", i = w.$error[r] ? !1 : n, o = w.$valid, a = w.$modelValue, s = w.$options && w.$options.allowInvalid;
        w.$$runValidators(i, e, t, function(t) {
          s || o === t || (w.$modelValue = t ? e : n, w.$modelValue !== a && w.$$writeModelToScope())
        })
      }
    }, this.$$runValidators = function(t, e, r, i) {
      function a(t) {
        var e = w.$$parserName || "parse";
        if (t === n)c(e, null); else if (c(e, t), !t)return o(w.$validators, function(t, e) {
          c(e, null)
        }), o(w.$asyncValidators, function(t, e) {
          c(e, null)
        }), !1;
        return !0
      }

      function s() {
        var t = !0;
        return o(w.$validators, function(n, i) {
          var o = n(e, r);
          t = t && o, c(i, o)
        }), t ? !0 : (o(w.$asyncValidators, function(t, e) {
          c(e, null)
        }), !1)
      }

      function u() {
        var t = [], i = !0;
        o(w.$asyncValidators, function(o, a) {
          var s = o(e, r);
          if (!V(s))throw zo("$asyncValidators", "Expected asynchronous validator to return a promise but got '{0}' instead.", s);
          c(a, n), t.push(s.then(function() {
            c(a, !0)
          }, function() {
            i = !1, c(a, !1)
          }))
        }), t.length ? l.all(t).then(function() {
          f(i)
        }, $) : f(!0)
      }

      function c(t, e) {
        h === C && w.$setValidity(t, e)
      }

      function f(t) {
        h === C && i(t)
      }

      C++;
      var h = C;
      return a(t) && s() ? void u() : void f(!1)
    }, this.$commitViewValue = function() {
      var t = w.$viewValue;
      u.cancel(y), (w.$$lastCommittedViewValue !== t || "" === t && w.$$hasNativeValidators) && (w.$$lastCommittedViewValue = t, w.$pristine && this.$setDirty(), this.$$parseAndValidate())
    }, this.$$parseAndValidate = function() {
      function e() {
        w.$modelValue !== s && w.$$writeModelToScope()
      }

      var r = w.$$lastCommittedViewValue, i = r, o = m(i) ? n : !0;
      if (o)for (var a = 0; a < w.$parsers.length; a++)if (i = w.$parsers[a](i), m(i)) {
        o = !1;
        break
      }
      b(w.$modelValue) && isNaN(w.$modelValue) && (w.$modelValue = d(t));
      var s = w.$modelValue, u = w.$options && w.$options.allowInvalid;
      w.$$rawModelValue = i, u && (w.$modelValue = i, e()), w.$$runValidators(o, i, w.$$lastCommittedViewValue, function(t) {
        u || (w.$modelValue = t ? i : n, e())
      })
    }, this.$$writeModelToScope = function() {
      v(t, w.$modelValue), o(w.$viewChangeListeners, function(t) {
        try {
          t()
        } catch (n) {
          e(n)
        }
      })
    }, this.$setViewValue = function(t, e) {
      w.$viewValue = t, (!w.$options || w.$options.updateOnDefault) && w.$$debounceViewValueCommit(e)
    }, this.$$debounceViewValueCommit = function(e) {
      var n, r = 0, i = w.$options;
      i && g(i.debounce) && (n = i.debounce, b(n) ? r = n : b(n[e]) ? r = n[e] : b(n["default"]) && (r = n["default"])), u.cancel(y), r ? y = u(function() {
        w.$commitViewValue()
      }, r) : c.$$phase ? w.$commitViewValue() : t.$apply(function() {
        w.$commitViewValue()
      })
    }, t.$watch(function() {
      var e = d(t);
      if (e !== w.$modelValue) {
        w.$modelValue = w.$$rawModelValue = e;
        for (var r = w.$formatters, i = r.length, o = e; i--;)o = r[i](o);
        w.$viewValue !== o && (w.$viewValue = w.$$lastCommittedViewValue = o, w.$render(), w.$$runValidators(n, e, o, $))
      }
      return e
    })
  }], na = ["$rootScope", function(t) {
    return {
      restrict: "A",
      require: ["ngModel", "^?form", "^?ngModelOptions"],
      controller: ea,
      priority: 1,
      compile: function(e) {
        return e.addClass(Zo).addClass(Xo).addClass(Jo), {
          pre: function(t, e, n, r) {
            var i = r[0], o = r[1] || Mo;
            i.$$setOptions(r[2] && r[2].$options), o.$addControl(i), n.$observe("name", function(t) {
              i.$name !== t && o.$$renameControl(i, t)
            }), t.$on("$destroy", function() {
              o.$removeControl(i)
            })
          }, post: function(e, n, r, i) {
            var o = i[0];
            o.$options && o.$options.updateOn && n.on(o.$options.updateOn, function(t) {
              o.$$debounceViewValueCommit(t && t.type)
            }), n.on("blur", function() {
              o.$touched || (t.$$phase ? e.$evalAsync(o.$setTouched) : e.$apply(o.$setTouched))
            })
          }
        }
      }
    }
  }], ra = v({
    restrict: "A", require: "ngModel", link: function(t, e, n, r) {
      r.$viewChangeListeners.push(function() {
        t.$eval(n.ngChange)
      })
    }
  }), ia = function() {
    return {
      restrict: "A", require: "?ngModel", link: function(t, e, n, r) {
        r && (n.required = !0, r.$validators.required = function(t, e) {
          return !n.required || !r.$isEmpty(e)
        }, n.$observe("required", function() {
          r.$validate()
        }))
      }
    }
  }, oa = function() {
    return {
      restrict: "A", require: "?ngModel", link: function(t, e, i, o) {
        if (o) {
          var a, s = i.ngPattern || i.pattern;
          i.$observe("pattern", function(t) {
            if (w(t) && t.length > 0 && (t = new RegExp("^" + t + "$")), t && !t.test)throw r("ngPattern")("noregexp", "Expected {0} to be a RegExp but was {1}. Element: {2}", s, t, z(e));
            a = t || n, o.$validate()
          }), o.$validators.pattern = function(t) {
            return o.$isEmpty(t) || m(a) || a.test(t)
          }
        }
      }
    }
  }, aa = function() {
    return {
      restrict: "A", require: "?ngModel", link: function(t, e, n, r) {
        if (r) {
          var i = -1;
          n.$observe("maxlength", function(t) {
            var e = h(t);
            i = isNaN(e) ? -1 : e, r.$validate()
          }), r.$validators.maxlength = function(t, e) {
            return 0 > i || r.$isEmpty(t) || e.length <= i
          }
        }
      }
    }
  }, sa = function() {
    return {
      restrict: "A", require: "?ngModel", link: function(t, e, n, r) {
        if (r) {
          var i = 0;
          n.$observe("minlength", function(t) {
            i = h(t) || 0, r.$validate()
          }), r.$validators.minlength = function(t, e) {
            return r.$isEmpty(e) || e.length >= i
          }
        }
      }
    }
  }, ua = function() {
    return {
      restrict: "A", priority: 100, require: "ngModel", link: function(t, e, r, i) {
        var a = e.attr(r.$attr.ngList) || ", ", s = "false" !== r.ngTrim, u = s ? fi(a) : a, c = function(t) {
          if (!m(t)) {
            var e = [];
            return t && o(t.split(u), function(t) {
              t && e.push(s ? fi(t) : t)
            }), e
          }
        };
        i.$parsers.push(c), i.$formatters.push(function(t) {
          return li(t) ? t.join(a) : n
        }), i.$isEmpty = function(t) {
          return !t || !t.length
        }
      }
    }
  }, ca = /^(true|false|\d+)$/, la = function() {
    return {
      restrict: "A", priority: 100, compile: function(t, e) {
        return ca.test(e.ngValue) ? function(t, e, n) {
          n.$set("value", t.$eval(n.ngValue))
        } : function(t, e, n) {
          t.$watch(n.ngValue, function(t) {
            n.$set("value", t)
          })
        }
      }
    }
  }, fa = function() {
    return {
      restrict: "A", controller: ["$scope", "$attrs", function(t, e) {
        var r = this;
        this.$options = t.$eval(e.ngModelOptions), this.$options.updateOn !== n ? (this.$options.updateOnDefault = !1, this.$options.updateOn = fi(this.$options.updateOn.replace(Bo, function() {
          return r.$options.updateOnDefault = !0, " "
        }))) : this.$options.updateOnDefault = !0
      }]
    }
  }, ha = ["$compile", function(t) {
    return {
      restrict: "AC", compile: function(e) {
        return t.$$addBindingClass(e), function(e, r, i) {
          t.$$addBindingInfo(r, i.ngBind), r = r[0], e.$watch(i.ngBind, function(t) {
            r.textContent = t === n ? "" : t
          })
        }
      }
    }
  }], pa = ["$interpolate", "$compile", function(t, e) {
    return {
      compile: function(r) {
        return e.$$addBindingClass(r), function(r, i, o) {
          var a = t(i.attr(o.$attr.ngBindTemplate));
          e.$$addBindingInfo(i, a.expressions), i = i[0], o.$observe("ngBindTemplate", function(t) {
            i.textContent = t === n ? "" : t
          })
        }
      }
    }
  }], $a = ["$sce", "$parse", "$compile", function(t, e, n) {
    return {
      restrict: "A", compile: function(r, i) {
        var o = e(i.ngBindHtml), a = e(i.ngBindHtml, function(t) {
          return (t || "").toString()
        });
        return n.$$addBindingClass(r), function(e, r, i) {
          n.$$addBindingInfo(r, i.ngBindHtml), e.$watch(a, function() {
            r.html(t.getTrustedHtml(o(e)) || "")
          })
        }
      }
    }
  }], da = Br("", !0), va = Br("Odd", 0), ma = Br("Even", 1), ga = kr({
    compile: function(t, e) {
      e.$set("ngCloak", n), t.removeClass("ng-cloak")
    }
  }), ya = [function() {
    return { restrict: "A", scope: !0, controller: "@", priority: 500 }
  }], wa = {}, ba = { blur: !0, focus: !0 };
  o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(t) {
    var e = Xe("ng-" + t);
    wa[e] = ["$parse", "$rootScope", function(n, r) {
      return {
        restrict: "A", compile: function(i, o) {
          var a = n(o[e], null, !0);
          return function(e, n) {
            n.on(t, function(n) {
              var i = function() {
                a(e, { $event: n })
              };
              ba[t] && r.$$phase ? e.$evalAsync(i) : e.$apply(i)
            })
          }
        }
      }
    }]
  });
  var xa = ["$animate", function(t) {
    return {
      multiElement: !0,
      transclude: "element",
      priority: 600,
      terminal: !0,
      restrict: "A",
      $$tlb: !0,
      link: function(n, r, i, o, a) {
        var s, u, c;
        n.$watch(i.ngIf, function(n) {
          n ? u || a(function(n, o) {
            u = o, n[n.length++] = e.createComment(" end ngIf: " + i.ngIf + " "), s = { clone: n }, t.enter(n, r.parent(), r)
          }) : (c && (c.remove(), c = null), u && (u.$destroy(), u = null), s && (c = ue(s.clone), t.leave(c).then(function() {
            c = null
          }), s = null))
        })
      }
    }
  }], Sa = ["$templateRequest", "$anchorScroll", "$animate", "$sce", function(t, e, n, r) {
    return {
      restrict: "ECA",
      priority: 400,
      terminal: !0,
      transclude: "element",
      controller: si.noop,
      compile: function(i, o) {
        var a = o.ngInclude || o.src, s = o.onload || "", u = o.autoscroll;
        return function(i, o, c, l, f) {
          var h, p, $, d = 0, v = function() {
            p && (p.remove(), p = null), h && (h.$destroy(), h = null), $ && (n.leave($).then(function() {
              p = null
            }), p = $, $ = null)
          };
          i.$watch(r.parseAsResourceUrl(a), function(r) {
            var a = function() {
              !g(u) || u && !i.$eval(u) || e()
            }, c = ++d;
            r ? (t(r, !0).then(function(t) {
              if (c === d) {
                var e = i.$new();
                l.template = t;
                var u = f(e, function(t) {
                  v(), n.enter(t, null, o).then(a)
                });
                h = e, $ = u, h.$emit("$includeContentLoaded", r), i.$eval(s)
              }
            }, function() {
              c === d && (v(), i.$emit("$includeContentError", r))
            }), i.$emit("$includeContentRequested", r)) : (v(), l.template = null)
          })
        }
      }
    }
  }], Ca = ["$compile", function(t) {
    return {
      restrict: "ECA", priority: -400, require: "ngInclude", link: function(n, r, i, o) {
        return /SVG/.test(r[0].toString()) ? (r.empty(), void t(ge(o.template, e).childNodes)(n, function(t) {
          r.append(t)
        }, { futureParentElement: r })) : (r.html(o.template), void t(r.contents())(n))
      }
    }
  }], Aa = kr({
    priority: 450, compile: function() {
      return {
        pre: function(t, e, n) {
          t.$eval(n.ngInit)
        }
      }
    }
  }), ka = kr({ terminal: !0, priority: 1e3 }), Ea = ["$locale", "$interpolate", function(t, e) {
    var n = /{}/g, r = /^when(Minus)?(.+)$/;
    return {
      restrict: "EA", link: function(i, a, s) {
        function u(t) {
          a.text(t || "")
        }

        var c, l = s.count, f = s.$attr.when && a.attr(s.$attr.when), h = s.offset || 0, p = i.$eval(f) || {}, $ = {}, d = e.startSymbol(), v = e.endSymbol(), m = d + l + "-" + h + v, g = si.noop;
        o(s, function(t, e) {
          var n = r.exec(e);
          if (n) {
            var i = (n[1] ? "-" : "") + Gr(n[2]);
            p[i] = a.attr(s.$attr[e])
          }
        }), o(p, function(t, r) {
          $[r] = e(t.replace(n, m))
        }), i.$watch(l, function(e) {
          var n = parseFloat(e), r = isNaN(n);
          r || n in p || (n = t.pluralCat(n - h)), n === c || r && isNaN(c) || (g(), g = i.$watch($[n], u), c = n)
        })
      }
    }
  }], Oa = ["$parse", "$animate", function(t, a) {
    var s = "$$NG_REMOVED", u = r("ngRepeat"), c = function(t, e, n, r, i, o, a) {
      t[n] = r, i && (t[i] = o), t.$index = e, t.$first = 0 === e, t.$last = e === a - 1, t.$middle = !(t.$first || t.$last), t.$odd = !(t.$even = 0 === (1 & e))
    }, l = function(t) {
      return t.clone[0]
    }, f = function(t) {
      return t.clone[t.clone.length - 1]
    };
    return {
      restrict: "A",
      multiElement: !0,
      transclude: "element",
      priority: 1e3,
      terminal: !0,
      $$tlb: !0,
      compile: function(r, h) {
        var p = h.ngRepeat, $ = e.createComment(" end ngRepeat: " + p + " "), d = p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
        if (!d)throw u("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", p);
        var v = d[1], m = d[2], g = d[3], y = d[4];
        if (d = v.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/), !d)throw u("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", v);
        var w = d[3] || d[1], b = d[2];
        if (g && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent)$/.test(g)))throw u("badident", "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", g);
        var x, S, C, A, k = { $id: _e };
        return y ? x = t(y) : (C = function(t, e) {
          return _e(e)
        }, A = function(t) {
          return t
        }), function(t, e, r, h, d) {
          x && (S = function(e, n, r) {
            return b && (k[b] = e), k[w] = n, k.$index = r, x(t, k)
          });
          var v = ce();
          t.$watchCollection(m, function(r) {
            var h, m, y, x, k, E, O, T, M, V, N, j, D = e[0], P = ce();
            if (g && (t[g] = r), i(r))M = r, T = S || C; else {
              T = S || A, M = [];
              for (var R in r)r.hasOwnProperty(R) && "$" != R.charAt(0) && M.push(R);
              M.sort()
            }
            for (x = M.length, N = new Array(x), h = 0; x > h; h++)if (k = r === M ? h : M[h], E = r[k], O = T(k, E, h), v[O])V = v[O], delete v[O], P[O] = V, N[h] = V; else {
              if (P[O])throw o(N, function(t) {
                t && t.scope && (v[t.id] = t)
              }), u("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", p, O, E);
              N[h] = { id: O, scope: n, clone: n }, P[O] = !0
            }
            for (var q in v) {
              if (V = v[q], j = ue(V.clone), a.leave(j), j[0].parentNode)for (h = 0, m = j.length; m > h; h++)j[h][s] = !0;
              V.scope.$destroy()
            }
            for (h = 0; x > h; h++)if (k = r === M ? h : M[h], E = r[k], V = N[h], V.scope) {
              y = D;
              do y = y.nextSibling; while (y && y[s]);
              l(V) != y && a.move(ue(V.clone), null, Qr(D)), D = f(V), c(V.scope, h, w, E, b, k, x)
            } else d(function(t, e) {
              V.scope = e;
              var n = $.cloneNode(!1);
              t[t.length++] = n, a.enter(t, null, Qr(D)), D = n, V.clone = t, P[V.id] = V, c(V.scope, h, w, E, b, k, x)
            });
            v = P
          })
        }
      }
    }
  }], Ta = "ng-hide", Ma = "ng-hide-animate", Va = ["$animate", function(t) {
    return {
      restrict: "A", multiElement: !0, link: function(e, n, r) {
        e.$watch(r.ngShow, function(e) {
          t[e ? "removeClass" : "addClass"](n, Ta, { tempClasses: Ma })
        })
      }
    }
  }], Na = ["$animate", function(t) {
    return {
      restrict: "A", multiElement: !0, link: function(e, n, r) {
        e.$watch(r.ngHide, function(e) {
          t[e ? "addClass" : "removeClass"](n, Ta, { tempClasses: Ma })
        })
      }
    }
  }], ja = kr(function(t, e, n) {
    t.$watch(n.ngStyle, function(t, n) {
      n && t !== n && o(n, function(t, n) {
        e.css(n, "")
      }), t && e.css(t)
    }, !0)
  }), Da = ["$animate", function(t) {
    return {
      restrict: "EA", require: "ngSwitch", controller: ["$scope", function() {
        this.cases = {}
      }], link: function(n, r, i, a) {
        var s = i.ngSwitch || i.on, u = [], c = [], l = [], f = [], h = function(t, e) {
          return function() {
            t.splice(e, 1)
          }
        };
        n.$watch(s, function(n) {
          var r, i;
          for (r = 0, i = l.length; i > r; ++r)t.cancel(l[r]);
          for (l.length = 0, r = 0, i = f.length; i > r; ++r) {
            var s = ue(c[r].clone);
            f[r].$destroy();
            var p = l[r] = t.leave(s);
            p.then(h(l, r))
          }
          c.length = 0, f.length = 0, (u = a.cases["!" + n] || a.cases["?"]) && o(u, function(n) {
            n.transclude(function(r, i) {
              f.push(i);
              var o = n.element;
              r[r.length++] = e.createComment(" end ngSwitchWhen: ");
              var a = { clone: r };
              c.push(a), t.enter(r, o.parent(), o)
            })
          })
        })
      }
    }
  }], Pa = kr({
    transclude: "element",
    priority: 1200,
    require: "^ngSwitch",
    multiElement: !0,
    link: function(t, e, n, r, i) {
      r.cases["!" + n.ngSwitchWhen] = r.cases["!" + n.ngSwitchWhen] || [], r.cases["!" + n.ngSwitchWhen].push({
        transclude: i,
        element: e
      })
    }
  }), Ra = kr({
    transclude: "element",
    priority: 1200,
    require: "^ngSwitch",
    multiElement: !0,
    link: function(t, e, n, r, i) {
      r.cases["?"] = r.cases["?"] || [], r.cases["?"].push({ transclude: i, element: e })
    }
  }), qa = kr({
    restrict: "EAC", link: function(t, e, n, i, o) {
      if (!o)throw r("ngTransclude")("orphan", "Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}", z(e));
      o(function(t) {
        e.empty(), e.append(t)
      })
    }
  }), Ia = ["$templateCache", function(t) {
    return {
      restrict: "E", terminal: !0, compile: function(e, n) {
        if ("text/ng-template" == n.type) {
          var r = n.id, i = e[0].text;
          t.put(r, i)
        }
      }
    }
  }], Ua = r("ngOptions"), _a = v({ restrict: "A", terminal: !0 }), Fa = ["$compile", "$parse", function(t, r) {
    var i = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, s = { $setViewValue: $ };
    return {
      restrict: "E", require: ["select", "?ngModel"], controller: ["$element", "$scope", "$attrs", function(t, e, n) {
        var r, i, o = this, a = {}, u = s;
        o.databound = n.ngModel, o.init = function(t, e, n) {
          u = t, r = e, i = n
        }, o.addOption = function(e, n) {
          ae(e, '"option value"'), a[e] = !0, u.$viewValue == e && (t.val(e), i.parent() && i.remove()), n && n[0].hasAttribute("selected") && (n[0].selected = !0)
        }, o.removeOption = function(t) {
          this.hasOption(t) && (delete a[t], u.$viewValue === t && this.renderUnknownOption(t))
        }, o.renderUnknownOption = function(e) {
          var n = "? " + _e(e) + " ?";
          i.val(n), t.prepend(i), t.val(n), i.prop("selected", !0)
        }, o.hasOption = function(t) {
          return a.hasOwnProperty(t)
        }, e.$on("$destroy", function() {
          o.renderUnknownOption = $
        })
      }], link: function(s, u, c, l) {
        function f(t, e, n, r) {
          n.$render = function() {
            var t = n.$viewValue;
            r.hasOption(t) ? (A.parent() && A.remove(), e.val(t), "" === t && $.prop("selected", !0)) : m(t) && $ ? e.val("") : r.renderUnknownOption(t)
          }, e.on("change", function() {
            t.$apply(function() {
              A.parent() && A.remove(), n.$setViewValue(e.val())
            })
          })
        }

        function h(t, e, n) {
          var r;
          n.$render = function() {
            var t = new Fe(n.$viewValue);
            o(e.find("option"), function(e) {
              e.selected = g(t.get(e.value))
            })
          }, t.$watch(function() {
            I(r, n.$viewValue) || (r = q(n.$viewValue), n.$render())
          }), e.on("change", function() {
            t.$apply(function() {
              var t = [];
              o(e.find("option"), function(e) {
                e.selected && t.push(e.value)
              }), n.$setViewValue(t)
            })
          })
        }

        function p(e, s, u) {
          function c(t, n, r) {
            return I[E] = r, M && (I[M] = n), t(e, I)
          }

          function l() {
            e.$apply(function() {
              var t, n = j(e) || [];
              if (y)t = [], o(s.val(), function(e) {
                e = P ? R[e] : e, t.push(f(e, n[e]))
              }); else {
                var r = P ? R[s.val()] : s.val();
                t = f(r, n[r])
              }
              u.$setViewValue(t), m()
            })
          }

          function f(t, e) {
            if ("?" === t)return n;
            if ("" === t)return null;
            var r = T ? T : N;
            return c(r, t, e)
          }

          function h() {
            var t, n = j(e);
            if (n && li(n)) {
              t = new Array(n.length);
              for (var r = 0, i = n.length; i > r; r++)t[r] = c(k, r, n[r]);
              return t
            }
            if (n) {
              t = {};
              for (var o in n)n.hasOwnProperty(o) && (t[o] = c(k, o, n[o]))
            }
            return t
          }

          function p(t) {
            var e;
            if (y)if (P && li(t)) {
              e = new Fe([]);
              for (var n = 0; n < t.length; n++)e.put(c(P, null, t[n]), !0)
            } else e = new Fe(t); else P && (t = c(P, null, t));
            return function(n, r) {
              var i;
              return i = P ? P : T ? T : N, y ? g(e.remove(c(i, n, r))) : t === c(i, n, r)
            }
          }

          function $() {
            x || (e.$$postDigest(m), x = !0)
          }

          function v(t, e, n) {
            t[e] = t[e] || 0, t[e] += n ? 1 : -1
          }

          function m() {
            x = !1;
            var t, n, r, i, l, f, h, $, m, w, A, E, O, T, N, D, U, _ = { "": [] }, F = [""], H = u.$viewValue, L = j(e) || [], B = M ? a(L) : L, z = {}, W = p(H), G = !1;
            for (R = {}, E = 0; w = B.length, w > E; E++)h = E, M && (h = B[E], "$" === h.charAt(0)) || ($ = L[h], t = c(V, h, $) || "", (n = _[t]) || (n = _[t] = [], F.push(t)), O = W(h, $), G = G || O, D = c(k, h, $), D = g(D) ? D : "", U = P ? P(e, I) : M ? B[E] : E, P && (R[U] = h), n.push({
              id: U,
              label: D,
              selected: O
            }));
            for (y || (b || null === H ? _[""].unshift({
              id: "",
              label: "",
              selected: !G
            }) : G || _[""].unshift({ id: "?", label: "", selected: !0 })), A = 0, m = F.length; m > A; A++) {
              for (t = F[A], n = _[t], q.length <= A ? (i = {
                element: C.clone().attr("label", t),
                label: n.label
              }, l = [i], q.push(l), s.append(i.element)) : (l = q[A], i = l[0], i.label != t && i.element.attr("label", i.label = t)), T = null, E = 0, w = n.length; w > E; E++)r = n[E], (f = l[E + 1]) ? (T = f.element, f.label !== r.label && (v(z, f.label, !1), v(z, r.label, !0), T.text(f.label = r.label), T.prop("label", f.label)), f.id !== r.id && T.val(f.id = r.id), T[0].selected !== r.selected && (T.prop("selected", f.selected = r.selected), Xr && T.prop("selected", f.selected))) : ("" === r.id && b ? N = b : (N = S.clone()).val(r.id).prop("selected", r.selected).attr("selected", r.selected).prop("label", r.label).text(r.label), l.push(f = {
                element: N,
                label: r.label,
                id: r.id,
                selected: r.selected
              }), v(z, r.label, !0), T ? T.after(N) : i.element.append(N), T = N);
              for (E++; l.length > E;)r = l.pop(), v(z, r.label, !1), r.element.remove()
            }
            for (; q.length > A;) {
              for (n = q.pop(), E = 1; E < n.length; ++E)v(z, n[E].label, !1);
              n[0].element.remove()
            }
            o(z, function(t, e) {
              t > 0 ? d.addOption(e) : 0 > t && d.removeOption(e)
            })
          }

          var A;
          if (!(A = w.match(i)))throw Ua("iexp", "Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}", w, z(s));
          var k = r(A[2] || A[1]), E = A[4] || A[6], O = / as /.test(A[0]) && A[1], T = O ? r(O) : null, M = A[5], V = r(A[3] || ""), N = r(A[2] ? A[1] : E), j = r(A[7]), D = A[8], P = D ? r(A[8]) : null, R = {}, q = [[{
            element: s,
            label: ""
          }]], I = {};
          b && (t(b)(e), b.removeClass("ng-scope"), b.remove()), s.empty(), s.on("change", l), u.$render = m, e.$watchCollection(j, $), e.$watchCollection(h, $), y && e.$watchCollection(function() {
            return u.$modelValue
          }, $)
        }

        if (l[1]) {
          for (var $, d = l[0], v = l[1], y = c.multiple, w = c.ngOptions, b = !1, x = !1, S = Qr(e.createElement("option")), C = Qr(e.createElement("optgroup")), A = S.clone(), k = 0, E = u.children(), O = E.length; O > k; k++)if ("" === E[k].value) {
            $ = b = E.eq(k);
            break
          }
          d.init(v, b, A), y && (v.$isEmpty = function(t) {
            return !t || 0 === t.length
          }), w ? p(s, u, v) : y ? h(s, u, v) : f(s, u, v, d)
        }
      }
    }
  }], Ha = ["$interpolate", function(t) {
    var e = { addOption: $, removeOption: $ };
    return {
      restrict: "E", priority: 100, compile: function(n, r) {
        if (m(r.value)) {
          var i = t(n.text(), !0);
          i || r.$set("value", n.text())
        }
        return function(t, n, r) {
          var o = "$selectController", a = n.parent(), s = a.data(o) || a.parent().data(o);
          s && s.databound || (s = e), i ? t.$watch(i, function(t, e) {
            r.$set("value", t), e !== t && s.removeOption(e), s.addOption(t, n)
          }) : s.addOption(r.value, n), n.on("$destroy", function() {
            s.removeOption(r.value)
          })
        }
      }
    }
  }], La = v({ restrict: "E", terminal: !1 });
  return t.angular.bootstrap ? void console.log("WARNING: Tried to load angular more than once.") : (re(), pe(si), void Qr(e).ready(function() {
    X(e, Q)
  }))
}(window, document), !window.angular.$$csp() && window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
!function(r, e, t) {
  "use strict";
  function n(r) {
    return null != r && "" !== r && "hasOwnProperty" !== r && s.test("." + r)
  }

  function a(r, e) {
    if (!n(e))throw i("badmember", 'Dotted member path "@{0}" is invalid.', e);
    for (var a = e.split("."), o = 0, s = a.length; s > o && r !== t; o++) {
      var c = a[o];
      r = null !== r ? r[c] : t
    }
    return r
  }

  function o(r, t) {
    t = t || {}, e.forEach(t, function(r, e) {
      delete t[e]
    });
    for (var n in r)!r.hasOwnProperty(n) || "$" === n.charAt(0) && "$" === n.charAt(1) || (t[n] = r[n]);
    return t
  }

  var i = e.$$minErr("$resource"), s = /^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;
  e.module("ngResource", ["ng"]).provider("$resource", function() {
    var r = this;
    this.defaults = {
      stripTrailingSlashes: !0,
      actions: {
        get: { method: "GET" },
        save: { method: "POST" },
        query: { method: "GET", isArray: !0 },
        remove: { method: "DELETE" },
        "delete": { method: "DELETE" }
      }
    }, this.$get = ["$http", "$q", function(n, s) {
      function c(r) {
        return u(r, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+")
      }

      function u(r, e) {
        return encodeURIComponent(r).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, e ? "%20" : "+")
      }

      function p(e, t) {
        this.template = e, this.defaults = d({}, r.defaults, t), this.urlParams = {}
      }

      function l(c, u, $, v) {
        function w(r, e) {
          var t = {};
          return e = d({}, u, e), h(e, function(e, n) {
            g(e) && (e = e()), t[n] = e && e.charAt && "@" == e.charAt(0) ? a(r, e.substr(1)) : e
          }), t
        }

        function y(r) {
          return r.resource
        }

        function E(r) {
          o(r || {}, this)
        }

        var A = new p(c, v);
        return $ = d({}, r.defaults.actions, $), E.prototype.toJSON = function() {
          var r = d({}, this);
          return delete r.$promise, delete r.$resolved, r
        }, h($, function(r, a) {
          var c = /^(POST|PUT|PATCH)$/i.test(r.method);
          E[a] = function(u, p, l, $) {
            var v, b, P, T = {};
            switch (arguments.length) {
              case 4:
                P = $, b = l;
              case 3:
              case 2:
                if (!g(p)) {
                  T = u, v = p, b = l;
                  break
                }
                if (g(u)) {
                  b = u, P = p;
                  break
                }
                b = p, P = l;
              case 1:
                g(u) ? b = u : c ? v = u : T = u;
                break;
              case 0:
                break;
              default:
                throw i("badargs", "Expected up to 4 arguments [params, data, success, error], got {0} arguments", arguments.length)
            }
            var O = this instanceof E, x = O ? v : r.isArray ? [] : new E(v), R = {}, D = r.interceptor && r.interceptor.response || y, S = r.interceptor && r.interceptor.responseError || t;
            h(r, function(r, e) {
              "params" != e && "isArray" != e && "interceptor" != e && (R[e] = m(r))
            }), c && (R.data = v), A.setUrlParams(R, d({}, w(v, r.params || {}), T), r.url);
            var j = n(R).then(function(t) {
              var n = t.data, s = x.$promise;
              if (n) {
                if (e.isArray(n) !== !!r.isArray)throw i("badcfg", "Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2}", a, r.isArray ? "array" : "object", e.isArray(n) ? "array" : "object");
                r.isArray ? (x.length = 0, h(n, function(r) {
                  x.push("object" == typeof r ? new E(r) : r)
                })) : (o(n, x), x.$promise = s)
              }
              return x.$resolved = !0, t.resource = x, t
            }, function(r) {
              return x.$resolved = !0, (P || f)(r), s.reject(r)
            });
            return j = j.then(function(r) {
              var e = D(r);
              return (b || f)(e, r.headers), e
            }, S), O ? j : (x.$promise = j, x.$resolved = !1, x)
          }, E.prototype["$" + a] = function(r, e, t) {
            g(r) && (t = e, e = r, r = {});
            var n = E[a].call(this, r, this, e, t);
            return n.$promise || n
          }
        }), E.bind = function(r) {
          return l(c, d({}, u, r), $)
        }, E
      }

      var f = e.noop, h = e.forEach, d = e.extend, m = e.copy, g = e.isFunction;
      return p.prototype = {
        setUrlParams: function(r, t, n) {
          var a, o, s = this, u = n || s.template, p = s.urlParams = {};
          h(u.split(/\W/), function(r) {
            if ("hasOwnProperty" === r)throw i("badname", "hasOwnProperty is not a valid parameter name.");
            !new RegExp("^\\d+$").test(r) && r && new RegExp("(^|[^\\\\]):" + r + "(\\W|$)").test(u) && (p[r] = !0)
          }), u = u.replace(/\\:/g, ":"), t = t || {}, h(s.urlParams, function(r, n) {
            a = t.hasOwnProperty(n) ? t[n] : s.defaults[n], e.isDefined(a) && null !== a ? (o = c(a), u = u.replace(new RegExp(":" + n + "(\\W|$)", "g"), function(r, e) {
              return o + e
            })) : u = u.replace(new RegExp("(/?):" + n + "(\\W|$)", "g"), function(r, e, t) {
              return "/" == t.charAt(0) ? t : e + t
            })
          }), s.defaults.stripTrailingSlashes && (u = u.replace(/\/+$/, "") || "/"), u = u.replace(/\/\.(?=\w+($|\?))/, "."), r.url = u.replace(/\/\\\./, "/."), h(t, function(e, t) {
            s.urlParams[t] || (r.params = r.params || {}, r.params[t] = e)
          })
        }
      }, l
    }]
  })
}(window, window.angular);
!function(e, r) {
  "use strict";
  function t() {
    function e(e, t) {
      return r.extend(Object.create(e), t)
    }

    function t(e, r) {
      var t = r.caseInsensitiveMatch, n = { originalPath: e, regexp: e }, a = n.keys = [];
      return e = e.replace(/([().])/g, "\\$1").replace(/(\/)?:(\w+)([\?\*])?/g, function(e, r, t, n) {
        var o = "?" === n ? n : null, i = "*" === n ? n : null;
        return a.push({
          name: t,
          optional: !!o
        }), r = r || "", "" + (o ? "" : r) + "(?:" + (o ? r : "") + (i && "(.+?)" || "([^/]+)") + (o || "") + ")" + (o || "")
      }).replace(/([\/$\*])/g, "\\$1"), n.regexp = new RegExp("^" + e + "$", t ? "i" : ""), n
    }

    var n = {};
    this.when = function(e, a) {
      var o = r.copy(a);
      if (r.isUndefined(o.reloadOnSearch) && (o.reloadOnSearch = !0), r.isUndefined(o.caseInsensitiveMatch) && (o.caseInsensitiveMatch = this.caseInsensitiveMatch), n[e] = r.extend(o, e && t(e, o)), e) {
        var i = "/" == e[e.length - 1] ? e.substr(0, e.length - 1) : e + "/";
        n[i] = r.extend({ redirectTo: e }, t(i, o))
      }
      return this
    }, this.caseInsensitiveMatch = !1, this.otherwise = function(e) {
      return "string" == typeof e && (e = { redirectTo: e }), this.when(null, e), this
    }, this.$get = ["$rootScope", "$location", "$routeParams", "$q", "$injector", "$templateRequest", "$sce", function(t, a, o, i, u, s, l) {
      function h(e, r) {
        var t = r.keys, n = {};
        if (!r.regexp)return null;
        var a = r.regexp.exec(e);
        if (!a)return null;
        for (var o = 1, i = a.length; i > o; ++o) {
          var c = t[o - 1], u = a[o];
          c && u && (n[c.name] = u)
        }
        return n
      }

      function $(e) {
        var n = w.current;
        v = f(), m = v && n && v.$$route === n.$$route && r.equals(v.pathParams, n.pathParams) && !v.reloadOnSearch && !g, m || !n && !v || t.$broadcast("$routeChangeStart", v, n).defaultPrevented && e && e.preventDefault()
      }

      function p() {
        var e = w.current, n = v;
        m ? (e.params = n.params, r.copy(e.params, o), t.$broadcast("$routeUpdate", e)) : (n || e) && (g = !1, w.current = n, n && n.redirectTo && (r.isString(n.redirectTo) ? a.path(d(n.redirectTo, n.params)).search(n.params).replace() : a.url(n.redirectTo(n.pathParams, a.path(), a.search())).replace()), i.when(n).then(function() {
          if (n) {
            var e, t, a = r.extend({}, n.resolve);
            return r.forEach(a, function(e, t) {
              a[t] = r.isString(e) ? u.get(e) : u.invoke(e, null, null, t)
            }), r.isDefined(e = n.template) ? r.isFunction(e) && (e = e(n.params)) : r.isDefined(t = n.templateUrl) && (r.isFunction(t) && (t = t(n.params)), t = l.getTrustedResourceUrl(t), r.isDefined(t) && (n.loadedTemplateUrl = t, e = s(t))), r.isDefined(e) && (a.$template = e), i.all(a)
          }
        }).then(function(a) {
          n == w.current && (n && (n.locals = a, r.copy(n.params, o)), t.$broadcast("$routeChangeSuccess", n, e))
        }, function(r) {
          n == w.current && t.$broadcast("$routeChangeError", n, e, r)
        }))
      }

      function f() {
        var t, o;
        return r.forEach(n, function(n) {
          !o && (t = h(a.path(), n)) && (o = e(n, {
            params: r.extend({}, a.search(), t),
            pathParams: t
          }), o.$$route = n)
        }), o || n[null] && e(n[null], { params: {}, pathParams: {} })
      }

      function d(e, t) {
        var n = [];
        return r.forEach((e || "").split(":"), function(e, r) {
          if (0 === r)n.push(e); else {
            var a = e.match(/(\w+)(?:[?*])?(.*)/), o = a[1];
            n.push(t[o]), n.push(a[2] || ""), delete t[o]
          }
        }), n.join("")
      }

      var v, m, g = !1, w = {
        routes: n, reload: function() {
          g = !0, t.$evalAsync(function() {
            $(), p()
          })
        }, updateParams: function(e) {
          if (!this.current || !this.current.$$route)throw c("norout", "Tried updating route when with no current route");
          var t = {}, n = this;
          r.forEach(Object.keys(e), function(r) {
            n.current.pathParams[r] || (t[r] = e[r])
          }), e = r.extend({}, this.current.params, e), a.path(d(this.current.$$route.originalPath, e)), a.search(r.extend({}, a.search(), t))
        }
      };
      return t.$on("$locationChangeStart", $), t.$on("$locationChangeSuccess", p), w
    }]
  }

  function n() {
    this.$get = function() {
      return {}
    }
  }

  function a(e, t, n) {
    return {
      restrict: "ECA", terminal: !0, priority: 400, transclude: "element", link: function(a, o, i, c, u) {
        function s() {
          p && (n.cancel(p), p = null), h && (h.$destroy(), h = null), $ && (p = n.leave($), p.then(function() {
            p = null
          }), $ = null)
        }

        function l() {
          var i = e.current && e.current.locals, c = i && i.$template;
          if (r.isDefined(c)) {
            var l = a.$new(), p = e.current, v = u(l, function(e) {
              n.enter(e, null, $ || o).then(function() {
                !r.isDefined(f) || f && !a.$eval(f) || t()
              }), s()
            });
            $ = v, h = p.scope = l, h.$emit("$viewContentLoaded"), h.$eval(d)
          } else s()
        }

        var h, $, p, f = i.autoscroll, d = i.onload || "";
        a.$on("$routeChangeSuccess", l), l()
      }
    }
  }

  function o(e, r, t) {
    return {
      restrict: "ECA", priority: -400, link: function(n, a) {
        var o = t.current, i = o.locals;
        a.html(i.$template);
        var c = e(a.contents());
        if (o.controller) {
          i.$scope = n;
          var u = r(o.controller, i);
          o.controllerAs && (n[o.controllerAs] = u), a.data("$ngControllerController", u), a.children().data("$ngControllerController", u)
        }
        c(n)
      }
    }
  }

  var i = r.module("ngRoute", ["ng"]).provider("$route", t), c = r.$$minErr("ngRoute");
  i.provider("$routeParams", n), i.directive("ngView", a), i.directive("ngView", o), a.$inject = ["$route", "$anchorScroll", "$animate"], o.$inject = ["$compile", "$controller", "$route"]
}(window, window.angular);
!function(t) {
  if ("object" == typeof exports && "undefined" != typeof module)module.exports = t(); else if ("function" == typeof define && define.amd)define([], t); else {
    var e;
    "undefined" != typeof window ? e = window : "undefined" != typeof global ? e = global : "undefined" != typeof self && (e = self), e.io = t()
  }
}(function() {
  var t;
  return function e(t, n, r) {
    function o(s, a) {
      if (!n[s]) {
        if (!t[s]) {
          var c = "function" == typeof require && require;
          if (!a && c)return c(s, !0);
          if (i)return i(s, !0);
          throw new Error("Cannot find module '" + s + "'")
        }
        var u = n[s] = { exports: {} };
        t[s][0].call(u.exports, function(e) {
          var n = t[s][1][e];
          return o(n ? n : e)
        }, u, u.exports, e, t, n, r)
      }
      return n[s].exports
    }

    for (var i = "function" == typeof require && require, s = 0; s < r.length; s++)o(r[s]);
    return o
  }({
    1: [function(t, e) {
      e.exports = t("./lib/")
    }, { "./lib/": 2 }],
    2: [function(t, e, n) {
      function r(t, e) {
        "object" == typeof t && (e = t, t = void 0), e = e || {};
        var n, r = o(t), i = r.source, u = r.id;
        return e.forceNew || e["force new connection"] || !1 === e.multiplex ? (a("ignoring socket cache for %s", i), n = s(i, e)) : (c[u] || (a("new io instance for %s", i), c[u] = s(i, e)), n = c[u]), n.socket(r.path)
      }

      var o = t("./url"), i = t("socket.io-parser"), s = t("./manager"), a = t("debug")("socket.io-client");
      e.exports = n = r;
      var c = n.managers = {};
      n.protocol = i.protocol, n.connect = r, n.Manager = t("./manager"), n.Socket = t("./socket")
    }, { "./manager": 3, "./socket": 5, "./url": 6, debug: 9, "socket.io-parser": 43 }],
    3: [function(t, e) {
      function n(t, e) {
        return this instanceof n ? (t && "object" == typeof t && (e = t, t = void 0), e = e || {}, e.path = e.path || "/socket.io", this.nsps = {}, this.subs = [], this.opts = e, this.reconnection(e.reconnection !== !1), this.reconnectionAttempts(e.reconnectionAttempts || 1 / 0), this.reconnectionDelay(e.reconnectionDelay || 1e3), this.reconnectionDelayMax(e.reconnectionDelayMax || 5e3), this.timeout(null == e.timeout ? 2e4 : e.timeout), this.readyState = "closed", this.uri = t, this.connected = [], this.attempts = 0, this.encoding = !1, this.packetBuffer = [], this.encoder = new s.Encoder, this.decoder = new s.Decoder, this.autoConnect = e.autoConnect !== !1, void(this.autoConnect && this.open())) : new n(t, e)
      }

      var r = (t("./url"), t("engine.io-client")), o = t("./socket"), i = t("component-emitter"), s = t("socket.io-parser"), a = t("./on"), c = t("component-bind"), u = (t("object-component"), t("debug")("socket.io-client:manager")), p = t("indexof");
      e.exports = n, n.prototype.emitAll = function() {
        this.emit.apply(this, arguments);
        for (var t in this.nsps)this.nsps[t].emit.apply(this.nsps[t], arguments)
      }, i(n.prototype), n.prototype.reconnection = function(t) {
        return arguments.length ? (this._reconnection = !!t, this) : this._reconnection
      }, n.prototype.reconnectionAttempts = function(t) {
        return arguments.length ? (this._reconnectionAttempts = t, this) : this._reconnectionAttempts
      }, n.prototype.reconnectionDelay = function(t) {
        return arguments.length ? (this._reconnectionDelay = t, this) : this._reconnectionDelay
      }, n.prototype.reconnectionDelayMax = function(t) {
        return arguments.length ? (this._reconnectionDelayMax = t, this) : this._reconnectionDelayMax
      }, n.prototype.timeout = function(t) {
        return arguments.length ? (this._timeout = t, this) : this._timeout
      }, n.prototype.maybeReconnectOnOpen = function() {
        this.openReconnect || this.reconnecting || !this._reconnection || 0 !== this.attempts || (this.openReconnect = !0, this.reconnect())
      }, n.prototype.open = n.prototype.connect = function(t) {
        if (u("readyState %s", this.readyState), ~this.readyState.indexOf("open"))return this;
        u("opening %s", this.uri), this.engine = r(this.uri, this.opts);
        var e = this.engine, n = this;
        this.readyState = "opening", this.skipReconnect = !1;
        var o = a(e, "open", function() {
          n.onopen(), t && t()
        }), i = a(e, "error", function(e) {
          if (u("connect_error"), n.cleanup(), n.readyState = "closed", n.emitAll("connect_error", e), t) {
            var r = new Error("Connection error");
            r.data = e, t(r)
          }
          n.maybeReconnectOnOpen()
        });
        if (!1 !== this._timeout) {
          var s = this._timeout;
          u("connect attempt will timeout after %d", s);
          var c = setTimeout(function() {
            u("connect attempt timed out after %d", s), o.destroy(), e.close(), e.emit("error", "timeout"), n.emitAll("connect_timeout", s)
          }, s);
          this.subs.push({
            destroy: function() {
              clearTimeout(c)
            }
          })
        }
        return this.subs.push(o), this.subs.push(i), this
      }, n.prototype.onopen = function() {
        u("open"), this.cleanup(), this.readyState = "open", this.emit("open");
        var t = this.engine;
        this.subs.push(a(t, "data", c(this, "ondata"))), this.subs.push(a(this.decoder, "decoded", c(this, "ondecoded"))), this.subs.push(a(t, "error", c(this, "onerror"))), this.subs.push(a(t, "close", c(this, "onclose")))
      }, n.prototype.ondata = function(t) {
        this.decoder.add(t)
      }, n.prototype.ondecoded = function(t) {
        this.emit("packet", t)
      }, n.prototype.onerror = function(t) {
        u("error", t), this.emitAll("error", t)
      }, n.prototype.socket = function(t) {
        var e = this.nsps[t];
        if (!e) {
          e = new o(this, t), this.nsps[t] = e;
          var n = this;
          e.on("connect", function() {
            ~p(n.connected, e) || n.connected.push(e)
          })
        }
        return e
      }, n.prototype.destroy = function(t) {
        var e = p(this.connected, t);
        ~e && this.connected.splice(e, 1), this.connected.length || this.close()
      }, n.prototype.packet = function(t) {
        u("writing packet %j", t);
        var e = this;
        e.encoding ? e.packetBuffer.push(t) : (e.encoding = !0, this.encoder.encode(t, function(t) {
          for (var n = 0; n < t.length; n++)e.engine.write(t[n]);
          e.encoding = !1, e.processPacketQueue()
        }))
      }, n.prototype.processPacketQueue = function() {
        if (this.packetBuffer.length > 0 && !this.encoding) {
          var t = this.packetBuffer.shift();
          this.packet(t)
        }
      }, n.prototype.cleanup = function() {
        for (var t; t = this.subs.shift();)t.destroy();
        this.packetBuffer = [], this.encoding = !1, this.decoder.destroy()
      }, n.prototype.close = n.prototype.disconnect = function() {
        this.skipReconnect = !0, this.readyState = "closed", this.engine && this.engine.close()
      }, n.prototype.onclose = function(t) {
        u("close"), this.cleanup(), this.readyState = "closed", this.emit("close", t), this._reconnection && !this.skipReconnect && this.reconnect()
      }, n.prototype.reconnect = function() {
        if (this.reconnecting || this.skipReconnect)return this;
        var t = this;
        if (this.attempts++, this.attempts > this._reconnectionAttempts)u("reconnect failed"), this.emitAll("reconnect_failed"), this.reconnecting = !1; else {
          var e = this.attempts * this.reconnectionDelay();
          e = Math.min(e, this.reconnectionDelayMax()), u("will wait %dms before reconnect attempt", e), this.reconnecting = !0;
          var n = setTimeout(function() {
            t.skipReconnect || (u("attempting reconnect"), t.emitAll("reconnect_attempt", t.attempts), t.emitAll("reconnecting", t.attempts), t.skipReconnect || t.open(function(e) {
              e ? (u("reconnect attempt error"), t.reconnecting = !1, t.reconnect(), t.emitAll("reconnect_error", e.data)) : (u("reconnect success"), t.onreconnect())
            }))
          }, e);
          this.subs.push({
            destroy: function() {
              clearTimeout(n)
            }
          })
        }
      }, n.prototype.onreconnect = function() {
        var t = this.attempts;
        this.attempts = 0, this.reconnecting = !1, this.emitAll("reconnect", t)
      }
    }, {
      "./on": 4,
      "./socket": 5,
      "./url": 6,
      "component-bind": 7,
      "component-emitter": 8,
      debug: 9,
      "engine.io-client": 10,
      indexof: 39,
      "object-component": 40,
      "socket.io-parser": 43
    }],
    4: [function(t, e) {
      function n(t, e, n) {
        return t.on(e, n), {
          destroy: function() {
            t.removeListener(e, n)
          }
        }
      }

      e.exports = n
    }, {}],
    5: [function(t, e, n) {
      function r(t, e) {
        this.io = t, this.nsp = e, this.json = this, this.ids = 0, this.acks = {}, this.io.autoConnect && this.open(), this.receiveBuffer = [], this.sendBuffer = [], this.connected = !1, this.disconnected = !0
      }

      var o = t("socket.io-parser"), i = t("component-emitter"), s = t("to-array"), a = t("./on"), c = t("component-bind"), u = t("debug")("socket.io-client:socket"), p = t("has-binary");
      e.exports = n = r;
      var f = {
        connect: 1,
        connect_error: 1,
        connect_timeout: 1,
        disconnect: 1,
        error: 1,
        reconnect: 1,
        reconnect_attempt: 1,
        reconnect_failed: 1,
        reconnect_error: 1,
        reconnecting: 1
      }, h = i.prototype.emit;
      i(r.prototype), r.prototype.subEvents = function() {
        if (!this.subs) {
          var t = this.io;
          this.subs = [a(t, "open", c(this, "onopen")), a(t, "packet", c(this, "onpacket")), a(t, "close", c(this, "onclose"))]
        }
      }, r.prototype.open = r.prototype.connect = function() {
        return this.connected ? this : (this.subEvents(), this.io.open(), "open" == this.io.readyState && this.onopen(), this)
      }, r.prototype.send = function() {
        var t = s(arguments);
        return t.unshift("message"), this.emit.apply(this, t), this
      }, r.prototype.emit = function(t) {
        if (f.hasOwnProperty(t))return h.apply(this, arguments), this;
        var e = s(arguments), n = o.EVENT;
        p(e) && (n = o.BINARY_EVENT);
        var r = { type: n, data: e };
        return "function" == typeof e[e.length - 1] && (u("emitting packet with ack id %d", this.ids), this.acks[this.ids] = e.pop(), r.id = this.ids++), this.connected ? this.packet(r) : this.sendBuffer.push(r), this
      }, r.prototype.packet = function(t) {
        t.nsp = this.nsp, this.io.packet(t)
      }, r.prototype.onopen = function() {
        u("transport is open - connecting"), "/" != this.nsp && this.packet({ type: o.CONNECT })
      }, r.prototype.onclose = function(t) {
        u("close (%s)", t), this.connected = !1, this.disconnected = !0, this.emit("disconnect", t)
      }, r.prototype.onpacket = function(t) {
        if (t.nsp == this.nsp)switch (t.type) {
          case o.CONNECT:
            this.onconnect();
            break;
          case o.EVENT:
            this.onevent(t);
            break;
          case o.BINARY_EVENT:
            this.onevent(t);
            break;
          case o.ACK:
            this.onack(t);
            break;
          case o.BINARY_ACK:
            this.onack(t);
            break;
          case o.DISCONNECT:
            this.ondisconnect();
            break;
          case o.ERROR:
            this.emit("error", t.data)
        }
      }, r.prototype.onevent = function(t) {
        var e = t.data || [];
        u("emitting event %j", e), null != t.id && (u("attaching ack callback to event"), e.push(this.ack(t.id))), this.connected ? h.apply(this, e) : this.receiveBuffer.push(e)
      }, r.prototype.ack = function(t) {
        var e = this, n = !1;
        return function() {
          if (!n) {
            n = !0;
            var r = s(arguments);
            u("sending ack %j", r);
            var i = p(r) ? o.BINARY_ACK : o.ACK;
            e.packet({ type: i, id: t, data: r })
          }
        }
      }, r.prototype.onack = function(t) {
        u("calling ack %s with %j", t.id, t.data);
        var e = this.acks[t.id];
        e.apply(this, t.data), delete this.acks[t.id]
      }, r.prototype.onconnect = function() {
        this.connected = !0, this.disconnected = !1, this.emit("connect"), this.emitBuffered()
      }, r.prototype.emitBuffered = function() {
        var t;
        for (t = 0; t < this.receiveBuffer.length; t++)h.apply(this, this.receiveBuffer[t]);
        for (this.receiveBuffer = [], t = 0; t < this.sendBuffer.length; t++)this.packet(this.sendBuffer[t]);
        this.sendBuffer = []
      }, r.prototype.ondisconnect = function() {
        u("server disconnect (%s)", this.nsp), this.destroy(), this.onclose("io server disconnect")
      }, r.prototype.destroy = function() {
        if (this.subs) {
          for (var t = 0; t < this.subs.length; t++)this.subs[t].destroy();
          this.subs = null
        }
        this.io.destroy(this)
      }, r.prototype.close = r.prototype.disconnect = function() {
        return this.connected && (u("performing disconnect (%s)", this.nsp), this.packet({ type: o.DISCONNECT })), this.destroy(), this.connected && this.onclose("io client disconnect"), this
      }
    }, {
      "./on": 4,
      "component-bind": 7,
      "component-emitter": 8,
      debug: 9,
      "has-binary": 35,
      "socket.io-parser": 43,
      "to-array": 47
    }],
    6: [function(t, e) {
      (function(n) {
        function r(t, e) {
          var r = t, e = e || n.location;
          return null == t && (t = e.protocol + "//" + e.hostname), "string" == typeof t && ("/" == t.charAt(0) && (t = "/" == t.charAt(1) ? e.protocol + t : e.hostname + t), /^(https?|wss?):\/\//.test(t) || (i("protocol-less url %s", t), t = "undefined" != typeof e ? e.protocol + "//" + t : "https://" + t), i("parse %s", t), r = o(t)), r.port || (/^(http|ws)$/.test(r.protocol) ? r.port = "80" : /^(http|ws)s$/.test(r.protocol) && (r.port = "443")), r.path = r.path || "/", r.id = r.protocol + "://" + r.host + ":" + r.port, r.href = r.protocol + "://" + r.host + (e && e.port == r.port ? "" : ":" + r.port), r
        }

        var o = t("parseuri"), i = t("debug")("socket.io-client:url");
        e.exports = r
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, { debug: 9, parseuri: 41 }],
    7: [function(t, e) {
      var n = [].slice;
      e.exports = function(t, e) {
        if ("string" == typeof e && (e = t[e]), "function" != typeof e)throw new Error("bind() requires a function");
        var r = n.call(arguments, 2);
        return function() {
          return e.apply(t, r.concat(n.call(arguments)))
        }
      }
    }, {}],
    8: [function(t, e) {
      function n(t) {
        return t ? r(t) : void 0
      }

      function r(t) {
        for (var e in n.prototype)t[e] = n.prototype[e];
        return t
      }

      e.exports = n, n.prototype.on = n.prototype.addEventListener = function(t, e) {
        return this._callbacks = this._callbacks || {}, (this._callbacks[t] = this._callbacks[t] || []).push(e), this
      }, n.prototype.once = function(t, e) {
        function n() {
          r.off(t, n), e.apply(this, arguments)
        }

        var r = this;
        return this._callbacks = this._callbacks || {}, n.fn = e, this.on(t, n), this
      }, n.prototype.off = n.prototype.removeListener = n.prototype.removeAllListeners = n.prototype.removeEventListener = function(t, e) {
        if (this._callbacks = this._callbacks || {}, 0 == arguments.length)return this._callbacks = {}, this;
        var n = this._callbacks[t];
        if (!n)return this;
        if (1 == arguments.length)return delete this._callbacks[t], this;
        for (var r, o = 0; o < n.length; o++)if (r = n[o], r === e || r.fn === e) {
          n.splice(o, 1);
          break
        }
        return this
      }, n.prototype.emit = function(t) {
        this._callbacks = this._callbacks || {};
        var e = [].slice.call(arguments, 1), n = this._callbacks[t];
        if (n) {
          n = n.slice(0);
          for (var r = 0, o = n.length; o > r; ++r)n[r].apply(this, e)
        }
        return this
      }, n.prototype.listeners = function(t) {
        return this._callbacks = this._callbacks || {}, this._callbacks[t] || []
      }, n.prototype.hasListeners = function(t) {
        return !!this.listeners(t).length
      }
    }, {}],
    9: [function(t, e) {
      function n(t) {
        return n.enabled(t) ? function(e) {
          e = r(e);
          var o = new Date, i = o - (n[t] || o);
          n[t] = o, e = t + " " + e + " +" + n.humanize(i), window.console && console.log && Function.prototype.apply.call(console.log, console, arguments)
        } : function() {
        }
      }

      function r(t) {
        return t instanceof Error ? t.stack || t.message : t
      }

      e.exports = n, n.names = [], n.skips = [], n.enable = function(t) {
        try {
          localStorage.debug = t
        } catch (e) {
        }
        for (var r = (t || "").split(/[\s,]+/), o = r.length, i = 0; o > i; i++)t = r[i].replace("*", ".*?"), "-" === t[0] ? n.skips.push(new RegExp("^" + t.substr(1) + "$")) : n.names.push(new RegExp("^" + t + "$"))
      }, n.disable = function() {
        n.enable("")
      }, n.humanize = function(t) {
        var e = 1e3, n = 6e4, r = 60 * n;
        return t >= r ? (t / r).toFixed(1) + "h" : t >= n ? (t / n).toFixed(1) + "m" : t >= e ? (t / e | 0) + "s" : t + "ms"
      }, n.enabled = function(t) {
        for (var e = 0, r = n.skips.length; r > e; e++)if (n.skips[e].test(t))return !1;
        for (var e = 0, r = n.names.length; r > e; e++)if (n.names[e].test(t))return !0;
        return !1
      };
      try {
        window.localStorage && n.enable(localStorage.debug)
      } catch (o) {
      }
    }, {}],
    10: [function(t, e) {
      e.exports = t("./lib/")
    }, { "./lib/": 11 }],
    11: [function(t, e) {
      e.exports = t("./socket"), e.exports.parser = t("engine.io-parser")
    }, { "./socket": 12, "engine.io-parser": 24 }],
    12: [function(t, e) {
      (function(n) {
        function r(t, e) {
          if (!(this instanceof r))return new r(t, e);
          if (e = e || {}, t && "object" == typeof t && (e = t, t = null), t && (t = p(t), e.host = t.host, e.secure = "https" == t.protocol || "wss" == t.protocol, e.port = t.port, t.query && (e.query = t.query)), this.secure = null != e.secure ? e.secure : n.location && "https:" == location.protocol, e.host) {
            var o = e.host.split(":");
            e.hostname = o.shift(), o.length && (e.port = o.pop())
          }
          this.agent = e.agent || !1, this.hostname = e.hostname || (n.location ? location.hostname : "localhost"), this.port = e.port || (n.location && location.port ? location.port : this.secure ? 443 : 80), this.query = e.query || {}, "string" == typeof this.query && (this.query = h.decode(this.query)), this.upgrade = !1 !== e.upgrade, this.path = (e.path || "/engine.io").replace(/\/$/, "") + "/", this.forceJSONP = !!e.forceJSONP, this.jsonp = !1 !== e.jsonp, this.forceBase64 = !!e.forceBase64, this.enablesXDR = !!e.enablesXDR, this.timestampParam = e.timestampParam || "t", this.timestampRequests = e.timestampRequests, this.transports = e.transports || ["polling", "websocket"], this.readyState = "", this.writeBuffer = [], this.callbackBuffer = [], this.policyPort = e.policyPort || 843, this.rememberUpgrade = e.rememberUpgrade || !1, this.open(), this.binaryType = null, this.onlyBinaryUpgrades = e.onlyBinaryUpgrades
        }

        function o(t) {
          var e = {};
          for (var n in t)t.hasOwnProperty(n) && (e[n] = t[n]);
          return e
        }

        var i = t("./transports"), s = t("component-emitter"), a = t("debug")("engine.io-client:socket"), c = t("indexof"), u = t("engine.io-parser"), p = t("parseuri"), f = t("parsejson"), h = t("parseqs");
        e.exports = r, r.priorWebsocketSuccess = !1, s(r.prototype), r.protocol = u.protocol, r.Socket = r, r.Transport = t("./transport"), r.transports = t("./transports"), r.parser = t("engine.io-parser"), r.prototype.createTransport = function(t) {
          a('creating transport "%s"', t);
          var e = o(this.query);
          e.EIO = u.protocol, e.transport = t, this.id && (e.sid = this.id);
          var n = new i[t]({
            agent: this.agent,
            hostname: this.hostname,
            port: this.port,
            secure: this.secure,
            path: this.path,
            query: e,
            forceJSONP: this.forceJSONP,
            jsonp: this.jsonp,
            forceBase64: this.forceBase64,
            enablesXDR: this.enablesXDR,
            timestampRequests: this.timestampRequests,
            timestampParam: this.timestampParam,
            policyPort: this.policyPort,
            socket: this
          });
          return n
        }, r.prototype.open = function() {
          var t;
          if (this.rememberUpgrade && r.priorWebsocketSuccess && -1 != this.transports.indexOf("websocket"))t = "websocket"; else {
            if (0 == this.transports.length) {
              var e = this;
              return void setTimeout(function() {
                e.emit("error", "No transports available")
              }, 0)
            }
            t = this.transports[0]
          }
          this.readyState = "opening";
          var t;
          try {
            t = this.createTransport(t)
          } catch (n) {
            return this.transports.shift(), void this.open()
          }
          t.open(), this.setTransport(t)
        }, r.prototype.setTransport = function(t) {
          a("setting transport %s", t.name);
          var e = this;
          this.transport && (a("clearing existing transport %s", this.transport.name), this.transport.removeAllListeners()), this.transport = t, t.on("drain", function() {
            e.onDrain()
          }).on("packet", function(t) {
            e.onPacket(t)
          }).on("error", function(t) {
            e.onError(t)
          }).on("close", function() {
            e.onClose("transport close")
          })
        }, r.prototype.probe = function(t) {
          function e() {
            if (h.onlyBinaryUpgrades) {
              var e = !this.supportsBinary && h.transport.supportsBinary;
              f = f || e
            }
            f || (a('probe transport "%s" opened', t), p.send([{
              type: "ping",
              data: "probe"
            }]), p.once("packet", function(e) {
              if (!f)if ("pong" == e.type && "probe" == e.data) {
                if (a('probe transport "%s" pong', t), h.upgrading = !0, h.emit("upgrading", p), !p)return;
                r.priorWebsocketSuccess = "websocket" == p.name, a('pausing current transport "%s"', h.transport.name), h.transport.pause(function() {
                  f || "closed" != h.readyState && (a("changing transport and sending upgrade packet"), u(), h.setTransport(p), p.send([{ type: "upgrade" }]), h.emit("upgrade", p), p = null, h.upgrading = !1, h.flush())
                })
              } else {
                a('probe transport "%s" failed', t);
                var n = new Error("probe error");
                n.transport = p.name, h.emit("upgradeError", n)
              }
            }))
          }

          function n() {
            f || (f = !0, u(), p.close(), p = null)
          }

          function o(e) {
            var r = new Error("probe error: " + e);
            r.transport = p.name, n(), a('probe transport "%s" failed because of error: %s', t, e), h.emit("upgradeError", r)
          }

          function i() {
            o("transport closed")
          }

          function s() {
            o("socket closed")
          }

          function c(t) {
            p && t.name != p.name && (a('"%s" works - aborting "%s"', t.name, p.name), n())
          }

          function u() {
            p.removeListener("open", e), p.removeListener("error", o), p.removeListener("close", i), h.removeListener("close", s), h.removeListener("upgrading", c)
          }

          a('probing transport "%s"', t);
          var p = this.createTransport(t, { probe: 1 }), f = !1, h = this;
          r.priorWebsocketSuccess = !1, p.once("open", e), p.once("error", o), p.once("close", i), this.once("close", s), this.once("upgrading", c), p.open()
        }, r.prototype.onOpen = function() {
          if (a("socket open"), this.readyState = "open", r.priorWebsocketSuccess = "websocket" == this.transport.name, this.emit("open"), this.flush(), "open" == this.readyState && this.upgrade && this.transport.pause) {
            a("starting upgrade probes");
            for (var t = 0, e = this.upgrades.length; e > t; t++)this.probe(this.upgrades[t])
          }
        }, r.prototype.onPacket = function(t) {
          if ("opening" == this.readyState || "open" == this.readyState)switch (a('socket receive: type "%s", data "%s"', t.type, t.data), this.emit("packet", t), this.emit("heartbeat"), t.type) {
            case"open":
              this.onHandshake(f(t.data));
              break;
            case"pong":
              this.setPing();
              break;
            case"error":
              var e = new Error("server error");
              e.code = t.data, this.emit("error", e);
              break;
            case"message":
              this.emit("data", t.data), this.emit("message", t.data)
          } else a('packet received with socket readyState "%s"', this.readyState)
        }, r.prototype.onHandshake = function(t) {
          this.emit("handshake", t), this.id = t.sid, this.transport.query.sid = t.sid, this.upgrades = this.filterUpgrades(t.upgrades), this.pingInterval = t.pingInterval, this.pingTimeout = t.pingTimeout, this.onOpen(), "closed" != this.readyState && (this.setPing(), this.removeListener("heartbeat", this.onHeartbeat), this.on("heartbeat", this.onHeartbeat))
        }, r.prototype.onHeartbeat = function(t) {
          clearTimeout(this.pingTimeoutTimer);
          var e = this;
          e.pingTimeoutTimer = setTimeout(function() {
            "closed" != e.readyState && e.onClose("ping timeout")
          }, t || e.pingInterval + e.pingTimeout)
        }, r.prototype.setPing = function() {
          var t = this;
          clearTimeout(t.pingIntervalTimer), t.pingIntervalTimer = setTimeout(function() {
            a("writing ping packet - expecting pong within %sms", t.pingTimeout), t.ping(), t.onHeartbeat(t.pingTimeout)
          }, t.pingInterval)
        }, r.prototype.ping = function() {
          this.sendPacket("ping")
        }, r.prototype.onDrain = function() {
          for (var t = 0; t < this.prevBufferLen; t++)this.callbackBuffer[t] && this.callbackBuffer[t]();
          this.writeBuffer.splice(0, this.prevBufferLen), this.callbackBuffer.splice(0, this.prevBufferLen), this.prevBufferLen = 0, 0 == this.writeBuffer.length ? this.emit("drain") : this.flush()
        }, r.prototype.flush = function() {
          "closed" != this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length && (a("flushing %d packets in socket", this.writeBuffer.length), this.transport.send(this.writeBuffer), this.prevBufferLen = this.writeBuffer.length, this.emit("flush"))
        }, r.prototype.write = r.prototype.send = function(t, e) {
          return this.sendPacket("message", t, e), this
        }, r.prototype.sendPacket = function(t, e, n) {
          if ("closing" != this.readyState && "closed" != this.readyState) {
            var r = { type: t, data: e };
            this.emit("packetCreate", r), this.writeBuffer.push(r), this.callbackBuffer.push(n), this.flush()
          }
        }, r.prototype.close = function() {
          function t() {
            r.onClose("forced close"), a("socket closing - telling transport to close"), r.transport.close()
          }

          function e() {
            r.removeListener("upgrade", e), r.removeListener("upgradeError", e), t()
          }

          function n() {
            r.once("upgrade", e), r.once("upgradeError", e)
          }

          if ("opening" == this.readyState || "open" == this.readyState) {
            this.readyState = "closing";
            var r = this;
            this.writeBuffer.length ? this.once("drain", function() {
              this.upgrading ? n() : t()
            }) : this.upgrading ? n() : t()
          }
          return this
        }, r.prototype.onError = function(t) {
          a("socket error %j", t), r.priorWebsocketSuccess = !1, this.emit("error", t), this.onClose("transport error", t)
        }, r.prototype.onClose = function(t, e) {
          if ("opening" == this.readyState || "open" == this.readyState || "closing" == this.readyState) {
            a('socket close with reason: "%s"', t);
            var n = this;
            clearTimeout(this.pingIntervalTimer), clearTimeout(this.pingTimeoutTimer), setTimeout(function() {
              n.writeBuffer = [], n.callbackBuffer = [], n.prevBufferLen = 0
            }, 0), this.transport.removeAllListeners("close"), this.transport.close(), this.transport.removeAllListeners(), this.readyState = "closed", this.id = null, this.emit("close", t, e)
          }
        }, r.prototype.filterUpgrades = function(t) {
          for (var e = [], n = 0, r = t.length; r > n; n++)~c(this.transports, t[n]) && e.push(t[n]);
          return e
        }
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, {
      "./transport": 13,
      "./transports": 14,
      "component-emitter": 8,
      debug: 21,
      "engine.io-parser": 24,
      indexof: 39,
      parsejson: 31,
      parseqs: 32,
      parseuri: 33
    }],
    13: [function(t, e) {
      function n(t) {
        this.path = t.path, this.hostname = t.hostname, this.port = t.port, this.secure = t.secure, this.query = t.query, this.timestampParam = t.timestampParam, this.timestampRequests = t.timestampRequests, this.readyState = "", this.agent = t.agent || !1, this.socket = t.socket, this.enablesXDR = t.enablesXDR
      }

      var r = t("engine.io-parser"), o = t("component-emitter");
      e.exports = n, o(n.prototype), n.timestamps = 0, n.prototype.onError = function(t, e) {
        var n = new Error(t);
        return n.type = "TransportError", n.description = e, this.emit("error", n), this
      }, n.prototype.open = function() {
        return ("closed" == this.readyState || "" == this.readyState) && (this.readyState = "opening", this.doOpen()), this
      }, n.prototype.close = function() {
        return ("opening" == this.readyState || "open" == this.readyState) && (this.doClose(), this.onClose()), this
      }, n.prototype.send = function(t) {
        if ("open" != this.readyState)throw new Error("Transport not open");
        this.write(t)
      }, n.prototype.onOpen = function() {
        this.readyState = "open", this.writable = !0, this.emit("open")
      }, n.prototype.onData = function(t) {
        var e = r.decodePacket(t, this.socket.binaryType);
        this.onPacket(e)
      }, n.prototype.onPacket = function(t) {
        this.emit("packet", t)
      }, n.prototype.onClose = function() {
        this.readyState = "closed", this.emit("close")
      }
    }, { "component-emitter": 8, "engine.io-parser": 24 }],
    14: [function(t, e, n) {
      (function(e) {
        function r(t) {
          var n, r = !1, a = !1, c = !1 !== t.jsonp;
          if (e.location) {
            var u = "https:" == location.protocol, p = location.port;
            p || (p = u ? 443 : 80), r = t.hostname != location.hostname || p != t.port, a = t.secure != u
          }
          if (t.xdomain = r, t.xscheme = a, n = new o(t), "open" in n && !t.forceJSONP)return new i(t);
          if (!c)throw new Error("JSONP disabled");
          return new s(t)
        }

        var o = t("xmlhttprequest"), i = t("./polling-xhr"), s = t("./polling-jsonp"), a = t("./websocket");
        n.polling = r, n.websocket = a
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, { "./polling-jsonp": 15, "./polling-xhr": 16, "./websocket": 18, xmlhttprequest: 19 }],
    15: [function(t, e) {
      (function(n) {
        function r() {
        }

        function o(t) {
          i.call(this, t), this.query = this.query || {}, a || (n.___eio || (n.___eio = []), a = n.___eio), this.index = a.length;
          var e = this;
          a.push(function(t) {
            e.onData(t)
          }), this.query.j = this.index, n.document && n.addEventListener && n.addEventListener("beforeunload", function() {
            e.script && (e.script.onerror = r)
          }, !1)
        }

        var i = t("./polling"), s = t("component-inherit");
        e.exports = o;
        var a, c = /\n/g, u = /\\n/g;
        s(o, i), o.prototype.supportsBinary = !1, o.prototype.doClose = function() {
          this.script && (this.script.parentNode.removeChild(this.script), this.script = null), this.form && (this.form.parentNode.removeChild(this.form), this.form = null, this.iframe = null), i.prototype.doClose.call(this)
        }, o.prototype.doPoll = function() {
          var t = this, e = document.createElement("script");
          this.script && (this.script.parentNode.removeChild(this.script), this.script = null), e.async = !0, e.src = this.uri(), e.onerror = function(e) {
            t.onError("jsonp poll error", e)
          };
          var n = document.getElementsByTagName("script")[0];
          n.parentNode.insertBefore(e, n), this.script = e;
          var r = "undefined" != typeof navigator && /gecko/i.test(navigator.userAgent);
          r && setTimeout(function() {
            var t = document.createElement("iframe");
            document.body.appendChild(t), document.body.removeChild(t)
          }, 100)
        }, o.prototype.doWrite = function(t, e) {
          function n() {
            r(), e()
          }

          function r() {
            if (o.iframe)try {
              o.form.removeChild(o.iframe)
            } catch (t) {
              o.onError("jsonp polling iframe removal error", t)
            }
            try {
              var e = '<iframe src="javascript:0" name="' + o.iframeId + '">';
              i = document.createElement(e)
            } catch (t) {
              i = document.createElement("iframe"), i.name = o.iframeId, i.src = "javascript:0"
            }
            i.id = o.iframeId, o.form.appendChild(i), o.iframe = i
          }

          var o = this;
          if (!this.form) {
            var i, s = document.createElement("form"), a = document.createElement("textarea"), p = this.iframeId = "eio_iframe_" + this.index;
            s.className = "socketio", s.style.position = "absolute", s.style.top = "-1000px", s.style.left = "-1000px", s.target = p, s.method = "POST", s.setAttribute("accept-charset", "utf-8"), a.name = "d", s.appendChild(a), document.body.appendChild(s), this.form = s, this.area = a
          }
          this.form.action = this.uri(), r(), t = t.replace(u, "\\\n"), this.area.value = t.replace(c, "\\n");
          try {
            this.form.submit()
          } catch (f) {
          }
          this.iframe.attachEvent ? this.iframe.onreadystatechange = function() {
            "complete" == o.iframe.readyState && n()
          } : this.iframe.onload = n
        }
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, { "./polling": 17, "component-inherit": 20 }],
    16: [function(t, e) {
      (function(n) {
        function r() {
        }

        function o(t) {
          if (c.call(this, t), n.location) {
            var e = "https:" == location.protocol, r = location.port;
            r || (r = e ? 443 : 80), this.xd = t.hostname != n.location.hostname || r != t.port, this.xs = t.secure != e
          }
        }

        function i(t) {
          this.method = t.method || "GET", this.uri = t.uri, this.xd = !!t.xd, this.xs = !!t.xs, this.async = !1 !== t.async, this.data = void 0 != t.data ? t.data : null, this.agent = t.agent, this.isBinary = t.isBinary, this.supportsBinary = t.supportsBinary, this.enablesXDR = t.enablesXDR, this.create()
        }

        function s() {
          for (var t in i.requests)i.requests.hasOwnProperty(t) && i.requests[t].abort()
        }

        var a = t("xmlhttprequest"), c = t("./polling"), u = t("component-emitter"), p = t("component-inherit"), f = t("debug")("engine.io-client:polling-xhr");
        e.exports = o, e.exports.Request = i, p(o, c), o.prototype.supportsBinary = !0, o.prototype.request = function(t) {
          return t = t || {}, t.uri = this.uri(), t.xd = this.xd, t.xs = this.xs, t.agent = this.agent || !1, t.supportsBinary = this.supportsBinary, t.enablesXDR = this.enablesXDR, new i(t)
        }, o.prototype.doWrite = function(t, e) {
          var n = "string" != typeof t && void 0 !== t, r = this.request({
            method: "POST",
            data: t,
            isBinary: n
          }), o = this;
          r.on("success", e), r.on("error", function(t) {
            o.onError("xhr post error", t)
          }), this.sendXhr = r
        }, o.prototype.doPoll = function() {
          f("xhr poll");
          var t = this.request(), e = this;
          t.on("data", function(t) {
            e.onData(t)
          }), t.on("error", function(t) {
            e.onError("xhr poll error", t)
          }), this.pollXhr = t
        }, u(i.prototype), i.prototype.create = function() {
          var t = this.xhr = new a({
            agent: this.agent,
            xdomain: this.xd,
            xscheme: this.xs,
            enablesXDR: this.enablesXDR
          }), e = this;
          try {
            if (f("xhr open %s: %s", this.method, this.uri), t.open(this.method, this.uri, this.async), this.supportsBinary && (t.responseType = "arraybuffer"), "POST" == this.method)try {
              this.isBinary ? t.setRequestHeader("Content-type", "application/octet-stream") : t.setRequestHeader("Content-type", "text/plain;charset=UTF-8")
            } catch (r) {
            }
            "withCredentials" in t && (t.withCredentials = !0), this.hasXDR() ? (t.onload = function() {
              e.onLoad()
            }, t.onerror = function() {
              e.onError(t.responseText)
            }) : t.onreadystatechange = function() {
              4 == t.readyState && (200 == t.status || 1223 == t.status ? e.onLoad() : setTimeout(function() {
                e.onError(t.status)
              }, 0))
            }, f("xhr data %s", this.data), t.send(this.data)
          } catch (r) {
            return void setTimeout(function() {
              e.onError(r)
            }, 0)
          }
          n.document && (this.index = i.requestsCount++, i.requests[this.index] = this)
        }, i.prototype.onSuccess = function() {
          this.emit("success"), this.cleanup()
        }, i.prototype.onData = function(t) {
          this.emit("data", t), this.onSuccess()
        }, i.prototype.onError = function(t) {
          this.emit("error", t), this.cleanup()
        }, i.prototype.cleanup = function() {
          if ("undefined" != typeof this.xhr && null !== this.xhr) {
            this.hasXDR() ? this.xhr.onload = this.xhr.onerror = r : this.xhr.onreadystatechange = r;
            try {
              this.xhr.abort()
            } catch (t) {
            }
            n.document && delete i.requests[this.index], this.xhr = null
          }
        }, i.prototype.onLoad = function() {
          var t;
          try {
            var e;
            try {
              e = this.xhr.getResponseHeader("Content-Type").split(";")[0]
            } catch (n) {
            }
            t = "application/octet-stream" === e ? this.xhr.response : this.supportsBinary ? "ok" : this.xhr.responseText
          } catch (n) {
            this.onError(n)
          }
          null != t && this.onData(t)
        }, i.prototype.hasXDR = function() {
          return "undefined" != typeof n.XDomainRequest && !this.xs && this.enablesXDR
        }, i.prototype.abort = function() {
          this.cleanup()
        }, n.document && (i.requestsCount = 0, i.requests = {}, n.attachEvent ? n.attachEvent("onunload", s) : n.addEventListener && n.addEventListener("beforeunload", s, !1))
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, { "./polling": 17, "component-emitter": 8, "component-inherit": 20, debug: 21, xmlhttprequest: 19 }],
    17: [function(t, e) {
      function n(t) {
        var e = t && t.forceBase64;
        (!c || e) && (this.supportsBinary = !1), r.call(this, t)
      }

      var r = t("../transport"), o = t("parseqs"), i = t("engine.io-parser"), s = t("component-inherit"), a = t("debug")("engine.io-client:polling");
      e.exports = n;
      var c = function() {
        var e = t("xmlhttprequest"), n = new e({ xdomain: !1 });
        return null != n.responseType
      }();
      s(n, r), n.prototype.name = "polling", n.prototype.doOpen = function() {
        this.poll()
      }, n.prototype.pause = function(t) {
        function e() {
          a("paused"), n.readyState = "paused", t()
        }

        var n = this;
        if (this.readyState = "pausing", this.polling || !this.writable) {
          var r = 0;
          this.polling && (a("we are currently polling - waiting to pause"), r++, this.once("pollComplete", function() {
            a("pre-pause polling complete"), --r || e()
          })), this.writable || (a("we are currently writing - waiting to pause"), r++, this.once("drain", function() {
            a("pre-pause writing complete"), --r || e()
          }))
        } else e()
      }, n.prototype.poll = function() {
        a("polling"), this.polling = !0, this.doPoll(), this.emit("poll")
      }, n.prototype.onData = function(t) {
        var e = this;
        a("polling got data %s", t);
        var n = function(t) {
          return "opening" == e.readyState && e.onOpen(), "close" == t.type ? (e.onClose(), !1) : void e.onPacket(t)
        };
        i.decodePayload(t, this.socket.binaryType, n), "closed" != this.readyState && (this.polling = !1, this.emit("pollComplete"), "open" == this.readyState ? this.poll() : a('ignoring poll - transport state "%s"', this.readyState))
      }, n.prototype.doClose = function() {
        function t() {
          a("writing close packet"), e.write([{ type: "close" }])
        }

        var e = this;
        "open" == this.readyState ? (a("transport open - closing"), t()) : (a("transport not open - deferring close"), this.once("open", t))
      }, n.prototype.write = function(t) {
        var e = this;
        this.writable = !1;
        var n = function() {
          e.writable = !0, e.emit("drain")
        }, e = this;
        i.encodePayload(t, this.supportsBinary, function(t) {
          e.doWrite(t, n)
        })
      }, n.prototype.uri = function() {
        var t = this.query || {}, e = this.secure ? "https" : "http", n = "";
        return !1 !== this.timestampRequests && (t[this.timestampParam] = +new Date + "-" + r.timestamps++), this.supportsBinary || t.sid || (t.b64 = 1), t = o.encode(t), this.port && ("https" == e && 443 != this.port || "http" == e && 80 != this.port) && (n = ":" + this.port), t.length && (t = "?" + t), e + "://" + this.hostname + n + this.path + t
      }
    }, {
      "../transport": 13,
      "component-inherit": 20,
      debug: 21,
      "engine.io-parser": 24,
      parseqs: 32,
      xmlhttprequest: 19
    }],
    18: [function(t, e) {
      function n(t) {
        var e = t && t.forceBase64;
        e && (this.supportsBinary = !1), r.call(this, t)
      }

      var r = t("../transport"), o = t("engine.io-parser"), i = t("parseqs"), s = t("component-inherit"), a = t("debug")("engine.io-client:websocket"), c = t("ws");
      e.exports = n, s(n, r), n.prototype.name = "websocket", n.prototype.supportsBinary = !0, n.prototype.doOpen = function() {
        if (this.check()) {
          var t = this.uri(), e = void 0, n = { agent: this.agent };
          this.ws = new c(t, e, n), void 0 === this.ws.binaryType && (this.supportsBinary = !1), this.ws.binaryType = "arraybuffer", this.addEventListeners()
        }
      }, n.prototype.addEventListeners = function() {
        var t = this;
        this.ws.onopen = function() {
          t.onOpen()
        }, this.ws.onclose = function() {
          t.onClose()
        }, this.ws.onmessage = function(e) {
          t.onData(e.data)
        }, this.ws.onerror = function(e) {
          t.onError("websocket error", e)
        }
      }, "undefined" != typeof navigator && /iPad|iPhone|iPod/i.test(navigator.userAgent) && (n.prototype.onData = function(t) {
        var e = this;
        setTimeout(function() {
          r.prototype.onData.call(e, t)
        }, 0)
      }), n.prototype.write = function(t) {
        function e() {
          n.writable = !0, n.emit("drain")
        }

        var n = this;
        this.writable = !1;
        for (var r = 0, i = t.length; i > r; r++)o.encodePacket(t[r], this.supportsBinary, function(t) {
          try {
            n.ws.send(t)
          } catch (e) {
            a("websocket closed before onclose event")
          }
        });
        setTimeout(e, 0)
      }, n.prototype.onClose = function() {
        r.prototype.onClose.call(this)
      }, n.prototype.doClose = function() {
        "undefined" != typeof this.ws && this.ws.close()
      }, n.prototype.uri = function() {
        var t = this.query || {}, e = this.secure ? "wss" : "ws", n = "";
        return this.port && ("wss" == e && 443 != this.port || "ws" == e && 80 != this.port) && (n = ":" + this.port), this.timestampRequests && (t[this.timestampParam] = +new Date), this.supportsBinary || (t.b64 = 1), t = i.encode(t), t.length && (t = "?" + t), e + "://" + this.hostname + n + this.path + t
      }, n.prototype.check = function() {
        return !(!c || "__initialize" in c && this.name === n.prototype.name)
      }
    }, { "../transport": 13, "component-inherit": 20, debug: 21, "engine.io-parser": 24, parseqs: 32, ws: 34 }],
    19: [function(t, e) {
      var n = t("has-cors");
      e.exports = function(t) {
        var e = t.xdomain, r = t.xscheme, o = t.enablesXDR;
        try {
          if ("undefined" != typeof XMLHttpRequest && (!e || n))return new XMLHttpRequest
        } catch (i) {
        }
        try {
          if ("undefined" != typeof XDomainRequest && !r && o)return new XDomainRequest
        } catch (i) {
        }
        if (!e)try {
          return new ActiveXObject("Microsoft.XMLHTTP")
        } catch (i) {
        }
      }
    }, { "has-cors": 37 }],
    20: [function(t, e) {
      e.exports = function(t, e) {
        var n = function() {
        };
        n.prototype = e.prototype, t.prototype = new n, t.prototype.constructor = t
      }
    }, {}],
    21: [function(t, e, n) {
      function r() {
        return "WebkitAppearance" in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31
      }

      function o() {
        var t = arguments, e = this.useColors;
        if (t[0] = (e ? "%c" : "") + this.namespace + (e ? " %c" : " ") + t[0] + (e ? "%c " : " ") + "+" + n.humanize(this.diff), !e)return t;
        var r = "color: " + this.color;
        t = [t[0], r, "color: inherit"].concat(Array.prototype.slice.call(t, 1));
        var o = 0, i = 0;
        return t[0].replace(/%[a-z%]/g, function(t) {
          "%" !== t && (o++, "%c" === t && (i = o))
        }), t.splice(i, 0, r), t
      }

      function i() {
        return "object" == typeof console && "function" == typeof console.log && Function.prototype.apply.call(console.log, console, arguments)
      }

      function s(t) {
        try {
          null == t ? localStorage.removeItem("debug") : localStorage.debug = t
        } catch (e) {
        }
      }

      function a() {
        var t;
        try {
          t = localStorage.debug
        } catch (e) {
        }
        return t
      }

      n = e.exports = t("./debug"), n.log = i, n.formatArgs = o, n.save = s, n.load = a, n.useColors = r, n.colors = ["lightseagreen", "forestgreen", "goldenrod", "dodgerblue", "darkorchid", "crimson"], n.formatters.j = function(t) {
        return JSON.stringify(t)
      }, n.enable(a())
    }, { "./debug": 22 }],
    22: [function(t, e, n) {
      function r() {
        return n.colors[p++ % n.colors.length]
      }

      function o(t) {
        function e() {
        }

        function o() {
          var t = o, e = +new Date, i = e - (u || e);
          t.diff = i, t.prev = u, t.curr = e, u = e, null == t.useColors && (t.useColors = n.useColors()), null == t.color && t.useColors && (t.color = r());
          var s = Array.prototype.slice.call(arguments);
          s[0] = n.coerce(s[0]), "string" != typeof s[0] && (s = ["%o"].concat(s));
          var a = 0;
          s[0] = s[0].replace(/%([a-z%])/g, function(e, r) {
            if ("%" === e)return e;
            a++;
            var o = n.formatters[r];
            if ("function" == typeof o) {
              var i = s[a];
              e = o.call(t, i), s.splice(a, 1), a--
            }
            return e
          }), "function" == typeof n.formatArgs && (s = n.formatArgs.apply(t, s));
          var c = o.log || n.log || console.log.bind(console);
          c.apply(t, s)
        }

        e.enabled = !1, o.enabled = !0;
        var i = n.enabled(t) ? o : e;
        return i.namespace = t, i
      }

      function i(t) {
        n.save(t);
        for (var e = (t || "").split(/[\s,]+/), r = e.length, o = 0; r > o; o++)e[o] && (t = e[o].replace(/\*/g, ".*?"), "-" === t[0] ? n.skips.push(new RegExp("^" + t.substr(1) + "$")) : n.names.push(new RegExp("^" + t + "$")))
      }

      function s() {
        n.enable("")
      }

      function a(t) {
        var e, r;
        for (e = 0, r = n.skips.length; r > e; e++)if (n.skips[e].test(t))return !1;
        for (e = 0, r = n.names.length; r > e; e++)if (n.names[e].test(t))return !0;
        return !1
      }

      function c(t) {
        return t instanceof Error ? t.stack || t.message : t
      }

      n = e.exports = o, n.coerce = c, n.disable = s, n.enable = i, n.enabled = a, n.humanize = t("ms"), n.names = [], n.skips = [], n.formatters = {};
      var u, p = 0
    }, { ms: 23 }],
    23: [function(t, e) {
      function n(t) {
        var e = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(t);
        if (e) {
          var n = parseFloat(e[1]), r = (e[2] || "ms").toLowerCase();
          switch (r) {
            case"years":
            case"year":
            case"y":
              return n * p;
            case"days":
            case"day":
            case"d":
              return n * u;
            case"hours":
            case"hour":
            case"h":
              return n * c;
            case"minutes":
            case"minute":
            case"m":
              return n * a;
            case"seconds":
            case"second":
            case"s":
              return n * s;
            case"ms":
              return n
          }
        }
      }

      function r(t) {
        return t >= u ? Math.round(t / u) + "d" : t >= c ? Math.round(t / c) + "h" : t >= a ? Math.round(t / a) + "m" : t >= s ? Math.round(t / s) + "s" : t + "ms"
      }

      function o(t) {
        return i(t, u, "day") || i(t, c, "hour") || i(t, a, "minute") || i(t, s, "second") || t + " ms"
      }

      function i(t, e, n) {
        return e > t ? void 0 : 1.5 * e > t ? Math.floor(t / e) + " " + n : Math.ceil(t / e) + " " + n + "s"
      }

      var s = 1e3, a = 60 * s, c = 60 * a, u = 24 * c, p = 365.25 * u;
      e.exports = function(t, e) {
        return e = e || {}, "string" == typeof t ? n(t) : e.long ? o(t) : r(t)
      }
    }, {}],
    24: [function(t, e, n) {
      (function(e) {
        function r(t, e, r) {
          if (!e)return n.encodeBase64Packet(t, r);
          var o = t.data, i = new Uint8Array(o), s = new Uint8Array(1 + o.byteLength);
          s[0] = l[t.type];
          for (var a = 0; a < i.length; a++)s[a + 1] = i[a];
          return r(s.buffer)
        }

        function o(t, e, r) {
          if (!e)return n.encodeBase64Packet(t, r);
          var o = new FileReader;
          return o.onload = function() {
            t.data = o.result, n.encodePacket(t, e, !0, r)
          }, o.readAsArrayBuffer(t.data)
        }

        function i(t, e, r) {
          if (!e)return n.encodeBase64Packet(t, r);
          if (h)return o(t, e, r);
          var i = new Uint8Array(1);
          i[0] = l[t.type];
          var s = new g([i.buffer, t.data]);
          return r(s)
        }

        function s(t, e, n) {
          for (var r = new Array(t.length), o = p(t.length, n), i = function(t, n, o) {
            e(n, function(e, n) {
              r[t] = n, o(e, r)
            })
          }, s = 0; s < t.length; s++)i(s, t[s], o)
        }

        var a = t("./keys"), c = t("arraybuffer.slice"), u = t("base64-arraybuffer"), p = t("after"), f = t("utf8"), h = navigator.userAgent.match(/Android/i);
        n.protocol = 3;
        var l = n.packets = {
          open: 0,
          close: 1,
          ping: 2,
          pong: 3,
          message: 4,
          upgrade: 5,
          noop: 6
        }, d = a(l), y = { type: "error", data: "parser error" }, g = t("blob");
        n.encodePacket = function(t, n, o, s) {
          "function" == typeof n && (s = n, n = !1), "function" == typeof o && (s = o, o = null);
          var a = void 0 === t.data ? void 0 : t.data.buffer || t.data;
          if (e.ArrayBuffer && a instanceof ArrayBuffer)return r(t, n, s);
          if (g && a instanceof e.Blob)return i(t, n, s);
          var c = l[t.type];
          return void 0 !== t.data && (c += o ? f.encode(String(t.data)) : String(t.data)), s("" + c)
        }, n.encodeBase64Packet = function(t, r) {
          var o = "b" + n.packets[t.type];
          if (g && t.data instanceof g) {
            var i = new FileReader;
            return i.onload = function() {
              var t = i.result.split(",")[1];
              r(o + t)
            }, i.readAsDataURL(t.data)
          }
          var s;
          try {
            s = String.fromCharCode.apply(null, new Uint8Array(t.data))
          } catch (a) {
            for (var c = new Uint8Array(t.data), u = new Array(c.length), p = 0; p < c.length; p++)u[p] = c[p];
            s = String.fromCharCode.apply(null, u)
          }
          return o += e.btoa(s), r(o)
        }, n.decodePacket = function(t, e, r) {
          if ("string" == typeof t || void 0 === t) {
            if ("b" == t.charAt(0))return n.decodeBase64Packet(t.substr(1), e);
            if (r)try {
              t = f.decode(t)
            } catch (o) {
              return y
            }
            var i = t.charAt(0);
            return Number(i) == i && d[i] ? t.length > 1 ? { type: d[i], data: t.substring(1) } : { type: d[i] } : y
          }
          var s = new Uint8Array(t), i = s[0], a = c(t, 1);
          return g && "blob" === e && (a = new g([a])), { type: d[i], data: a }
        }, n.decodeBase64Packet = function(t, n) {
          var r = d[t.charAt(0)];
          if (!e.ArrayBuffer)return { type: r, data: { base64: !0, data: t.substr(1) } };
          var o = u.decode(t.substr(1));
          return "blob" === n && g && (o = new g([o])), { type: r, data: o }
        }, n.encodePayload = function(t, e, r) {
          function o(t) {
            return t.length + ":" + t
          }

          function i(t, r) {
            n.encodePacket(t, e, !0, function(t) {
              r(null, o(t))
            })
          }

          return "function" == typeof e && (r = e, e = null), e ? g && !h ? n.encodePayloadAsBlob(t, r) : n.encodePayloadAsArrayBuffer(t, r) : t.length ? void s(t, i, function(t, e) {
            return r(e.join(""))
          }) : r("0:")
        }, n.decodePayload = function(t, e, r) {
          if ("string" != typeof t)return n.decodePayloadAsBinary(t, e, r);
          "function" == typeof e && (r = e, e = null);
          var o;
          if ("" == t)return r(y, 0, 1);
          for (var i, s, a = "", c = 0, u = t.length; u > c; c++) {
            var p = t.charAt(c);
            if (":" != p)a += p; else {
              if ("" == a || a != (i = Number(a)))return r(y, 0, 1);
              if (s = t.substr(c + 1, i), a != s.length)return r(y, 0, 1);
              if (s.length) {
                if (o = n.decodePacket(s, e, !0), y.type == o.type && y.data == o.data)return r(y, 0, 1);
                var f = r(o, c + i, u);
                if (!1 === f)return
              }
              c += i, a = ""
            }
          }
          return "" != a ? r(y, 0, 1) : void 0
        }, n.encodePayloadAsArrayBuffer = function(t, e) {
          function r(t, e) {
            n.encodePacket(t, !0, !0, function(t) {
              return e(null, t)
            })
          }

          return t.length ? void s(t, r, function(t, n) {
            var r = n.reduce(function(t, e) {
              var n;
              return n = "string" == typeof e ? e.length : e.byteLength, t + n.toString().length + n + 2
            }, 0), o = new Uint8Array(r), i = 0;
            return n.forEach(function(t) {
              var e = "string" == typeof t, n = t;
              if (e) {
                for (var r = new Uint8Array(t.length), s = 0; s < t.length; s++)r[s] = t.charCodeAt(s);
                n = r.buffer
              }
              o[i++] = e ? 0 : 1;
              for (var a = n.byteLength.toString(), s = 0; s < a.length; s++)o[i++] = parseInt(a[s]);
              o[i++] = 255;
              for (var r = new Uint8Array(n), s = 0; s < r.length; s++)o[i++] = r[s]
            }), e(o.buffer)
          }) : e(new ArrayBuffer(0))
        }, n.encodePayloadAsBlob = function(t, e) {
          function r(t, e) {
            n.encodePacket(t, !0, !0, function(t) {
              var n = new Uint8Array(1);
              if (n[0] = 1, "string" == typeof t) {
                for (var r = new Uint8Array(t.length), o = 0; o < t.length; o++)r[o] = t.charCodeAt(o);
                t = r.buffer, n[0] = 0
              }
              for (var i = t instanceof ArrayBuffer ? t.byteLength : t.size, s = i.toString(), a = new Uint8Array(s.length + 1), o = 0; o < s.length; o++)a[o] = parseInt(s[o]);
              if (a[s.length] = 255, g) {
                var c = new g([n.buffer, a.buffer, t]);
                e(null, c)
              }
            })
          }

          s(t, r, function(t, n) {
            return e(new g(n))
          })
        }, n.decodePayloadAsBinary = function(t, e, r) {
          "function" == typeof e && (r = e, e = null);
          for (var o = t, i = [], s = !1; o.byteLength > 0;) {
            for (var a = new Uint8Array(o), u = 0 === a[0], p = "", f = 1; 255 != a[f]; f++) {
              if (p.length > 310) {
                s = !0;
                break
              }
              p += a[f]
            }
            if (s)return r(y, 0, 1);
            o = c(o, 2 + p.length), p = parseInt(p);
            var h = c(o, 0, p);
            if (u)try {
              h = String.fromCharCode.apply(null, new Uint8Array(h))
            } catch (l) {
              var d = new Uint8Array(h);
              h = "";
              for (var f = 0; f < d.length; f++)h += String.fromCharCode(d[f])
            }
            i.push(h), o = c(o, p)
          }
          var g = i.length;
          i.forEach(function(t, o) {
            r(n.decodePacket(t, e, !0), o, g)
          })
        }
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, { "./keys": 25, after: 26, "arraybuffer.slice": 27, "base64-arraybuffer": 28, blob: 29, utf8: 30 }],
    25: [function(t, e) {
      e.exports = Object.keys || function(t) {
          var e = [], n = Object.prototype.hasOwnProperty;
          for (var r in t)n.call(t, r) && e.push(r);
          return e
        }
    }, {}],
    26: [function(t, e) {
      function n(t, e, n) {
        function o(t, r) {
          if (o.count <= 0)throw new Error("after called too many times");
          --o.count, t ? (i = !0, e(t), e = n) : 0 !== o.count || i || e(null, r)
        }

        var i = !1;
        return n = n || r, o.count = t, 0 === t ? e() : o
      }

      function r() {
      }

      e.exports = n
    }, {}],
    27: [function(t, e) {
      e.exports = function(t, e, n) {
        var r = t.byteLength;
        if (e = e || 0, n = n || r, t.slice)return t.slice(e, n);
        if (0 > e && (e += r), 0 > n && (n += r), n > r && (n = r), e >= r || e >= n || 0 === r)return new ArrayBuffer(0);
        for (var o = new Uint8Array(t), i = new Uint8Array(n - e), s = e, a = 0; n > s; s++, a++)i[a] = o[s];
        return i.buffer
      }
    }, {}],
    28: [function(t, e, n) {
      !function(t) {
        "use strict";
        n.encode = function(e) {
          var n, r = new Uint8Array(e), o = r.length, i = "";
          for (n = 0; o > n; n += 3)i += t[r[n] >> 2], i += t[(3 & r[n]) << 4 | r[n + 1] >> 4], i += t[(15 & r[n + 1]) << 2 | r[n + 2] >> 6], i += t[63 & r[n + 2]];
          return o % 3 === 2 ? i = i.substring(0, i.length - 1) + "=" : o % 3 === 1 && (i = i.substring(0, i.length - 2) + "=="), i
        }, n.decode = function(e) {
          var n, r, o, i, s, a = .75 * e.length, c = e.length, u = 0;
          "=" === e[e.length - 1] && (a--, "=" === e[e.length - 2] && a--);
          var p = new ArrayBuffer(a), f = new Uint8Array(p);
          for (n = 0; c > n; n += 4)r = t.indexOf(e[n]), o = t.indexOf(e[n + 1]), i = t.indexOf(e[n + 2]), s = t.indexOf(e[n + 3]), f[u++] = r << 2 | o >> 4, f[u++] = (15 & o) << 4 | i >> 2, f[u++] = (3 & i) << 6 | 63 & s;
          return p
        }
      }("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")
    }, {}],
    29: [function(t, e) {
      (function(t) {
        function n(t, e) {
          e = e || {};
          for (var n = new r, o = 0; o < t.length; o++)n.append(t[o]);
          return e.type ? n.getBlob(e.type) : n.getBlob()
        }

        var r = t.BlobBuilder || t.WebKitBlobBuilder || t.MSBlobBuilder || t.MozBlobBuilder, o = function() {
          try {
            var t = new Blob(["hi"]);
            return 2 == t.size
          } catch (e) {
            return !1
          }
        }(), i = r && r.prototype.append && r.prototype.getBlob;
        e.exports = function() {
          return o ? t.Blob : i ? n : void 0
        }()
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, {}],
    30: [function(e, n, r) {
      (function(e) {
        !function(o) {
          function i(t) {
            for (var e, n, r = [], o = 0, i = t.length; i > o;)e = t.charCodeAt(o++), e >= 55296 && 56319 >= e && i > o ? (n = t.charCodeAt(o++), 56320 == (64512 & n) ? r.push(((1023 & e) << 10) + (1023 & n) + 65536) : (r.push(e), o--)) : r.push(e);
            return r
          }

          function s(t) {
            for (var e, n = t.length, r = -1, o = ""; ++r < n;)e = t[r], e > 65535 && (e -= 65536, o += b(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), o += b(e);
            return o
          }

          function a(t, e) {
            return b(t >> e & 63 | 128)
          }

          function c(t) {
            if (0 == (4294967168 & t))return b(t);
            var e = "";
            return 0 == (4294965248 & t) ? e = b(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (e = b(t >> 12 & 15 | 224), e += a(t, 6)) : 0 == (4292870144 & t) && (e = b(t >> 18 & 7 | 240), e += a(t, 12), e += a(t, 6)), e += b(63 & t | 128)
          }

          function u(t) {
            for (var e, n = i(t), r = n.length, o = -1, s = ""; ++o < r;)e = n[o], s += c(e);
            return s
          }

          function p() {
            if (v >= m)throw Error("Invalid byte index");
            var t = 255 & g[v];
            if (v++, 128 == (192 & t))return 63 & t;
            throw Error("Invalid continuation byte")
          }

          function f() {
            var t, e, n, r, o;
            if (v > m)throw Error("Invalid byte index");
            if (v == m)return !1;
            if (t = 255 & g[v], v++, 0 == (128 & t))return t;
            if (192 == (224 & t)) {
              var e = p();
              if (o = (31 & t) << 6 | e, o >= 128)return o;
              throw Error("Invalid continuation byte")
            }
            if (224 == (240 & t)) {
              if (e = p(), n = p(), o = (15 & t) << 12 | e << 6 | n, o >= 2048)return o;
              throw Error("Invalid continuation byte")
            }
            if (240 == (248 & t) && (e = p(), n = p(), r = p(), o = (15 & t) << 18 | e << 12 | n << 6 | r, o >= 65536 && 1114111 >= o))return o;
            throw Error("Invalid UTF-8 detected")
          }

          function h(t) {
            g = i(t), m = g.length, v = 0;
            for (var e, n = []; (e = f()) !== !1;)n.push(e);
            return s(n)
          }

          var l = "object" == typeof r && r, d = "object" == typeof n && n && n.exports == l && n, y = "object" == typeof e && e;
          (y.global === y || y.window === y) && (o = y);
          var g, m, v, b = String.fromCharCode, w = { version: "2.0.0", encode: u, decode: h };
          if ("function" == typeof t && "object" == typeof t.amd && t.amd)t(function() {
            return w
          }); else if (l && !l.nodeType)if (d)d.exports = w; else {
            var k = {}, A = k.hasOwnProperty;
            for (var x in w)A.call(w, x) && (l[x] = w[x])
          } else o.utf8 = w
        }(this)
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, {}],
    31: [function(t, e) {
      (function(t) {
        var n = /^[\],:{}\s]*$/, r = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, o = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, i = /(?:^|:|,)(?:\s*\[)+/g, s = /^\s+/, a = /\s+$/;
        e.exports = function(e) {
          return "string" == typeof e && e ? (e = e.replace(s, "").replace(a, ""), t.JSON && JSON.parse ? JSON.parse(e) : n.test(e.replace(r, "@").replace(o, "]").replace(i, "")) ? new Function("return " + e)() : void 0) : null
        }
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, {}],
    32: [function(t, e, n) {
      n.encode = function(t) {
        var e = "";
        for (var n in t)t.hasOwnProperty(n) && (e.length && (e += "&"), e += encodeURIComponent(n) + "=" + encodeURIComponent(t[n]));
        return e
      }, n.decode = function(t) {
        for (var e = {}, n = t.split("&"), r = 0, o = n.length; o > r; r++) {
          var i = n[r].split("=");
          e[decodeURIComponent(i[0])] = decodeURIComponent(i[1])
        }
        return e
      }
    }, {}],
    33: [function(t, e) {
      var n = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/, r = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
      e.exports = function(t) {
        var e = t, o = t.indexOf("["), i = t.indexOf("]");
        -1 != o && -1 != i && (t = t.substring(0, o) + t.substring(o, i).replace(/:/g, ";") + t.substring(i, t.length));
        for (var s = n.exec(t || ""), a = {}, c = 14; c--;)a[r[c]] = s[c] || "";
        return -1 != o && -1 != i && (a.source = e, a.host = a.host.substring(1, a.host.length - 1).replace(/;/g, ":"), a.authority = a.authority.replace("[", "").replace("]", "").replace(/;/g, ":"), a.ipv6uri = !0), a
      }
    }, {}],
    34: [function(t, e) {
      function n(t, e) {
        var n;
        return n = e ? new o(t, e) : new o(t)
      }

      var r = function() {
        return this
      }(), o = r.WebSocket || r.MozWebSocket;
      e.exports = o ? n : null, o && (n.prototype = o.prototype)
    }, {}],
    35: [function(t, e) {
      (function(n) {
        function r(t) {
          function e(t) {
            if (!t)return !1;
            if (n.Buffer && n.Buffer.isBuffer(t) || n.ArrayBuffer && t instanceof ArrayBuffer || n.Blob && t instanceof Blob || n.File && t instanceof File)return !0;
            if (o(t)) {
              for (var r = 0; r < t.length; r++)if (e(t[r]))return !0
            } else if (t && "object" == typeof t) {
              t.toJSON && (t = t.toJSON());
              for (var i in t)if (t.hasOwnProperty(i) && e(t[i]))return !0
            }
            return !1
          }

          return e(t)
        }

        var o = t("isarray");
        e.exports = r
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, { isarray: 36 }],
    36: [function(t, e) {
      e.exports = Array.isArray || function(t) {
          return "[object Array]" == Object.prototype.toString.call(t)
        }
    }, {}],
    37: [function(t, e) {
      var n = t("global");
      try {
        e.exports = "XMLHttpRequest" in n && "withCredentials" in new n.XMLHttpRequest
      } catch (r) {
        e.exports = !1
      }
    }, { global: 38 }],
    38: [function(t, e) {
      e.exports = function() {
        return this
      }()
    }, {}],
    39: [function(t, e) {
      var n = [].indexOf;
      e.exports = function(t, e) {
        if (n)return t.indexOf(e);
        for (var r = 0; r < t.length; ++r)if (t[r] === e)return r;
        return -1
      }
    }, {}],
    40: [function(t, e, n) {
      var r = Object.prototype.hasOwnProperty;
      n.keys = Object.keys || function(t) {
          var e = [];
          for (var n in t)r.call(t, n) && e.push(n);
          return e
        }, n.values = function(t) {
        var e = [];
        for (var n in t)r.call(t, n) && e.push(t[n]);
        return e
      }, n.merge = function(t, e) {
        for (var n in e)r.call(e, n) && (t[n] = e[n]);
        return t
      }, n.length = function(t) {
        return n.keys(t).length
      }, n.isEmpty = function(t) {
        return 0 == n.length(t)
      }
    }, {}],
    41: [function(t, e) {
      var n = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/, r = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
      e.exports = function(t) {
        for (var e = n.exec(t || ""), o = {}, i = 14; i--;)o[r[i]] = e[i] || "";
        return o
      }
    }, {}],
    42: [function(t, e, n) {
      (function(e) {
        var r = t("isarray"), o = t("./is-buffer");
        n.deconstructPacket = function(t) {
          function e(t) {
            if (!t)return t;
            if (o(t)) {
              var i = { _placeholder: !0, num: n.length };
              return n.push(t), i
            }
            if (r(t)) {
              for (var s = new Array(t.length), a = 0; a < t.length; a++)s[a] = e(t[a]);
              return s
            }
            if ("object" == typeof t && !(t instanceof Date)) {
              var s = {};
              for (var c in t)s[c] = e(t[c]);
              return s
            }
            return t
          }

          var n = [], i = t.data, s = t;
          return s.data = e(i), s.attachments = n.length, { packet: s, buffers: n }
        }, n.reconstructPacket = function(t, e) {
          function n(t) {
            if (t && t._placeholder) {
              var o = e[t.num];
              return o
            }
            if (r(t)) {
              for (var i = 0; i < t.length; i++)t[i] = n(t[i]);
              return t
            }
            if (t && "object" == typeof t) {
              for (var s in t)t[s] = n(t[s]);
              return t
            }
            return t
          }

          return t.data = n(t.data), t.attachments = void 0, t
        }, n.removeBlobs = function(t, n) {
          function i(t, c, u) {
            if (!t)return t;
            if (e.Blob && t instanceof Blob || e.File && t instanceof File) {
              s++;
              var p = new FileReader;
              p.onload = function() {
                u ? u[c] = this.result : a = this.result, --s || n(a)
              }, p.readAsArrayBuffer(t)
            } else if (r(t))for (var f = 0; f < t.length; f++)i(t[f], f, t); else if (t && "object" == typeof t && !o(t))for (var h in t)i(t[h], h, t)
          }

          var s = 0, a = t;
          i(a), s || n(a)
        }
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, { "./is-buffer": 44, isarray: 45 }],
    43: [function(t, e, n) {
      function r() {
      }

      function o(t) {
        var e = "", r = !1;
        return e += t.type, (n.BINARY_EVENT == t.type || n.BINARY_ACK == t.type) && (e += t.attachments, e += "-"), t.nsp && "/" != t.nsp && (r = !0, e += t.nsp), null != t.id && (r && (e += ",", r = !1), e += t.id), null != t.data && (r && (e += ","), e += f.stringify(t.data)), p("encoded %j as %s", t, e), e
      }

      function i(t, e) {
        function n(t) {
          var n = l.deconstructPacket(t), r = o(n.packet), i = n.buffers;
          i.unshift(r), e(i)
        }

        l.removeBlobs(t, n)
      }

      function s() {
        this.reconstructor = null
      }

      function a(t) {
        var e = {}, r = 0;
        if (e.type = Number(t.charAt(0)), null == n.types[e.type])return u();
        if (n.BINARY_EVENT == e.type || n.BINARY_ACK == e.type) {
          for (e.attachments = ""; "-" != t.charAt(++r);)e.attachments += t.charAt(r);
          e.attachments = Number(e.attachments)
        }
        if ("/" == t.charAt(r + 1))for (e.nsp = ""; ++r;) {
          var o = t.charAt(r);
          if ("," == o)break;
          if (e.nsp += o, r + 1 == t.length)break
        } else e.nsp = "/";
        var i = t.charAt(r + 1);
        if ("" != i && Number(i) == i) {
          for (e.id = ""; ++r;) {
            var o = t.charAt(r);
            if (null == o || Number(o) != o) {
              --r;
              break
            }
            if (e.id += t.charAt(r), r + 1 == t.length)break
          }
          e.id = Number(e.id)
        }
        if (t.charAt(++r))try {
          e.data = f.parse(t.substr(r))
        } catch (s) {
          return u()
        }
        return p("decoded %s as %j", t, e), e
      }

      function c(t) {
        this.reconPack = t, this.buffers = []
      }

      function u() {
        return { type: n.ERROR, data: "parser error" }
      }

      var p = t("debug")("socket.io-parser"), f = t("json3"), h = (t("isarray"), t("component-emitter")), l = t("./binary"), d = t("./is-buffer");
      n.protocol = 4, n.types = ["CONNECT", "DISCONNECT", "EVENT", "BINARY_EVENT", "ACK", "BINARY_ACK", "ERROR"], n.CONNECT = 0, n.DISCONNECT = 1, n.EVENT = 2, n.ACK = 3, n.ERROR = 4, n.BINARY_EVENT = 5, n.BINARY_ACK = 6, n.Encoder = r, n.Decoder = s, r.prototype.encode = function(t, e) {
        if (p("encoding packet %j", t), n.BINARY_EVENT == t.type || n.BINARY_ACK == t.type)i(t, e); else {
          var r = o(t);
          e([r])
        }
      }, h(s.prototype), s.prototype.add = function(t) {
        var e;
        if ("string" == typeof t)e = a(t), n.BINARY_EVENT == e.type || n.BINARY_ACK == e.type ? (this.reconstructor = new c(e), 0 == this.reconstructor.reconPack.attachments && this.emit("decoded", e)) : this.emit("decoded", e); else {
          if (!d(t) && !t.base64)throw new Error("Unknown type: " + t);
          if (!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");
          e = this.reconstructor.takeBinaryData(t), e && (this.reconstructor = null, this.emit("decoded", e))
        }
      }, s.prototype.destroy = function() {
        this.reconstructor && this.reconstructor.finishedReconstruction()
      }, c.prototype.takeBinaryData = function(t) {
        if (this.buffers.push(t), this.buffers.length == this.reconPack.attachments) {
          var e = l.reconstructPacket(this.reconPack, this.buffers);
          return this.finishedReconstruction(), e
        }
        return null
      }, c.prototype.finishedReconstruction = function() {
        this.reconPack = null, this.buffers = []
      }
    }, { "./binary": 42, "./is-buffer": 44, "component-emitter": 8, debug: 9, isarray: 45, json3: 46 }],
    44: [function(t, e) {
      (function(t) {
        function n(e) {
          return t.Buffer && t.Buffer.isBuffer(e) || t.ArrayBuffer && e instanceof ArrayBuffer
        }

        e.exports = n
      }).call(this, "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, {}],
    45: [function(t, e) {
      e.exports = t(36)
    }, {}],
    46: [function(e, n, r) {
      !function(e) {
        function n(t) {
          if (n[t] !== s)return n[t];
          var e;
          if ("bug-string-char-index" == t)e = "a" != "a"[0]; else if ("json" == t)e = n("json-stringify") && n("json-parse"); else {
            var r, o = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
            if ("json-stringify" == t) {
              var i = p.stringify, c = "function" == typeof i && f;
              if (c) {
                (r = function() {
                  return 1
                }).toJSON = r;
                try {
                  c = "0" === i(0) && "0" === i(new Number) && '""' == i(new String) && i(a) === s && i(s) === s && i() === s && "1" === i(r) && "[1]" == i([r]) && "[null]" == i([s]) && "null" == i(null) && "[null,null,null]" == i([s, a, null]) && i({ a: [r, !0, !1, null, "\x00\b\n\f\r	"] }) == o && "1" === i(null, r) && "[\n 1,\n 2\n]" == i([1, 2], null, 1) && '"-271821-04-20T00:00:00.000Z"' == i(new Date(-864e13)) && '"+275760-09-13T00:00:00.000Z"' == i(new Date(864e13)) && '"-000001-01-01T00:00:00.000Z"' == i(new Date(-621987552e5)) && '"1969-12-31T23:59:59.999Z"' == i(new Date(-1))
                } catch (u) {
                  c = !1
                }
              }
              e = c
            }
            if ("json-parse" == t) {
              var h = p.parse;
              if ("function" == typeof h)try {
                if (0 === h("0") && !h(!1)) {
                  r = h(o);
                  var l = 5 == r.a.length && 1 === r.a[0];
                  if (l) {
                    try {
                      l = !h('"	"')
                    } catch (u) {
                    }
                    if (l)try {
                      l = 1 !== h("01")
                    } catch (u) {
                    }
                    if (l)try {
                      l = 1 !== h("1.")
                    } catch (u) {
                    }
                  }
                }
              } catch (u) {
                l = !1
              }
              e = l
            }
          }
          return n[t] = !!e
        }

        var o, i, s, a = {}.toString, c = "function" == typeof t && t.amd, u = "object" == typeof JSON && JSON, p = "object" == typeof r && r && !r.nodeType && r;
        p && u ? (p.stringify = u.stringify, p.parse = u.parse) : p = e.JSON = u || {};
        var f = new Date(-0xc782b5b800cec);
        try {
          f = -109252 == f.getUTCFullYear() && 0 === f.getUTCMonth() && 1 === f.getUTCDate() && 10 == f.getUTCHours() && 37 == f.getUTCMinutes() && 6 == f.getUTCSeconds() && 708 == f.getUTCMilliseconds()
        } catch (h) {
        }
        if (!n("json")) {
          var l = "[object Function]", d = "[object Date]", y = "[object Number]", g = "[object String]", m = "[object Array]", v = "[object Boolean]", b = n("bug-string-char-index");
          if (!f)var w = Math.floor, k = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], A = function(t, e) {
            return k[e] + 365 * (t - 1970) + w((t - 1969 + (e = +(e > 1))) / 4) - w((t - 1901 + e) / 100) + w((t - 1601 + e) / 400)
          };
          (o = {}.hasOwnProperty) || (o = function(t) {
            var e, n = {};
            return (n.__proto__ = null, n.__proto__ = { toString: 1 }, n).toString != a ? o = function(t) {
              var e = this.__proto__, n = t in (this.__proto__ = null, this);
              return this.__proto__ = e, n
            } : (e = n.constructor, o = function(t) {
              var n = (this.constructor || e).prototype;
              return t in this && !(t in n && this[t] === n[t])
            }), n = null, o.call(this, t)
          });
          var x = { "boolean": 1, number: 1, string: 1, undefined: 1 }, B = function(t, e) {
            var n = typeof t[e];
            return "object" == n ? !!t[e] : !x[n]
          };
          if (i = function(t, e) {
              var n, r, s, c = 0;
              (n = function() {
                this.valueOf = 0
              }).prototype.valueOf = 0, r = new n;
              for (s in r)o.call(r, s) && c++;
              return n = r = null, c ? i = 2 == c ? function(t, e) {
                var n, r = {}, i = a.call(t) == l;
                for (n in t)i && "prototype" == n || o.call(r, n) || !(r[n] = 1) || !o.call(t, n) || e(n)
              } : function(t, e) {
                var n, r, i = a.call(t) == l;
                for (n in t)i && "prototype" == n || !o.call(t, n) || (r = "constructor" === n) || e(n);
                (r || o.call(t, n = "constructor")) && e(n)
              } : (r = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"], i = function(t, e) {
                var n, i, s = a.call(t) == l, c = !s && "function" != typeof t.constructor && B(t, "hasOwnProperty") ? t.hasOwnProperty : o;
                for (n in t)s && "prototype" == n || !c.call(t, n) || e(n);
                for (i = r.length; n = r[--i]; c.call(t, n) && e(n));
              }), i(t, e)
            }, !n("json-stringify")) {
            var C = {
              92: "\\\\",
              34: '\\"',
              8: "\\b",
              12: "\\f",
              10: "\\n",
              13: "\\r",
              9: "\\t"
            }, S = "000000", E = function(t, e) {
              return (S + (e || 0)).slice(-t)
            }, T = "\\u00", _ = function(t) {
              var e, n = '"', r = 0, o = t.length, i = o > 10 && b;
              for (i && (e = t.split("")); o > r; r++) {
                var s = t.charCodeAt(r);
                switch (s) {
                  case 8:
                  case 9:
                  case 10:
                  case 12:
                  case 13:
                  case 34:
                  case 92:
                    n += C[s];
                    break;
                  default:
                    if (32 > s) {
                      n += T + E(2, s.toString(16));
                      break
                    }
                    n += i ? e[r] : b ? t.charAt(r) : t[r]
                }
              }
              return n + '"'
            }, R = function(t, e, n, r, c, u, p) {
              var f, h, l, b, k, x, B, C, S, T, P, N, O, j, q, D;
              try {
                f = e[t]
              } catch (I) {
              }
              if ("object" == typeof f && f)if (h = a.call(f), h != d || o.call(f, "toJSON"))"function" == typeof f.toJSON && (h != y && h != g && h != m || o.call(f, "toJSON")) && (f = f.toJSON(t)); else if (f > -1 / 0 && 1 / 0 > f) {
                if (A) {
                  for (k = w(f / 864e5), l = w(k / 365.2425) + 1970 - 1; A(l + 1, 0) <= k; l++);
                  for (b = w((k - A(l, 0)) / 30.42); A(l, b + 1) <= k; b++);
                  k = 1 + k - A(l, b), x = (f % 864e5 + 864e5) % 864e5, B = w(x / 36e5) % 24, C = w(x / 6e4) % 60, S = w(x / 1e3) % 60, T = x % 1e3
                } else l = f.getUTCFullYear(), b = f.getUTCMonth(), k = f.getUTCDate(), B = f.getUTCHours(), C = f.getUTCMinutes(), S = f.getUTCSeconds(), T = f.getUTCMilliseconds();
                f = (0 >= l || l >= 1e4 ? (0 > l ? "-" : "+") + E(6, 0 > l ? -l : l) : E(4, l)) + "-" + E(2, b + 1) + "-" + E(2, k) + "T" + E(2, B) + ":" + E(2, C) + ":" + E(2, S) + "." + E(3, T) + "Z"
              } else f = null;
              if (n && (f = n.call(e, t, f)), null === f)return "null";
              if (h = a.call(f), h == v)return "" + f;
              if (h == y)return f > -1 / 0 && 1 / 0 > f ? "" + f : "null";
              if (h == g)return _("" + f);
              if ("object" == typeof f) {
                for (j = p.length; j--;)if (p[j] === f)throw TypeError();
                if (p.push(f), P = [], q = u, u += c, h == m) {
                  for (O = 0, j = f.length; j > O; O++)N = R(O, f, n, r, c, u, p), P.push(N === s ? "null" : N);
                  D = P.length ? c ? "[\n" + u + P.join(",\n" + u) + "\n" + q + "]" : "[" + P.join(",") + "]" : "[]"
                } else i(r || f, function(t) {
                  var e = R(t, f, n, r, c, u, p);
                  e !== s && P.push(_(t) + ":" + (c ? " " : "") + e)
                }), D = P.length ? c ? "{\n" + u + P.join(",\n" + u) + "\n" + q + "}" : "{" + P.join(",") + "}" : "{}";
                return p.pop(), D
              }
            };
            p.stringify = function(t, e, n) {
              var r, o, i, s;
              if ("function" == typeof e || "object" == typeof e && e)if ((s = a.call(e)) == l)o = e; else if (s == m) {
                i = {};
                for (var c, u = 0, p = e.length; p > u; c = e[u++], s = a.call(c), (s == g || s == y) && (i[c] = 1));
              }
              if (n)if ((s = a.call(n)) == y) {
                if ((n -= n % 1) > 0)for (r = "", n > 10 && (n = 10); r.length < n; r += " ");
              } else s == g && (r = n.length <= 10 ? n : n.slice(0, 10));
              return R("", (c = {}, c[""] = t, c), o, i, r, "", [])
            }
          }
          if (!n("json-parse")) {
            var P, N, O = String.fromCharCode, j = {
              92: "\\",
              34: '"',
              47: "/",
              98: "\b",
              116: "	",
              110: "\n",
              102: "\f",
              114: "\r"
            }, q = function() {
              throw P = N = null, SyntaxError()
            }, D = function() {
              for (var t, e, n, r, o, i = N, s = i.length; s > P;)switch (o = i.charCodeAt(P)) {
                case 9:
                case 10:
                case 13:
                case 32:
                  P++;
                  break;
                case 123:
                case 125:
                case 91:
                case 93:
                case 58:
                case 44:
                  return t = b ? i.charAt(P) : i[P], P++, t;
                case 34:
                  for (t = "@", P++; s > P;)if (o = i.charCodeAt(P), 32 > o)q(); else if (92 == o)switch (o = i.charCodeAt(++P)) {
                    case 92:
                    case 34:
                    case 47:
                    case 98:
                    case 116:
                    case 110:
                    case 102:
                    case 114:
                      t += j[o], P++;
                      break;
                    case 117:
                      for (e = ++P, n = P + 4; n > P; P++)o = i.charCodeAt(P), o >= 48 && 57 >= o || o >= 97 && 102 >= o || o >= 65 && 70 >= o || q();
                      t += O("0x" + i.slice(e, P));
                      break;
                    default:
                      q()
                  } else {
                    if (34 == o)break;
                    for (o = i.charCodeAt(P), e = P; o >= 32 && 92 != o && 34 != o;)o = i.charCodeAt(++P);
                    t += i.slice(e, P)
                  }
                  if (34 == i.charCodeAt(P))return P++, t;
                  q();
                default:
                  if (e = P, 45 == o && (r = !0, o = i.charCodeAt(++P)), o >= 48 && 57 >= o) {
                    for (48 == o && (o = i.charCodeAt(P + 1), o >= 48 && 57 >= o) && q(), r = !1; s > P && (o = i.charCodeAt(P), o >= 48 && 57 >= o); P++);
                    if (46 == i.charCodeAt(P)) {
                      for (n = ++P; s > n && (o = i.charCodeAt(n), o >= 48 && 57 >= o); n++);
                      n == P && q(), P = n
                    }
                    if (o = i.charCodeAt(P), 101 == o || 69 == o) {
                      for (o = i.charCodeAt(++P), (43 == o || 45 == o) && P++, n = P; s > n && (o = i.charCodeAt(n), o >= 48 && 57 >= o); n++);
                      n == P && q(), P = n
                    }
                    return +i.slice(e, P)
                  }
                  if (r && q(), "true" == i.slice(P, P + 4))return P += 4, !0;
                  if ("false" == i.slice(P, P + 5))return P += 5, !1;
                  if ("null" == i.slice(P, P + 4))return P += 4, null;
                  q()
              }
              return "$"
            }, I = function(t) {
              var e, n;
              if ("$" == t && q(), "string" == typeof t) {
                if ("@" == (b ? t.charAt(0) : t[0]))return t.slice(1);
                if ("[" == t) {
                  for (e = []; t = D(), "]" != t; n || (n = !0))n && ("," == t ? (t = D(), "]" == t && q()) : q()), "," == t && q(), e.push(I(t));
                  return e
                }
                if ("{" == t) {
                  for (e = {}; t = D(), "}" != t; n || (n = !0))n && ("," == t ? (t = D(), "}" == t && q()) : q()), ("," == t || "string" != typeof t || "@" != (b ? t.charAt(0) : t[0]) || ":" != D()) && q(), e[t.slice(1)] = I(D());
                  return e
                }
                q()
              }
              return t
            }, U = function(t, e, n) {
              var r = L(t, e, n);
              r === s ? delete t[e] : t[e] = r
            }, L = function(t, e, n) {
              var r, o = t[e];
              if ("object" == typeof o && o)if (a.call(o) == m)for (r = o.length; r--;)U(o, r, n); else i(o, function(t) {
                U(o, t, n)
              });
              return n.call(t, e, o)
            };
            p.parse = function(t, e) {
              var n, r;
              return P = 0, N = "" + t, n = I(D()), "$" != D() && q(), P = N = null, e && a.call(e) == l ? L((r = {}, r[""] = n, r), "", e) : n
            }
          }
        }
        c && t(function() {
          return p
        })
      }(this)
    }, {}],
    47: [function(t, e) {
      function n(t, e) {
        var n = [];
        e = e || 0;
        for (var r = e || 0; r < t.length; r++)n[r - e] = t[r];
        return n
      }

      e.exports = n
    }, {}]
  }, {}, [1])(1)
});
!function() {
  "use strict";
  angular.module("app", ["ngRoute", "ngResource", "api.services"]).config(["$routeProvider", function(o) {
    o.when("/", { templateUrl: "main.html", controller: "MainController" }).otherwise({ redirectTo: "/" })
  }]).controller("NavController", ["$location", "$scope", "api.services.assignment", function(o, n, r) {
    console.log("Nav Controller loaded..."), r.init(function() {
      window.ApiServices = r
    }), n.isActive = function(n) {
      return o.$$url === n ? "active" : "inactive"
    }
  }]).controller("MainController", ["$scope", "$http", "api.services.assignment", function(o, n, r) {
    console.log("Main Controller loaded..."), o.error = [], o.data = [], o.$on("WATCH_ERROR_UPDATED", function() {
      var n = r.ApiData.io_watch.error;
      void 0 !== n && (o.error.push(n), console.error(n)), o.$digest()
    }), o.$on("WATCH_DATA_UPDATED", function() {
      var n = r.ApiData.io_watch.data;
      void 0 !== n && (o.data.push(n), console.log(n)), o.$digest()
    }), o.clear = function() {
      o.data = [], o.error = [];
      try {
        console.clear()
      } catch (n) {
      }
    }, o.ping = function() {
      r.ping()
    }, o.sub = function() {
      r.sub()
    }, o.unsub = function() {
      r.unsub()
    }, o.status = function() {
      n.get("/api/").success(function(n) {
        o.data.push(n), console.log(n)
      }).error(function(n) {
        o.error.push(n), console.error(n)
      })
    }, o.historical = function() {
      n.get("/api/historical").success(function(n) {
        o.data.push(n), console.log(n)
      }).error(function(n) {
        o.error.push(n), console.error(n)
      })
    }
  }])
}();
!function() {
  angular.module("api.services", []).service("api.services.assignment", ["$http", "$rootScope", "$location", "$timeout", function(n, t, i, o) {
    function c(n) {
      n.on("connect", function() {
        f.io_watch = {}
      }), n.on("error", function(n) {
        f.io_watch.error = n, t.$broadcast("WATCH_ERROR_UPDATED")
      }), n.on("data", function(n, i) {
        i(s), f.io_watch.data = n, t.$broadcast("WATCH_DATA_UPDATED")
      })
    }

    function u() {
      e.emit("sub", { state: !0 })
    }

    function r() {
      e.emit("unsub", { state: !1 })
    }

    function a() {
      e.emit("ping", {})
    }

    var e, s = 1, f = {}, p = function(n) {
      console.log("Initializing sniper Apis...");
      var t = i.$$protocol + "://" + i.$$host;
      e = io(t + "/watch"), c(e), o(function() {
        n()
      }, 500, !0)
    };
    return {
      ApiData: f, init: function(n) {
        return p(n)
      }, sub: function() {
        return u()
      }, unsub: function() {
        return r()
      }, ping: function() {
        return a()
      }
    }
  }])
}();
//# sourceMappingURL=data:application/json;base64,